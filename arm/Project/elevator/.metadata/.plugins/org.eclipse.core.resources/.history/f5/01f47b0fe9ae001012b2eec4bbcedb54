
EV_PJ_Ver.1.0.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002520  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080026b8  080026b8  000036b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f0  080026f0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080026f0  080026f0  000036f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026f8  080026f8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f8  080026f8  000036f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026fc  080026fc  000036fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002700  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  0800270c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800270c  00004110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b473  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de6  00000000  00000000  0000f4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00011298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a0e  00000000  00000000  00011f88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000161e4  00000000  00000000  00012996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f722  00000000  00000000  00028b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a92c  00000000  00000000  0003829c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2bc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003590  00000000  00000000  000c2c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000c619c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080026a0 	.word	0x080026a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	080026a0 	.word	0x080026a0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <apMain>:


}

void apMain()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	  //MOTOR1의 동작 테스트

	//UP();
	//DOWN();
	//UPDOWNSTOP();
	MOTOR1TEST();
 8000508:	f000 fa80 	bl	8000a0c <MOTOR1TEST>
	//LEFTRIGHTSTOP();
	//MOTOR2TEST();



}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08a      	sub	sp, #40	@ 0x28
 8000514:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	605a      	str	r2, [r3, #4]
 8000520:	609a      	str	r2, [r3, #8]
 8000522:	60da      	str	r2, [r3, #12]
 8000524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	4b6b      	ldr	r3, [pc, #428]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052e:	4a6a      	ldr	r2, [pc, #424]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 8000530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000534:	6313      	str	r3, [r2, #48]	@ 0x30
 8000536:	4b68      	ldr	r3, [pc, #416]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800053a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	4b64      	ldr	r3, [pc, #400]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800054a:	4a63      	ldr	r2, [pc, #396]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	@ 0x30
 8000552:	4b61      	ldr	r3, [pc, #388]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
 8000562:	4b5d      	ldr	r3, [pc, #372]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000566:	4a5c      	ldr	r2, [pc, #368]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 8000568:	f043 0301 	orr.w	r3, r3, #1
 800056c:	6313      	str	r3, [r2, #48]	@ 0x30
 800056e:	4b5a      	ldr	r3, [pc, #360]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b56      	ldr	r3, [pc, #344]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000582:	4a55      	ldr	r2, [pc, #340]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 8000584:	f043 0302 	orr.w	r3, r3, #2
 8000588:	6313      	str	r3, [r2, #48]	@ 0x30
 800058a:	4b53      	ldr	r3, [pc, #332]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	f003 0302 	and.w	r3, r3, #2
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	603b      	str	r3, [r7, #0]
 800059a:	4b4f      	ldr	r3, [pc, #316]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a4e      	ldr	r2, [pc, #312]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b4c      	ldr	r3, [pc, #304]	@ (80006d8 <MX_GPIO_Init+0x1c8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	603b      	str	r3, [r7, #0]
 80005b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005b2:	2200      	movs	r2, #0
 80005b4:	218f      	movs	r1, #143	@ 0x8f
 80005b6:	4849      	ldr	r0, [pc, #292]	@ (80006dc <MX_GPIO_Init+0x1cc>)
 80005b8:	f000 fec8 	bl	800134c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 80005bc:	2200      	movs	r2, #0
 80005be:	f248 7113 	movw	r1, #34579	@ 0x8713
 80005c2:	4847      	ldr	r0, [pc, #284]	@ (80006e0 <MX_GPIO_Init+0x1d0>)
 80005c4:	f000 fec2 	bl	800134c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13
 80005c8:	2200      	movs	r2, #0
 80005ca:	f24e 413b 	movw	r1, #58427	@ 0xe43b
 80005ce:	4845      	ldr	r0, [pc, #276]	@ (80006e4 <MX_GPIO_Init+0x1d4>)
 80005d0:	f000 febc 	bl	800134c <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005d4:	238f      	movs	r3, #143	@ 0x8f
 80005d6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	4619      	mov	r1, r3
 80005ea:	483c      	ldr	r0, [pc, #240]	@ (80006dc <MX_GPIO_Init+0x1cc>)
 80005ec:	f000 fd2a 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 80005f0:	f248 7313 	movw	r3, #34579	@ 0x8713
 80005f4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f6:	2301      	movs	r3, #1
 80005f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000602:	f107 0314 	add.w	r3, r7, #20
 8000606:	4619      	mov	r1, r3
 8000608:	4835      	ldr	r0, [pc, #212]	@ (80006e0 <MX_GPIO_Init+0x1d0>)
 800060a:	f000 fd1b 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_12;
 800060e:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8000612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	2300      	movs	r3, #0
 8000616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 0314 	add.w	r3, r7, #20
 8000620:	4619      	mov	r1, r3
 8000622:	482f      	ldr	r0, [pc, #188]	@ (80006e0 <MX_GPIO_Init+0x1d0>)
 8000624:	f000 fd0e 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8000628:	f44f 7358 	mov.w	r3, #864	@ 0x360
 800062c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062e:	2300      	movs	r3, #0
 8000630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4827      	ldr	r0, [pc, #156]	@ (80006dc <MX_GPIO_Init+0x1cc>)
 800063e:	f000 fd01 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB13
                           PB14 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_13
 8000642:	f24e 433b 	movw	r3, #58427	@ 0xe43b
 8000646:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4619      	mov	r1, r3
 800065a:	4822      	ldr	r0, [pc, #136]	@ (80006e4 <MX_GPIO_Init+0x1d4>)
 800065c:	f000 fcf2 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000660:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000664:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000666:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4819      	ldr	r0, [pc, #100]	@ (80006dc <MX_GPIO_Init+0x1cc>)
 8000678:	f000 fce4 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800067c:	2304      	movs	r3, #4
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000680:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	4619      	mov	r1, r3
 8000690:	4815      	ldr	r0, [pc, #84]	@ (80006e8 <MX_GPIO_Init+0x1d8>)
 8000692:	f000 fcd7 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000696:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069c:	2300      	movs	r3, #0
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	480e      	ldr	r0, [pc, #56]	@ (80006e4 <MX_GPIO_Init+0x1d4>)
 80006ac:	f000 fcca 	bl	8001044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2100      	movs	r1, #0
 80006b4:	2008      	movs	r0, #8
 80006b6:	f000 fc8e 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80006ba:	2008      	movs	r0, #8
 80006bc:	f000 fca7 	bl	800100e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	2028      	movs	r0, #40	@ 0x28
 80006c6:	f000 fc86 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006ca:	2028      	movs	r0, #40	@ 0x28
 80006cc:	f000 fc9f 	bl	800100e <HAL_NVIC_EnableIRQ>

}
 80006d0:	bf00      	nop
 80006d2:	3728      	adds	r7, #40	@ 0x28
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020000 	.word	0x40020000
 80006e4:	40020400 	.word	0x40020400
 80006e8:	40020c00 	.word	0x40020c00

080006ec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006f0:	4b12      	ldr	r3, [pc, #72]	@ (800073c <MX_I2C1_Init+0x50>)
 80006f2:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <MX_I2C1_Init+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_I2C1_Init+0x50>)
 80006f8:	4a12      	ldr	r2, [pc, #72]	@ (8000744 <MX_I2C1_Init+0x58>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_I2C1_Init+0x50>)
 800070a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800070e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000710:	4b0a      	ldr	r3, [pc, #40]	@ (800073c <MX_I2C1_Init+0x50>)
 8000712:	2200      	movs	r2, #0
 8000714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_I2C1_Init+0x50>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <MX_I2C1_Init+0x50>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_I2C1_Init+0x50>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	@ (800073c <MX_I2C1_Init+0x50>)
 800072a:	f000 fe4d 	bl	80013c8 <HAL_I2C_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000734:	f000 f8ca 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000028 	.word	0x20000028
 8000740:	40005400 	.word	0x40005400
 8000744:	000186a0 	.word	0x000186a0

08000748 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	@ 0x28
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a19      	ldr	r2, [pc, #100]	@ (80007cc <HAL_I2C_MspInit+0x84>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d12b      	bne.n	80007c2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000786:	23c0      	movs	r3, #192	@ 0xc0
 8000788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078a:	2312      	movs	r3, #18
 800078c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000796:	2304      	movs	r3, #4
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f107 0314 	add.w	r3, r7, #20
 800079e:	4619      	mov	r1, r3
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <HAL_I2C_MspInit+0x8c>)
 80007a2:	f000 fc4f 	bl	8001044 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_I2C_MspInit+0x88>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	@ 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40005400 	.word	0x40005400
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f000 fa8a 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f80c 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e4:	f7ff fe94 	bl	8000510 <MX_GPIO_Init>
  MX_TIM11_Init();
 80007e8:	f000 f9fe 	bl	8000be8 <MX_TIM11_Init>
  MX_I2C1_Init();
 80007ec:	f7ff ff7e 	bl	80006ec <MX_I2C1_Init>
  MX_TIM3_Init();
 80007f0:	f000 f996 	bl	8000b20 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  apMain();
 80007f4:	f7ff fe86 	bl	8000504 <apMain>
 80007f8:	e7fc      	b.n	80007f4 <main+0x1c>
	...

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	@ 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	@ 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f001 ff1c 	bl	8002648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b27      	ldr	r3, [pc, #156]	@ (80008c4 <SystemClock_Config+0xc8>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	4a26      	ldr	r2, [pc, #152]	@ (80008c4 <SystemClock_Config+0xc8>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000830:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <SystemClock_Config+0xc8>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a20      	ldr	r2, [pc, #128]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000846:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800084a:	6013      	str	r3, [r2, #0]
 800084c:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <SystemClock_Config+0xcc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000860:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800086a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800086c:	2304      	movs	r3, #4
 800086e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000870:	2364      	movs	r3, #100	@ 0x64
 8000872:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000878:	2304      	movs	r3, #4
 800087a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800087c:	f107 0320 	add.w	r3, r7, #32
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fee5 	bl	8001650 <HAL_RCC_OscConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800088c:	f000 f81e 	bl	80008cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000890:	230f      	movs	r3, #15
 8000892:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000894:	2302      	movs	r3, #2
 8000896:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800089c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008a6:	f107 030c 	add.w	r3, r7, #12
 80008aa:	2103      	movs	r1, #3
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 f947 	bl	8001b40 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008b8:	f000 f808 	bl	80008cc <Error_Handler>
  }
}
 80008bc:	bf00      	nop
 80008be:	3750      	adds	r7, #80	@ 0x50
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40007000 	.word	0x40007000

080008cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d0:	b672      	cpsid	i
}
 80008d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <Error_Handler+0x8>

080008d8 <stepMotor1>:
		{1,0,0,1}

};

void stepMotor1(uint8_t step1)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(IN1_GPIO_PORT, IN1_PIN, HALF_STEP_SEQ1[step1][0]);
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a16      	ldr	r2, [pc, #88]	@ (8000940 <stepMotor1+0x68>)
 80008e6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80008ea:	461a      	mov	r2, r3
 80008ec:	2102      	movs	r1, #2
 80008ee:	4815      	ldr	r0, [pc, #84]	@ (8000944 <stepMotor1+0x6c>)
 80008f0:	f000 fd2c 	bl	800134c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_PORT, IN2_PIN, HALF_STEP_SEQ1[step1][1]);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a12      	ldr	r2, [pc, #72]	@ (8000940 <stepMotor1+0x68>)
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	4413      	add	r3, r2
 80008fc:	785b      	ldrb	r3, [r3, #1]
 80008fe:	461a      	mov	r2, r3
 8000900:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000904:	480f      	ldr	r0, [pc, #60]	@ (8000944 <stepMotor1+0x6c>)
 8000906:	f000 fd21 	bl	800134c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_PORT, IN3_PIN, HALF_STEP_SEQ1[step1][2]);
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	4a0c      	ldr	r2, [pc, #48]	@ (8000940 <stepMotor1+0x68>)
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	789b      	ldrb	r3, [r3, #2]
 8000914:	461a      	mov	r2, r3
 8000916:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800091a:	480a      	ldr	r0, [pc, #40]	@ (8000944 <stepMotor1+0x6c>)
 800091c:	f000 fd16 	bl	800134c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_PORT, IN4_PIN, HALF_STEP_SEQ1[step1][3]);
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	4a07      	ldr	r2, [pc, #28]	@ (8000940 <stepMotor1+0x68>)
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	78db      	ldrb	r3, [r3, #3]
 800092a:	461a      	mov	r2, r3
 800092c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000930:	4804      	ldr	r0, [pc, #16]	@ (8000944 <stepMotor1+0x6c>)
 8000932:	f000 fd0b 	bl	800134c <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	080026b8 	.word	0x080026b8
 8000944:	40020400 	.word	0x40020400

08000948 <rotateSteps1>:



void rotateSteps1(uint16_t steps1, uint8_t direction)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b084      	sub	sp, #16
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	460a      	mov	r2, r1
 8000952:	80fb      	strh	r3, [r7, #6]
 8000954:	4613      	mov	r3, r2
 8000956:	717b      	strb	r3, [r7, #5]

	for(uint16_t i=0; i<steps1; i++)
 8000958:	2300      	movs	r3, #0
 800095a:	81fb      	strh	r3, [r7, #14]
 800095c:	e019      	b.n	8000992 <rotateSteps1+0x4a>
	{
		uint8_t step1;

		//회전방향 설정
		if(direction == DIR_CW)
 800095e:	797b      	ldrb	r3, [r7, #5]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d105      	bne.n	8000970 <rotateSteps1+0x28>
		{
			step1=i%8;		//CW
 8000964:	89fb      	ldrh	r3, [r7, #14]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	f003 0307 	and.w	r3, r3, #7
 800096c:	737b      	strb	r3, [r7, #13]
 800096e:	e006      	b.n	800097e <rotateSteps1+0x36>
		}
		else
		{
			step1=7-(i%8);	//CCW
 8000970:	89fb      	ldrh	r3, [r7, #14]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	43db      	mvns	r3, r3
 8000976:	b2db      	uxtb	r3, r3
 8000978:	f003 0307 	and.w	r3, r3, #7
 800097c:	737b      	strb	r3, [r7, #13]
		}
		stepMotor1(step1);
 800097e:	7b7b      	ldrb	r3, [r7, #13]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffa9 	bl	80008d8 <stepMotor1>

		HAL_Delay(2);	//각 스텝간 지연
 8000986:	2002      	movs	r0, #2
 8000988:	f000 fa26 	bl	8000dd8 <HAL_Delay>
	for(uint16_t i=0; i<steps1; i++)
 800098c:	89fb      	ldrh	r3, [r7, #14]
 800098e:	3301      	adds	r3, #1
 8000990:	81fb      	strh	r3, [r7, #14]
 8000992:	89fa      	ldrh	r2, [r7, #14]
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	429a      	cmp	r2, r3
 8000998:	d3e1      	bcc.n	800095e <rotateSteps1+0x16>
	}


}
 800099a:	bf00      	nop
 800099c:	bf00      	nop
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <rotateDegrees1>:

void rotateDegrees1(uint16_t degrees, uint8_t direction)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	460a      	mov	r2, r1
 80009ae:	80fb      	strh	r3, [r7, #6]
 80009b0:	4613      	mov	r3, r2
 80009b2:	717b      	strb	r3, [r7, #5]
	//각도계산
	uint16_t steps1 = (uint16_t)((uint32_t)(degrees*STEPS_PER_REVOLATION)/360);
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	031b      	lsls	r3, r3, #12
 80009b8:	08db      	lsrs	r3, r3, #3
 80009ba:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <rotateDegrees1+0x34>)
 80009bc:	fba2 2303 	umull	r2, r3, r2, r3
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	81fb      	strh	r3, [r7, #14]
	rotateSteps1(steps1,direction);
 80009c4:	797a      	ldrb	r2, [r7, #5]
 80009c6:	89fb      	ldrh	r3, [r7, #14]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffbc 	bl	8000948 <rotateSteps1>
}
 80009d0:	bf00      	nop
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	16c16c17 	.word	0x16c16c17

080009dc <UP>:


//stepper1에 사용되는 커스텀 함수입니다.

void UP(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
    /* 1. 반시계 540도 회전 */
    rotateDegrees1(180, DIR_CCW);
 80009e0:	2101      	movs	r1, #1
 80009e2:	20b4      	movs	r0, #180	@ 0xb4
 80009e4:	f7ff ffde 	bl	80009a4 <rotateDegrees1>
}
 80009e8:	bf00      	nop
 80009ea:	bd80      	pop	{r7, pc}

080009ec <DOWN>:
void DOWN(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	/* 2. 시계 방향 540도 회전 */
	rotateDegrees1(180, DIR_CW);
 80009f0:	2100      	movs	r1, #0
 80009f2:	20b4      	movs	r0, #180	@ 0xb4
 80009f4:	f7ff ffd6 	bl	80009a4 <rotateDegrees1>
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <UPDOWNSTOP>:
void UPDOWNSTOP(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
    /* 3. 정지 (0도 명령 — 의미상 no move) */
    rotateDegrees1(0, DIR_CW);
 8000a00:	2100      	movs	r1, #0
 8000a02:	2000      	movs	r0, #0
 8000a04:	f7ff ffce 	bl	80009a4 <rotateDegrees1>
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MOTOR1TEST>:

void MOTOR1TEST(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	UP();
 8000a10:	f7ff ffe4 	bl	80009dc <UP>
	UPDOWNSTOP();
 8000a14:	f7ff fff2 	bl	80009fc <UPDOWNSTOP>
	HAL_Delay(1000);
 8000a18:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a1c:	f000 f9dc 	bl	8000dd8 <HAL_Delay>
	DOWN();
 8000a20:	f7ff ffe4 	bl	80009ec <DOWN>

}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <NMI_Handler+0x4>

08000a80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <MemManage_Handler+0x4>

08000a90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ace:	f000 f963 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}

08000ad6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000ad6:	b580      	push	{r7, lr}
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ada:	2004      	movs	r0, #4
 8000adc:	f000 fc50 	bl	8001380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000ae8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000aec:	f000 fc48 	bl	8001380 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000af0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000af4:	f000 fc44 	bl	8001380 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <SystemInit+0x20>)
 8000b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b06:	4a05      	ldr	r2, [pc, #20]	@ (8000b1c <SystemInit+0x20>)
 8000b08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08c      	sub	sp, #48	@ 0x30
 8000b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	1d3b      	adds	r3, r7, #4
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b4c:	4b24      	ldr	r3, [pc, #144]	@ (8000be0 <MX_TIM3_Init+0xc0>)
 8000b4e:	4a25      	ldr	r2, [pc, #148]	@ (8000be4 <MX_TIM3_Init+0xc4>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b52:	4b23      	ldr	r3, [pc, #140]	@ (8000be0 <MX_TIM3_Init+0xc0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <MX_TIM3_Init+0xc0>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b5e:	4b20      	ldr	r3, [pc, #128]	@ (8000be0 <MX_TIM3_Init+0xc0>)
 8000b60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <MX_TIM3_Init+0xc0>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <MX_TIM3_Init+0xc0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b72:	481b      	ldr	r0, [pc, #108]	@ (8000be0 <MX_TIM3_Init+0xc0>)
 8000b74:	f001 f9f0 	bl	8001f58 <HAL_TIM_Base_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000b7e:	f7ff fea5 	bl	80008cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b86:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b88:	f107 0320 	add.w	r3, r7, #32
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4814      	ldr	r0, [pc, #80]	@ (8000be0 <MX_TIM3_Init+0xc0>)
 8000b90:	f001 fa31 	bl	8001ff6 <HAL_TIM_ConfigClockSource>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000b9a:	f7ff fe97 	bl	80008cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_TIM3_Init+0xc0>)
 8000bae:	f001 fae9 	bl	8002184 <HAL_TIM_SlaveConfigSynchro>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000bb8:	f7ff fe88 	bl	80008cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_TIM3_Init+0xc0>)
 8000bca:	f001 fccf 	bl	800256c <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000bd4:	f7ff fe7a 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3730      	adds	r7, #48	@ 0x30
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000007c 	.word	0x2000007c
 8000be4:	40000400 	.word	0x40000400

08000be8 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000bec:	4b0e      	ldr	r3, [pc, #56]	@ (8000c28 <MX_TIM11_Init+0x40>)
 8000bee:	4a0f      	ldr	r2, [pc, #60]	@ (8000c2c <MX_TIM11_Init+0x44>)
 8000bf0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000c28 <MX_TIM11_Init+0x40>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <MX_TIM11_Init+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <MX_TIM11_Init+0x40>)
 8000c00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c04:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <MX_TIM11_Init+0x40>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <MX_TIM11_Init+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	@ (8000c28 <MX_TIM11_Init+0x40>)
 8000c14:	f001 f9a0 	bl	8001f58 <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000c1e:	f7ff fe55 	bl	80008cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000c4 	.word	0x200000c4
 8000c2c:	40014800 	.word	0x40014800

08000c30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a15      	ldr	r2, [pc, #84]	@ (8000c94 <HAL_TIM_Base_MspInit+0x64>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d10e      	bne.n	8000c60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <HAL_TIM_Base_MspInit+0x68>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	4a13      	ldr	r2, [pc, #76]	@ (8000c98 <HAL_TIM_Base_MspInit+0x68>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <HAL_TIM_Base_MspInit+0x68>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000c5e:	e012      	b.n	8000c86 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM11)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <HAL_TIM_Base_MspInit+0x6c>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d10d      	bne.n	8000c86 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_TIM_Base_MspInit+0x68>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	4a09      	ldr	r2, [pc, #36]	@ (8000c98 <HAL_TIM_Base_MspInit+0x68>)
 8000c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c7a:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <HAL_TIM_Base_MspInit+0x68>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
}
 8000c86:	bf00      	nop
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	40000400 	.word	0x40000400
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40014800 	.word	0x40014800

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ca4:	f7ff ff2a 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f001 fcc3 	bl	8002658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fd81 	bl	80007d8 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce4:	08002700 	.word	0x08002700
  ldr r2, =_sbss
 8000ce8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000cec:	20000110 	.word	0x20000110

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f94f 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fe7e 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f967 	bl	800102a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	@ (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	2000010c 	.word	0x2000010c

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000010c 	.word	0x2000010c

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	@ (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	@ (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e159      	b.n	8001314 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 8148 	bne.w	800130e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	2b02      	cmp	r3, #2
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80a2 	beq.w	800130e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b57      	ldr	r3, [pc, #348]	@ (800132c <HAL_GPIO_Init+0x2e8>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a56      	ldr	r2, [pc, #344]	@ (800132c <HAL_GPIO_Init+0x2e8>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b54      	ldr	r3, [pc, #336]	@ (800132c <HAL_GPIO_Init+0x2e8>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e6:	4a52      	ldr	r2, [pc, #328]	@ (8001330 <HAL_GPIO_Init+0x2ec>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a49      	ldr	r2, [pc, #292]	@ (8001334 <HAL_GPIO_Init+0x2f0>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d019      	beq.n	8001246 <HAL_GPIO_Init+0x202>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a48      	ldr	r2, [pc, #288]	@ (8001338 <HAL_GPIO_Init+0x2f4>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0x1fe>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a47      	ldr	r2, [pc, #284]	@ (800133c <HAL_GPIO_Init+0x2f8>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d00d      	beq.n	800123e <HAL_GPIO_Init+0x1fa>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a46      	ldr	r2, [pc, #280]	@ (8001340 <HAL_GPIO_Init+0x2fc>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0x1f6>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a45      	ldr	r2, [pc, #276]	@ (8001344 <HAL_GPIO_Init+0x300>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d101      	bne.n	8001236 <HAL_GPIO_Init+0x1f2>
 8001232:	2304      	movs	r3, #4
 8001234:	e008      	b.n	8001248 <HAL_GPIO_Init+0x204>
 8001236:	2307      	movs	r3, #7
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x204>
 800123a:	2303      	movs	r3, #3
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x204>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x204>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x204>
 8001246:	2300      	movs	r3, #0
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	f002 0203 	and.w	r2, r2, #3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4093      	lsls	r3, r2
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001258:	4935      	ldr	r1, [pc, #212]	@ (8001330 <HAL_GPIO_Init+0x2ec>)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b38      	ldr	r3, [pc, #224]	@ (8001348 <HAL_GPIO_Init+0x304>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a2f      	ldr	r2, [pc, #188]	@ (8001348 <HAL_GPIO_Init+0x304>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b2d      	ldr	r3, [pc, #180]	@ (8001348 <HAL_GPIO_Init+0x304>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a24      	ldr	r2, [pc, #144]	@ (8001348 <HAL_GPIO_Init+0x304>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ba:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <HAL_GPIO_Init+0x304>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012de:	4a1a      	ldr	r2, [pc, #104]	@ (8001348 <HAL_GPIO_Init+0x304>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e4:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <HAL_GPIO_Init+0x304>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001308:	4a0f      	ldr	r2, [pc, #60]	@ (8001348 <HAL_GPIO_Init+0x304>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3301      	adds	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	f67f aea2 	bls.w	8001060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3724      	adds	r7, #36	@ 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40020800 	.word	0x40020800
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40021000 	.word	0x40021000
 8001348:	40013c00 	.word	0x40013c00

0800134c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
 8001358:	4613      	mov	r3, r2
 800135a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001362:	887a      	ldrh	r2, [r7, #2]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001368:	e003      	b.n	8001372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800136a:	887b      	ldrh	r3, [r7, #2]
 800136c:	041a      	lsls	r2, r3, #16
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	619a      	str	r2, [r3, #24]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800138a:	4b08      	ldr	r3, [pc, #32]	@ (80013ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001396:	4a05      	ldr	r2, [pc, #20]	@ (80013ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001398:	88fb      	ldrh	r3, [r7, #6]
 800139a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 f806 	bl	80013b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e12b      	b.n	8001632 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d106      	bne.n	80013f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff f9aa 	bl	8000748 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2224      	movs	r2, #36	@ 0x24
 80013f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800141a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800142a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800142c:	f000 fd80 	bl	8001f30 <HAL_RCC_GetPCLK1Freq>
 8001430:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	4a81      	ldr	r2, [pc, #516]	@ (800163c <HAL_I2C_Init+0x274>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d807      	bhi.n	800144c <HAL_I2C_Init+0x84>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4a80      	ldr	r2, [pc, #512]	@ (8001640 <HAL_I2C_Init+0x278>)
 8001440:	4293      	cmp	r3, r2
 8001442:	bf94      	ite	ls
 8001444:	2301      	movls	r3, #1
 8001446:	2300      	movhi	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	e006      	b.n	800145a <HAL_I2C_Init+0x92>
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4a7d      	ldr	r2, [pc, #500]	@ (8001644 <HAL_I2C_Init+0x27c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	bf94      	ite	ls
 8001454:	2301      	movls	r3, #1
 8001456:	2300      	movhi	r3, #0
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e0e7      	b.n	8001632 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4a78      	ldr	r2, [pc, #480]	@ (8001648 <HAL_I2C_Init+0x280>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	68ba      	ldr	r2, [r7, #8]
 800147e:	430a      	orrs	r2, r1
 8001480:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4a6a      	ldr	r2, [pc, #424]	@ (800163c <HAL_I2C_Init+0x274>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d802      	bhi.n	800149c <HAL_I2C_Init+0xd4>
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3301      	adds	r3, #1
 800149a:	e009      	b.n	80014b0 <HAL_I2C_Init+0xe8>
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	4a69      	ldr	r2, [pc, #420]	@ (800164c <HAL_I2C_Init+0x284>)
 80014a8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ac:	099b      	lsrs	r3, r3, #6
 80014ae:	3301      	adds	r3, #1
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	6812      	ldr	r2, [r2, #0]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80014c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	495c      	ldr	r1, [pc, #368]	@ (800163c <HAL_I2C_Init+0x274>)
 80014cc:	428b      	cmp	r3, r1
 80014ce:	d819      	bhi.n	8001504 <HAL_I2C_Init+0x13c>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e59      	subs	r1, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fbb1 f3f3 	udiv	r3, r1, r3
 80014de:	1c59      	adds	r1, r3, #1
 80014e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80014e4:	400b      	ands	r3, r1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00a      	beq.n	8001500 <HAL_I2C_Init+0x138>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1e59      	subs	r1, r3, #1
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f8:	3301      	adds	r3, #1
 80014fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014fe:	e051      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001500:	2304      	movs	r3, #4
 8001502:	e04f      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d111      	bne.n	8001530 <HAL_I2C_Init+0x168>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1e58      	subs	r0, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	440b      	add	r3, r1
 800151a:	fbb0 f3f3 	udiv	r3, r0, r3
 800151e:	3301      	adds	r3, #1
 8001520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001524:	2b00      	cmp	r3, #0
 8001526:	bf0c      	ite	eq
 8001528:	2301      	moveq	r3, #1
 800152a:	2300      	movne	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	e012      	b.n	8001556 <HAL_I2C_Init+0x18e>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1e58      	subs	r0, r3, #1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6859      	ldr	r1, [r3, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	0099      	lsls	r1, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	fbb0 f3f3 	udiv	r3, r0, r3
 8001546:	3301      	adds	r3, #1
 8001548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf0c      	ite	eq
 8001550:	2301      	moveq	r3, #1
 8001552:	2300      	movne	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_I2C_Init+0x196>
 800155a:	2301      	movs	r3, #1
 800155c:	e022      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10e      	bne.n	8001584 <HAL_I2C_Init+0x1bc>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1e58      	subs	r0, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6859      	ldr	r1, [r3, #4]
 800156e:	460b      	mov	r3, r1
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	440b      	add	r3, r1
 8001574:	fbb0 f3f3 	udiv	r3, r0, r3
 8001578:	3301      	adds	r3, #1
 800157a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001582:	e00f      	b.n	80015a4 <HAL_I2C_Init+0x1dc>
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	1e58      	subs	r0, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6859      	ldr	r1, [r3, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	0099      	lsls	r1, r3, #2
 8001594:	440b      	add	r3, r1
 8001596:	fbb0 f3f3 	udiv	r3, r0, r3
 800159a:	3301      	adds	r3, #1
 800159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	6809      	ldr	r1, [r1, #0]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80015d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6911      	ldr	r1, [r2, #16]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	68d2      	ldr	r2, [r2, #12]
 80015de:	4311      	orrs	r1, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	431a      	orrs	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2220      	movs	r2, #32
 800161e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	000186a0 	.word	0x000186a0
 8001640:	001e847f 	.word	0x001e847f
 8001644:	003d08ff 	.word	0x003d08ff
 8001648:	431bde83 	.word	0x431bde83
 800164c:	10624dd3 	.word	0x10624dd3

08001650 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e267      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d075      	beq.n	800175a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800166e:	4b88      	ldr	r3, [pc, #544]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b04      	cmp	r3, #4
 8001678:	d00c      	beq.n	8001694 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167a:	4b85      	ldr	r3, [pc, #532]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001682:	2b08      	cmp	r3, #8
 8001684:	d112      	bne.n	80016ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001686:	4b82      	ldr	r3, [pc, #520]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001692:	d10b      	bne.n	80016ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	4b7e      	ldr	r3, [pc, #504]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d05b      	beq.n	8001758 <HAL_RCC_OscConfig+0x108>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d157      	bne.n	8001758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e242      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b4:	d106      	bne.n	80016c4 <HAL_RCC_OscConfig+0x74>
 80016b6:	4b76      	ldr	r3, [pc, #472]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a75      	ldr	r2, [pc, #468]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e01d      	b.n	8001700 <HAL_RCC_OscConfig+0xb0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x98>
 80016ce:	4b70      	ldr	r3, [pc, #448]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b6d      	ldr	r3, [pc, #436]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6c      	ldr	r2, [pc, #432]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0xb0>
 80016e8:	4b69      	ldr	r3, [pc, #420]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a68      	ldr	r2, [pc, #416]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b66      	ldr	r3, [pc, #408]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a65      	ldr	r2, [pc, #404]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001708:	f7ff fb5a 	bl	8000dc0 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fb56 	bl	8000dc0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	@ 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e207      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b5b      	ldr	r3, [pc, #364]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0xc0>
 800172e:	e014      	b.n	800175a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fb46 	bl	8000dc0 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fb42 	bl	8000dc0 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	@ 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1f3      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	4b51      	ldr	r3, [pc, #324]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0xe8>
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d063      	beq.n	800182e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001766:	4b4a      	ldr	r3, [pc, #296]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001772:	4b47      	ldr	r3, [pc, #284]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800177a:	2b08      	cmp	r3, #8
 800177c:	d11c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177e:	4b44      	ldr	r3, [pc, #272]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d116      	bne.n	80017b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x152>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e1c7      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4937      	ldr	r1, [pc, #220]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	e03a      	b.n	800182e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c0:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <HAL_RCC_OscConfig+0x244>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fafb 	bl	8000dc0 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff faf7 	bl	8000dc0 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1a8      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4925      	ldr	r1, [pc, #148]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
 8001800:	e015      	b.n	800182e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001802:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <HAL_RCC_OscConfig+0x244>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fada 	bl	8000dc0 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fad6 	bl	8000dc0 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e187      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d036      	beq.n	80018a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d016      	beq.n	8001870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_RCC_OscConfig+0x248>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff faba 	bl	8000dc0 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fab6 	bl	8000dc0 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e167      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x200>
 800186e:	e01b      	b.n	80018a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_RCC_OscConfig+0x248>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7ff faa3 	bl	8000dc0 <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	e00e      	b.n	800189c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff fa9f 	bl	8000dc0 <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d907      	bls.n	800189c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e150      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
 8001890:	40023800 	.word	0x40023800
 8001894:	42470000 	.word	0x42470000
 8001898:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	4b88      	ldr	r3, [pc, #544]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800189e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ea      	bne.n	800187e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8097 	beq.w	80019e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ba:	4b81      	ldr	r3, [pc, #516]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10f      	bne.n	80018e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b7d      	ldr	r3, [pc, #500]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a7c      	ldr	r2, [pc, #496]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b7a      	ldr	r3, [pc, #488]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	4b77      	ldr	r3, [pc, #476]	@ (8001ac4 <HAL_RCC_OscConfig+0x474>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d118      	bne.n	8001924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f2:	4b74      	ldr	r3, [pc, #464]	@ (8001ac4 <HAL_RCC_OscConfig+0x474>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a73      	ldr	r2, [pc, #460]	@ (8001ac4 <HAL_RCC_OscConfig+0x474>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fa5f 	bl	8000dc0 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7ff fa5b 	bl	8000dc0 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e10c      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001918:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac4 <HAL_RCC_OscConfig+0x474>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x2ea>
 800192c:	4b64      	ldr	r3, [pc, #400]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001930:	4a63      	ldr	r2, [pc, #396]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	@ 0x70
 8001938:	e01c      	b.n	8001974 <HAL_RCC_OscConfig+0x324>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x30c>
 8001942:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001946:	4a5e      	ldr	r2, [pc, #376]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6713      	str	r3, [r2, #112]	@ 0x70
 800194e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001952:	4a5b      	ldr	r2, [pc, #364]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6713      	str	r3, [r2, #112]	@ 0x70
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0x324>
 800195c:	4b58      	ldr	r3, [pc, #352]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001960:	4a57      	ldr	r2, [pc, #348]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6713      	str	r3, [r2, #112]	@ 0x70
 8001968:	4b55      	ldr	r3, [pc, #340]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196c:	4a54      	ldr	r2, [pc, #336]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800196e:	f023 0304 	bic.w	r3, r3, #4
 8001972:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d015      	beq.n	80019a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff fa20 	bl	8000dc0 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001982:	e00a      	b.n	800199a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7ff fa1c 	bl	8000dc0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e0cb      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199a:	4b49      	ldr	r3, [pc, #292]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0ee      	beq.n	8001984 <HAL_RCC_OscConfig+0x334>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a8:	f7ff fa0a 	bl	8000dc0 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f7ff fa06 	bl	8000dc0 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e0b5      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ee      	bne.n	80019b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d8:	4b39      	ldr	r3, [pc, #228]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	4a38      	ldr	r2, [pc, #224]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80019de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80a1 	beq.w	8001b30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ee:	4b34      	ldr	r3, [pc, #208]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d05c      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d141      	bne.n	8001a86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff f9da 	bl	8000dc0 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f9d6 	bl	8000dc0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e087      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	019b      	lsls	r3, r3, #6
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	3b01      	subs	r3, #1
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	491b      	ldr	r1, [pc, #108]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001a54:	4313      	orrs	r3, r2
 8001a56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5e:	f7ff f9af 	bl	8000dc0 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff f9ab 	bl	8000dc0 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e05c      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0x416>
 8001a84:	e054      	b.n	8001b30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f998 	bl	8000dc0 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a94:	f7ff f994 	bl	8000dc0 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e045      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_RCC_OscConfig+0x470>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0x444>
 8001ab2:	e03d      	b.n	8001b30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d107      	bne.n	8001acc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e038      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_RCC_OscConfig+0x4ec>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d028      	beq.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d121      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d11a      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001afc:	4013      	ands	r3, r2
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d111      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b12:	085b      	lsrs	r3, r3, #1
 8001b14:	3b01      	subs	r3, #1
 8001b16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d107      	bne.n	8001b2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e0cc      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b68      	ldr	r3, [pc, #416]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d90c      	bls.n	8001b7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b62:	4b65      	ldr	r3, [pc, #404]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6a:	4b63      	ldr	r3, [pc, #396]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	683a      	ldr	r2, [r7, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d001      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e0b8      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d020      	beq.n	8001bca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b94:	4b59      	ldr	r3, [pc, #356]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4a58      	ldr	r2, [pc, #352]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b9e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0308 	and.w	r3, r3, #8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d005      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bac:	4b53      	ldr	r3, [pc, #332]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001bb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb8:	4b50      	ldr	r3, [pc, #320]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	494d      	ldr	r1, [pc, #308]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d044      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4b47      	ldr	r3, [pc, #284]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d119      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e07f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d003      	beq.n	8001bfe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	d107      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfe:	4b3f      	ldr	r3, [pc, #252]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d109      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e06f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d101      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e067      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c1e:	4b37      	ldr	r3, [pc, #220]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f023 0203 	bic.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4934      	ldr	r1, [pc, #208]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c30:	f7ff f8c6 	bl	8000dc0 <HAL_GetTick>
 8001c34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c38:	f7ff f8c2 	bl	8000dc0 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e04f      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 020c 	and.w	r2, r3, #12
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d1eb      	bne.n	8001c38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b25      	ldr	r3, [pc, #148]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0307 	and.w	r3, r3, #7
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d20c      	bcs.n	8001c88 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b22      	ldr	r3, [pc, #136]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	683a      	ldr	r2, [r7, #0]
 8001c72:	b2d2      	uxtb	r2, r2
 8001c74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c76:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	683a      	ldr	r2, [r7, #0]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e032      	b.n	8001cee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c94:	4b19      	ldr	r3, [pc, #100]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	4916      	ldr	r1, [pc, #88]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d009      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cb2:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	490e      	ldr	r1, [pc, #56]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cc6:	f000 f821 	bl	8001d0c <HAL_RCC_GetSysClockFreq>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	091b      	lsrs	r3, r3, #4
 8001cd2:	f003 030f 	and.w	r3, r3, #15
 8001cd6:	490a      	ldr	r1, [pc, #40]	@ (8001d00 <HAL_RCC_ClockConfig+0x1c0>)
 8001cd8:	5ccb      	ldrb	r3, [r1, r3]
 8001cda:	fa22 f303 	lsr.w	r3, r2, r3
 8001cde:	4a09      	ldr	r2, [pc, #36]	@ (8001d04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ce2:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff f826 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	080026d8 	.word	0x080026d8
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d10:	b094      	sub	sp, #80	@ 0x50
 8001d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d24:	4b79      	ldr	r3, [pc, #484]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d00d      	beq.n	8001d4c <HAL_RCC_GetSysClockFreq+0x40>
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	f200 80e1 	bhi.w	8001ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x34>
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d003      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d3e:	e0db      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d40:	4b73      	ldr	r3, [pc, #460]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d44:	e0db      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d46:	4b73      	ldr	r3, [pc, #460]	@ (8001f14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d4a:	e0d8      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d54:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d56:	4b6d      	ldr	r3, [pc, #436]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d063      	beq.n	8001e2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d62:	4b6a      	ldr	r3, [pc, #424]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	099b      	lsrs	r3, r3, #6
 8001d68:	2200      	movs	r2, #0
 8001d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d74:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d76:	2300      	movs	r3, #0
 8001d78:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d7e:	4622      	mov	r2, r4
 8001d80:	462b      	mov	r3, r5
 8001d82:	f04f 0000 	mov.w	r0, #0
 8001d86:	f04f 0100 	mov.w	r1, #0
 8001d8a:	0159      	lsls	r1, r3, #5
 8001d8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d90:	0150      	lsls	r0, r2, #5
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4621      	mov	r1, r4
 8001d98:	1a51      	subs	r1, r2, r1
 8001d9a:	6139      	str	r1, [r7, #16]
 8001d9c:	4629      	mov	r1, r5
 8001d9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001db0:	4659      	mov	r1, fp
 8001db2:	018b      	lsls	r3, r1, #6
 8001db4:	4651      	mov	r1, sl
 8001db6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dba:	4651      	mov	r1, sl
 8001dbc:	018a      	lsls	r2, r1, #6
 8001dbe:	4651      	mov	r1, sl
 8001dc0:	ebb2 0801 	subs.w	r8, r2, r1
 8001dc4:	4659      	mov	r1, fp
 8001dc6:	eb63 0901 	sbc.w	r9, r3, r1
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dde:	4690      	mov	r8, r2
 8001de0:	4699      	mov	r9, r3
 8001de2:	4623      	mov	r3, r4
 8001de4:	eb18 0303 	adds.w	r3, r8, r3
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	462b      	mov	r3, r5
 8001dec:	eb49 0303 	adc.w	r3, r9, r3
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dfe:	4629      	mov	r1, r5
 8001e00:	024b      	lsls	r3, r1, #9
 8001e02:	4621      	mov	r1, r4
 8001e04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e08:	4621      	mov	r1, r4
 8001e0a:	024a      	lsls	r2, r1, #9
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e12:	2200      	movs	r2, #0
 8001e14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e1c:	f7fe f9dc 	bl	80001d8 <__aeabi_uldivmod>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4613      	mov	r3, r2
 8001e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e28:	e058      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e2a:	4b38      	ldr	r3, [pc, #224]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	099b      	lsrs	r3, r3, #6
 8001e30:	2200      	movs	r2, #0
 8001e32:	4618      	mov	r0, r3
 8001e34:	4611      	mov	r1, r2
 8001e36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e3a:	623b      	str	r3, [r7, #32]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e44:	4642      	mov	r2, r8
 8001e46:	464b      	mov	r3, r9
 8001e48:	f04f 0000 	mov.w	r0, #0
 8001e4c:	f04f 0100 	mov.w	r1, #0
 8001e50:	0159      	lsls	r1, r3, #5
 8001e52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e56:	0150      	lsls	r0, r2, #5
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e62:	4649      	mov	r1, r9
 8001e64:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e7c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e80:	eb63 050b 	sbc.w	r5, r3, fp
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	00eb      	lsls	r3, r5, #3
 8001e8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e92:	00e2      	lsls	r2, r4, #3
 8001e94:	4614      	mov	r4, r2
 8001e96:	461d      	mov	r5, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	18e3      	adds	r3, r4, r3
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	464b      	mov	r3, r9
 8001ea0:	eb45 0303 	adc.w	r3, r5, r3
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eb2:	4629      	mov	r1, r5
 8001eb4:	028b      	lsls	r3, r1, #10
 8001eb6:	4621      	mov	r1, r4
 8001eb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ebc:	4621      	mov	r1, r4
 8001ebe:	028a      	lsls	r2, r1, #10
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	61fa      	str	r2, [r7, #28]
 8001ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ed0:	f7fe f982 	bl	80001d8 <__aeabi_uldivmod>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4613      	mov	r3, r2
 8001eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	0c1b      	lsrs	r3, r3, #16
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001eec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001eee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ef6:	e002      	b.n	8001efe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ef8:	4b05      	ldr	r3, [pc, #20]	@ (8001f10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001efa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001efc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3750      	adds	r7, #80	@ 0x50
 8001f04:	46bd      	mov	sp, r7
 8001f06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	00f42400 	.word	0x00f42400
 8001f14:	007a1200 	.word	0x007a1200

08001f18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	@ (8001f2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	20000000 	.word	0x20000000

08001f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f34:	f7ff fff0 	bl	8001f18 <HAL_RCC_GetHCLKFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b05      	ldr	r3, [pc, #20]	@ (8001f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	0a9b      	lsrs	r3, r3, #10
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	4903      	ldr	r1, [pc, #12]	@ (8001f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800
 8001f54:	080026e8 	.word	0x080026e8

08001f58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e041      	b.n	8001fee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fe56 	bl	8000c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3304      	adds	r3, #4
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f000 f936 	bl	8002208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002000:	2300      	movs	r3, #0
 8002002:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_TIM_ConfigClockSource+0x1c>
 800200e:	2302      	movs	r3, #2
 8002010:	e0b4      	b.n	800217c <HAL_TIM_ConfigClockSource+0x186>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2202      	movs	r2, #2
 800201e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002030:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002038:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800204a:	d03e      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0xd4>
 800204c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002050:	f200 8087 	bhi.w	8002162 <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002058:	f000 8086 	beq.w	8002168 <HAL_TIM_ConfigClockSource+0x172>
 800205c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002060:	d87f      	bhi.n	8002162 <HAL_TIM_ConfigClockSource+0x16c>
 8002062:	2b70      	cmp	r3, #112	@ 0x70
 8002064:	d01a      	beq.n	800209c <HAL_TIM_ConfigClockSource+0xa6>
 8002066:	2b70      	cmp	r3, #112	@ 0x70
 8002068:	d87b      	bhi.n	8002162 <HAL_TIM_ConfigClockSource+0x16c>
 800206a:	2b60      	cmp	r3, #96	@ 0x60
 800206c:	d050      	beq.n	8002110 <HAL_TIM_ConfigClockSource+0x11a>
 800206e:	2b60      	cmp	r3, #96	@ 0x60
 8002070:	d877      	bhi.n	8002162 <HAL_TIM_ConfigClockSource+0x16c>
 8002072:	2b50      	cmp	r3, #80	@ 0x50
 8002074:	d03c      	beq.n	80020f0 <HAL_TIM_ConfigClockSource+0xfa>
 8002076:	2b50      	cmp	r3, #80	@ 0x50
 8002078:	d873      	bhi.n	8002162 <HAL_TIM_ConfigClockSource+0x16c>
 800207a:	2b40      	cmp	r3, #64	@ 0x40
 800207c:	d058      	beq.n	8002130 <HAL_TIM_ConfigClockSource+0x13a>
 800207e:	2b40      	cmp	r3, #64	@ 0x40
 8002080:	d86f      	bhi.n	8002162 <HAL_TIM_ConfigClockSource+0x16c>
 8002082:	2b30      	cmp	r3, #48	@ 0x30
 8002084:	d064      	beq.n	8002150 <HAL_TIM_ConfigClockSource+0x15a>
 8002086:	2b30      	cmp	r3, #48	@ 0x30
 8002088:	d86b      	bhi.n	8002162 <HAL_TIM_ConfigClockSource+0x16c>
 800208a:	2b20      	cmp	r3, #32
 800208c:	d060      	beq.n	8002150 <HAL_TIM_ConfigClockSource+0x15a>
 800208e:	2b20      	cmp	r3, #32
 8002090:	d867      	bhi.n	8002162 <HAL_TIM_ConfigClockSource+0x16c>
 8002092:	2b00      	cmp	r3, #0
 8002094:	d05c      	beq.n	8002150 <HAL_TIM_ConfigClockSource+0x15a>
 8002096:	2b10      	cmp	r3, #16
 8002098:	d05a      	beq.n	8002150 <HAL_TIM_ConfigClockSource+0x15a>
 800209a:	e062      	b.n	8002162 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020ac:	f000 fa3d 	bl	800252a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	609a      	str	r2, [r3, #8]
      break;
 80020c8:	e04f      	b.n	800216a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020da:	f000 fa26 	bl	800252a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020ec:	609a      	str	r2, [r3, #8]
      break;
 80020ee:	e03c      	b.n	800216a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fc:	461a      	mov	r2, r3
 80020fe:	f000 f99a 	bl	8002436 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2150      	movs	r1, #80	@ 0x50
 8002108:	4618      	mov	r0, r3
 800210a:	f000 f9f3 	bl	80024f4 <TIM_ITRx_SetConfig>
      break;
 800210e:	e02c      	b.n	800216a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800211c:	461a      	mov	r2, r3
 800211e:	f000 f9b9 	bl	8002494 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2160      	movs	r1, #96	@ 0x60
 8002128:	4618      	mov	r0, r3
 800212a:	f000 f9e3 	bl	80024f4 <TIM_ITRx_SetConfig>
      break;
 800212e:	e01c      	b.n	800216a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800213c:	461a      	mov	r2, r3
 800213e:	f000 f97a 	bl	8002436 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2140      	movs	r1, #64	@ 0x40
 8002148:	4618      	mov	r0, r3
 800214a:	f000 f9d3 	bl	80024f4 <TIM_ITRx_SetConfig>
      break;
 800214e:	e00c      	b.n	800216a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f000 f9ca 	bl	80024f4 <TIM_ITRx_SetConfig>
      break;
 8002160:	e003      	b.n	800216a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
      break;
 8002166:	e000      	b.n	800216a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002168:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_TIM_SlaveConfigSynchro+0x18>
 8002198:	2302      	movs	r3, #2
 800219a:	e031      	b.n	8002200 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80021ac:	6839      	ldr	r1, [r7, #0]
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8b0 	bl	8002314 <TIM_SlaveTimer_SetConfig>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d009      	beq.n	80021ce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2201      	movs	r2, #1
 80021be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e018      	b.n	8002200 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021dc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80021ec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a37      	ldr	r2, [pc, #220]	@ (80022f8 <TIM_Base_SetConfig+0xf0>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d00f      	beq.n	8002240 <TIM_Base_SetConfig+0x38>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002226:	d00b      	beq.n	8002240 <TIM_Base_SetConfig+0x38>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a34      	ldr	r2, [pc, #208]	@ (80022fc <TIM_Base_SetConfig+0xf4>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d007      	beq.n	8002240 <TIM_Base_SetConfig+0x38>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a33      	ldr	r2, [pc, #204]	@ (8002300 <TIM_Base_SetConfig+0xf8>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0x38>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a32      	ldr	r2, [pc, #200]	@ (8002304 <TIM_Base_SetConfig+0xfc>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d108      	bne.n	8002252 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	4313      	orrs	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a28      	ldr	r2, [pc, #160]	@ (80022f8 <TIM_Base_SetConfig+0xf0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01b      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002260:	d017      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a25      	ldr	r2, [pc, #148]	@ (80022fc <TIM_Base_SetConfig+0xf4>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a24      	ldr	r2, [pc, #144]	@ (8002300 <TIM_Base_SetConfig+0xf8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00f      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a23      	ldr	r2, [pc, #140]	@ (8002304 <TIM_Base_SetConfig+0xfc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d00b      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a22      	ldr	r2, [pc, #136]	@ (8002308 <TIM_Base_SetConfig+0x100>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d007      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a21      	ldr	r2, [pc, #132]	@ (800230c <TIM_Base_SetConfig+0x104>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d003      	beq.n	8002292 <TIM_Base_SetConfig+0x8a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a20      	ldr	r2, [pc, #128]	@ (8002310 <TIM_Base_SetConfig+0x108>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d108      	bne.n	80022a4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a0c      	ldr	r2, [pc, #48]	@ (80022f8 <TIM_Base_SetConfig+0xf0>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d103      	bne.n	80022d2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691a      	ldr	r2, [r3, #16]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f043 0204 	orr.w	r2, r3, #4
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40010000 	.word	0x40010000
 80022fc:	40000400 	.word	0x40000400
 8002300:	40000800 	.word	0x40000800
 8002304:	40000c00 	.word	0x40000c00
 8002308:	40014000 	.word	0x40014000
 800230c:	40014400 	.word	0x40014400
 8002310:	40014800 	.word	0x40014800

08002314 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002330:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f023 0307 	bic.w	r3, r3, #7
 8002342:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b70      	cmp	r3, #112	@ 0x70
 800235c:	d01a      	beq.n	8002394 <TIM_SlaveTimer_SetConfig+0x80>
 800235e:	2b70      	cmp	r3, #112	@ 0x70
 8002360:	d860      	bhi.n	8002424 <TIM_SlaveTimer_SetConfig+0x110>
 8002362:	2b60      	cmp	r3, #96	@ 0x60
 8002364:	d054      	beq.n	8002410 <TIM_SlaveTimer_SetConfig+0xfc>
 8002366:	2b60      	cmp	r3, #96	@ 0x60
 8002368:	d85c      	bhi.n	8002424 <TIM_SlaveTimer_SetConfig+0x110>
 800236a:	2b50      	cmp	r3, #80	@ 0x50
 800236c:	d046      	beq.n	80023fc <TIM_SlaveTimer_SetConfig+0xe8>
 800236e:	2b50      	cmp	r3, #80	@ 0x50
 8002370:	d858      	bhi.n	8002424 <TIM_SlaveTimer_SetConfig+0x110>
 8002372:	2b40      	cmp	r3, #64	@ 0x40
 8002374:	d019      	beq.n	80023aa <TIM_SlaveTimer_SetConfig+0x96>
 8002376:	2b40      	cmp	r3, #64	@ 0x40
 8002378:	d854      	bhi.n	8002424 <TIM_SlaveTimer_SetConfig+0x110>
 800237a:	2b30      	cmp	r3, #48	@ 0x30
 800237c:	d055      	beq.n	800242a <TIM_SlaveTimer_SetConfig+0x116>
 800237e:	2b30      	cmp	r3, #48	@ 0x30
 8002380:	d850      	bhi.n	8002424 <TIM_SlaveTimer_SetConfig+0x110>
 8002382:	2b20      	cmp	r3, #32
 8002384:	d051      	beq.n	800242a <TIM_SlaveTimer_SetConfig+0x116>
 8002386:	2b20      	cmp	r3, #32
 8002388:	d84c      	bhi.n	8002424 <TIM_SlaveTimer_SetConfig+0x110>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d04d      	beq.n	800242a <TIM_SlaveTimer_SetConfig+0x116>
 800238e:	2b10      	cmp	r3, #16
 8002390:	d04b      	beq.n	800242a <TIM_SlaveTimer_SetConfig+0x116>
 8002392:	e047      	b.n	8002424 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80023a4:	f000 f8c1 	bl	800252a <TIM_ETR_SetConfig>
      break;
 80023a8:	e040      	b.n	800242c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2b05      	cmp	r3, #5
 80023b0:	d101      	bne.n	80023b6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e03b      	b.n	800242e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0201 	bic.w	r2, r2, #1
 80023cc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023dc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	68ba      	ldr	r2, [r7, #8]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	621a      	str	r2, [r3, #32]
      break;
 80023fa:	e017      	b.n	800242c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002408:	461a      	mov	r2, r3
 800240a:	f000 f814 	bl	8002436 <TIM_TI1_ConfigInputStage>
      break;
 800240e:	e00d      	b.n	800242c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800241c:	461a      	mov	r2, r3
 800241e:	f000 f839 	bl	8002494 <TIM_TI2_ConfigInputStage>
      break;
 8002422:	e003      	b.n	800242c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	75fb      	strb	r3, [r7, #23]
      break;
 8002428:	e000      	b.n	800242c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800242a:	bf00      	nop
  }

  return status;
 800242c:	7dfb      	ldrb	r3, [r7, #23]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002436:	b480      	push	{r7}
 8002438:	b087      	sub	sp, #28
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f023 0201 	bic.w	r2, r3, #1
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002460:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f023 030a 	bic.w	r3, r3, #10
 8002472:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	621a      	str	r2, [r3, #32]
}
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	f023 0210 	bic.w	r2, r3, #16
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80024be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	031b      	lsls	r3, r3, #12
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80024d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4313      	orrs	r3, r2
 80024da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	621a      	str	r2, [r3, #32]
}
 80024e8:	bf00      	nop
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800250a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	f043 0307 	orr.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	609a      	str	r2, [r3, #8]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800252a:	b480      	push	{r7}
 800252c:	b087      	sub	sp, #28
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002544:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	021a      	lsls	r2, r3, #8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	431a      	orrs	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	609a      	str	r2, [r3, #8]
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002580:	2302      	movs	r3, #2
 8002582:	e050      	b.n	8002626 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d018      	beq.n	80025fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d0:	d013      	beq.n	80025fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a18      	ldr	r2, [pc, #96]	@ (8002638 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00e      	beq.n	80025fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a16      	ldr	r2, [pc, #88]	@ (800263c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d009      	beq.n	80025fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a15      	ldr	r2, [pc, #84]	@ (8002640 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d004      	beq.n	80025fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a13      	ldr	r2, [pc, #76]	@ (8002644 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10c      	bne.n	8002614 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	4313      	orrs	r3, r2
 800260a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68ba      	ldr	r2, [r7, #8]
 8002612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40010000 	.word	0x40010000
 8002638:	40000400 	.word	0x40000400
 800263c:	40000800 	.word	0x40000800
 8002640:	40000c00 	.word	0x40000c00
 8002644:	40014000 	.word	0x40014000

08002648 <memset>:
 8002648:	4402      	add	r2, r0
 800264a:	4603      	mov	r3, r0
 800264c:	4293      	cmp	r3, r2
 800264e:	d100      	bne.n	8002652 <memset+0xa>
 8002650:	4770      	bx	lr
 8002652:	f803 1b01 	strb.w	r1, [r3], #1
 8002656:	e7f9      	b.n	800264c <memset+0x4>

08002658 <__libc_init_array>:
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	4d0d      	ldr	r5, [pc, #52]	@ (8002690 <__libc_init_array+0x38>)
 800265c:	4c0d      	ldr	r4, [pc, #52]	@ (8002694 <__libc_init_array+0x3c>)
 800265e:	1b64      	subs	r4, r4, r5
 8002660:	10a4      	asrs	r4, r4, #2
 8002662:	2600      	movs	r6, #0
 8002664:	42a6      	cmp	r6, r4
 8002666:	d109      	bne.n	800267c <__libc_init_array+0x24>
 8002668:	4d0b      	ldr	r5, [pc, #44]	@ (8002698 <__libc_init_array+0x40>)
 800266a:	4c0c      	ldr	r4, [pc, #48]	@ (800269c <__libc_init_array+0x44>)
 800266c:	f000 f818 	bl	80026a0 <_init>
 8002670:	1b64      	subs	r4, r4, r5
 8002672:	10a4      	asrs	r4, r4, #2
 8002674:	2600      	movs	r6, #0
 8002676:	42a6      	cmp	r6, r4
 8002678:	d105      	bne.n	8002686 <__libc_init_array+0x2e>
 800267a:	bd70      	pop	{r4, r5, r6, pc}
 800267c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002680:	4798      	blx	r3
 8002682:	3601      	adds	r6, #1
 8002684:	e7ee      	b.n	8002664 <__libc_init_array+0xc>
 8002686:	f855 3b04 	ldr.w	r3, [r5], #4
 800268a:	4798      	blx	r3
 800268c:	3601      	adds	r6, #1
 800268e:	e7f2      	b.n	8002676 <__libc_init_array+0x1e>
 8002690:	080026f8 	.word	0x080026f8
 8002694:	080026f8 	.word	0x080026f8
 8002698:	080026f8 	.word	0x080026f8
 800269c:	080026fc 	.word	0x080026fc

080026a0 <_init>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr

080026ac <_fini>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	bf00      	nop
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr
