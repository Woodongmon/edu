
10_ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004cf4  08004cf4  00005cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d54  08004d54  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004d54  08004d54  00005d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d5c  08004d5c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d5c  08004d5c  00005d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d60  08004d60  00005d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004d64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  08004dcc  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  08004dcc  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e959  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002488  00000000  00000000  000149f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00016e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a61  00000000  00000000  00017be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003afd  00000000  00000000  00018649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa53  00000000  00000000  0001c146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b9e0  00000000  00000000  0002bb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7579  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e70  00000000  00000000  000c75bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000cb42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004cdc 	.word	0x08004cdc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004cdc 	.word	0x08004cdc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <delay_us>:
#include "delay_us.h"



void delay_us(uint16_t us)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim11,0);
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <delay_us+0x30>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	@ 0x24
  while((__HAL_TIM_GET_COUNTER(&htim11))<us);
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <delay_us+0x30>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3f9      	bcc.n	80005c0 <delay_us+0x14>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200000d8 	.word	0x200000d8

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	4b18      	ldr	r3, [pc, #96]	@ (800065c <MX_GPIO_Init+0x7c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	4a17      	ldr	r2, [pc, #92]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000604:	6313      	str	r3, [r2, #48]	@ 0x30
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	4b11      	ldr	r3, [pc, #68]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a10      	ldr	r2, [pc, #64]	@ (800065c <MX_GPIO_Init+0x7c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <MX_GPIO_Init+0x7c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	480b      	ldr	r0, [pc, #44]	@ (8000660 <MX_GPIO_Init+0x80>)
 8000634:	f000 ffe2 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000638:	2320      	movs	r3, #32
 800063a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063c:	2301      	movs	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000644:	2302      	movs	r3, #2
 8000646:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4619      	mov	r1, r3
 800064e:	4804      	ldr	r0, [pc, #16]	@ (8000660 <MX_GPIO_Init+0x80>)
 8000650:	f000 fe50 	bl	80012f4 <HAL_GPIO_Init>

}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40023800 	.word	0x40023800
 8000660:	40020000 	.word	0x40020000

08000664 <_write>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

int _write(int file, unsigned char* p, int len)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, p, len, 100);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	b29a      	uxth	r2, r3
 8000674:	2364      	movs	r3, #100	@ 0x64
 8000676:	68b9      	ldr	r1, [r7, #8]
 8000678:	4807      	ldr	r0, [pc, #28]	@ (8000698 <_write+0x34>)
 800067a:	f002 fc39 	bl	8002ef0 <HAL_UART_Transmit>
 800067e:	4603      	mov	r3, r0
 8000680:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK ? len : 0);
 8000682:	7dfb      	ldrb	r3, [r7, #23]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d101      	bne.n	800068c <_write+0x28>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	e000      	b.n	800068e <_write+0x2a>
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000120 	.word	0x20000120

0800069c <HCSR04_TRIGGER>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void HCSR04_TRIGGER()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  //주파수 파형 생성
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2120      	movs	r1, #32
 80006a4:	480e      	ldr	r0, [pc, #56]	@ (80006e0 <HCSR04_TRIGGER+0x44>)
 80006a6:	f000 ffa9 	bl	80015fc <HAL_GPIO_WritePin>
  delay_us(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f7ff ff7e 	bl	80005ac <delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2120      	movs	r1, #32
 80006b4:	480a      	ldr	r0, [pc, #40]	@ (80006e0 <HCSR04_TRIGGER+0x44>)
 80006b6:	f000 ffa1 	bl	80015fc <HAL_GPIO_WritePin>
  delay_us(10);
 80006ba:	200a      	movs	r0, #10
 80006bc:	f7ff ff76 	bl	80005ac <delay_us>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2120      	movs	r1, #32
 80006c4:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <HCSR04_TRIGGER+0x44>)
 80006c6:	f000 ff99 	bl	80015fc <HAL_GPIO_WritePin>

  __HAL_TIM_ENABLE_IT(&htim3,TIM_IT_CC1);
 80006ca:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <HCSR04_TRIGGER+0x48>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	68da      	ldr	r2, [r3, #12]
 80006d0:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <HCSR04_TRIGGER+0x48>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f042 0202 	orr.w	r2, r2, #2
 80006d8:	60da      	str	r2, [r3, #12]
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40020000 	.word	0x40020000
 80006e4:	20000090 	.word	0x20000090

080006e8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	7f1b      	ldrb	r3, [r3, #28]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d16d      	bne.n	80007d4 <HAL_TIM_IC_CaptureCallback+0xec>
  {
    if(captureFlag == 0)
 80006f8:	4b38      	ldr	r3, [pc, #224]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0xf4>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d11b      	bne.n	8000738 <HAL_TIM_IC_CaptureCallback+0x50>
    {
      IC_Value1 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	4837      	ldr	r0, [pc, #220]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000704:	f002 f852 	bl	80027ac <HAL_TIM_ReadCapturedValue>
 8000708:	4603      	mov	r3, r0
 800070a:	b29a      	uxth	r2, r3
 800070c:	4b35      	ldr	r3, [pc, #212]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800070e:	801a      	strh	r2, [r3, #0]
      captureFlag = 1;      //capture flag set (capture ok)
 8000710:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000716:	4b32      	ldr	r3, [pc, #200]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	6a1a      	ldr	r2, [r3, #32]
 800071c:	4b30      	ldr	r3, [pc, #192]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f022 020a 	bic.w	r2, r2, #10
 8000724:	621a      	str	r2, [r3, #32]
 8000726:	4b2e      	ldr	r3, [pc, #184]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	6a1a      	ldr	r2, [r3, #32]
 800072c:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f042 0202 	orr.w	r2, r2, #2
 8000734:	621a      	str	r2, [r3, #32]
      distance = echoTime / 58;
      captureFlag = 0;
      __HAL_TIM_DISABLE_IT(&htim3,TIM_IT_CC1);
    }
  }
}
 8000736:	e04d      	b.n	80007d4 <HAL_TIM_IC_CaptureCallback+0xec>
    else if(captureFlag == 1)
 8000738:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0xf4>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d149      	bne.n	80007d4 <HAL_TIM_IC_CaptureCallback+0xec>
      IC_Value2 = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000740:	2100      	movs	r1, #0
 8000742:	4827      	ldr	r0, [pc, #156]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000744:	f002 f832 	bl	80027ac <HAL_TIM_ReadCapturedValue>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b26      	ldr	r3, [pc, #152]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800074e:	801a      	strh	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(&htim3,TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	6a1a      	ldr	r2, [r3, #32]
 8000756:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f022 020a 	bic.w	r2, r2, #10
 800075e:	621a      	str	r2, [r3, #32]
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6a12      	ldr	r2, [r2, #32]
 800076a:	621a      	str	r2, [r3, #32]
      if(IC_Value2 > IC_Value1)
 800076c:	4b1e      	ldr	r3, [pc, #120]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800076e:	881a      	ldrh	r2, [r3, #0]
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	d908      	bls.n	800078a <HAL_TIM_IC_CaptureCallback+0xa2>
        echoTime = IC_Value2 - IC_Value1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800077a:	881a      	ldrh	r2, [r3, #0]
 800077c:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800077e:	881b      	ldrh	r3, [r3, #0]
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	b29a      	uxth	r2, r3
 8000784:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <HAL_TIM_IC_CaptureCallback+0x104>)
 8000786:	801a      	strh	r2, [r3, #0]
 8000788:	e00f      	b.n	80007aa <HAL_TIM_IC_CaptureCallback+0xc2>
      else if(IC_Value2 <= IC_Value1)
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 800078c:	881a      	ldrh	r2, [r3, #0]
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	d809      	bhi.n	80007aa <HAL_TIM_IC_CaptureCallback+0xc2>
        echoTime = (0xffff - IC_Value1) + IC_Value2;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000798:	881a      	ldrh	r2, [r3, #0]
 800079a:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800079c:	881b      	ldrh	r3, [r3, #0]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	b29b      	uxth	r3, r3
 80007a2:	3b01      	subs	r3, #1
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <HAL_TIM_IC_CaptureCallback+0x104>)
 80007a8:	801a      	strh	r2, [r3, #0]
      distance = echoTime / 58;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <HAL_TIM_IC_CaptureCallback+0x104>)
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	4a10      	ldr	r2, [pc, #64]	@ (80007f0 <HAL_TIM_IC_CaptureCallback+0x108>)
 80007b0:	fba2 2303 	umull	r2, r3, r2, r3
 80007b4:	095b      	lsrs	r3, r3, #5
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_TIM_IC_CaptureCallback+0x10c>)
 80007bc:	701a      	strb	r2, [r3, #0]
      captureFlag = 0;
 80007be:	4b07      	ldr	r3, [pc, #28]	@ (80007dc <HAL_TIM_IC_CaptureCallback+0xf4>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_DISABLE_IT(&htim3,TIM_IT_CC1);
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	68da      	ldr	r2, [r3, #12]
 80007ca:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f022 0202 	bic.w	r2, r2, #2
 80007d2:	60da      	str	r2, [r3, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	2000008a 	.word	0x2000008a
 80007e0:	20000090 	.word	0x20000090
 80007e4:	20000084 	.word	0x20000084
 80007e8:	20000086 	.word	0x20000086
 80007ec:	20000088 	.word	0x20000088
 80007f0:	8d3dcb09 	.word	0x8d3dcb09
 80007f4:	2000008b 	.word	0x2000008b

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f000 fb40 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f82c 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f7ff feec 	bl	80005e0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000808:	f000 f99c 	bl	8000b44 <MX_TIM3_Init>
  MX_TIM11_Init();
 800080c:	f000 fa0a 	bl	8000c24 <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000810:	f000 fa92 	bl	8000d38 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim11);        //for delay_us() function
 8000814:	480c      	ldr	r0, [pc, #48]	@ (8000848 <main+0x50>)
 8000816:	f001 fbf3 	bl	8002000 <HAL_TIM_Base_Start>

  HAL_TIM_IC_Start(&htim3, TIM_CHANNEL_1);
 800081a:	2100      	movs	r1, #0
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <main+0x54>)
 800081e:	f001 fca3 	bl	8002168 <HAL_TIM_IC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HCSR04_TRIGGER();
 8000822:	f7ff ff3b 	bl	800069c <HCSR04_TRIGGER>

    while(captureFlag != 0) ;
 8000826:	bf00      	nop
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <main+0x58>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1fb      	bne.n	8000828 <main+0x30>

    printf("distance : %d cm\n",distance);
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <main+0x5c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	4808      	ldr	r0, [pc, #32]	@ (8000858 <main+0x60>)
 8000838:	f003 fbe4 	bl	8004004 <iprintf>

    HAL_Delay(500);
 800083c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000840:	f000 fb90 	bl	8000f64 <HAL_Delay>
    HCSR04_TRIGGER();
 8000844:	e7ed      	b.n	8000822 <main+0x2a>
 8000846:	bf00      	nop
 8000848:	200000d8 	.word	0x200000d8
 800084c:	20000090 	.word	0x20000090
 8000850:	2000008a 	.word	0x2000008a
 8000854:	2000008b 	.word	0x2000008b
 8000858:	08004cf4 	.word	0x08004cf4

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b094      	sub	sp, #80	@ 0x50
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	2230      	movs	r2, #48	@ 0x30
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f003 fc1f 	bl	80040ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <SystemClock_Config+0xc8>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000888:	4a26      	ldr	r2, [pc, #152]	@ (8000924 <SystemClock_Config+0xc8>)
 800088a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000890:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <SystemClock_Config+0xc8>)
 8000892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800089c:	2300      	movs	r3, #0
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <SystemClock_Config+0xcc>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a20      	ldr	r2, [pc, #128]	@ (8000928 <SystemClock_Config+0xcc>)
 80008a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <SystemClock_Config+0xcc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80008d0:	2364      	movs	r3, #100	@ 0x64
 80008d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008d8:	2304      	movs	r3, #4
 80008da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fea5 	bl	8001630 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ec:	f000 f81e 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2103      	movs	r1, #3
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f907 	bl	8001b20 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000918:	f000 f808 	bl	800092c <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	@ (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000976:	2007      	movs	r0, #7
 8000978:	f000 fbe8 	bl	800114c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 faa1 	bl	8000f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <TIM3_IRQHandler+0x10>)
 80009ee:	f001 fc89 	bl	8002304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000090 	.word	0x20000090

080009fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a00:	4802      	ldr	r0, [pc, #8]	@ (8000a0c <USART2_IRQHandler+0x10>)
 8000a02:	f002 fb01 	bl	8003008 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000120 	.word	0x20000120

08000a10 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
 8000a20:	e00a      	b.n	8000a38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a22:	f3af 8000 	nop.w
 8000a26:	4601      	mov	r1, r0
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	b2ca      	uxtb	r2, r1
 8000a30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	3301      	adds	r3, #1
 8000a36:	617b      	str	r3, [r7, #20]
 8000a38:	697a      	ldr	r2, [r7, #20]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	dbf0      	blt.n	8000a22 <_read+0x12>
  }

  return len;
 8000a40:	687b      	ldr	r3, [r7, #4]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <_close>:
  }
  return len;
}

int _close(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a72:	605a      	str	r2, [r3, #4]
  return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <_isatty>:

int _isatty(int file)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a8a:	2301      	movs	r3, #1
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr

08000a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3714      	adds	r7, #20
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000abc:	4a14      	ldr	r2, [pc, #80]	@ (8000b10 <_sbrk+0x5c>)
 8000abe:	4b15      	ldr	r3, [pc, #84]	@ (8000b14 <_sbrk+0x60>)
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <_sbrk+0x64>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d102      	bne.n	8000ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad0:	4b11      	ldr	r3, [pc, #68]	@ (8000b18 <_sbrk+0x64>)
 8000ad2:	4a12      	ldr	r2, [pc, #72]	@ (8000b1c <_sbrk+0x68>)
 8000ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad6:	4b10      	ldr	r3, [pc, #64]	@ (8000b18 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d207      	bcs.n	8000af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae4:	f003 fb32 	bl	800414c <__errno>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	220c      	movs	r2, #12
 8000aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000af2:	e009      	b.n	8000b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af4:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afa:	4b07      	ldr	r3, [pc, #28]	@ (8000b18 <_sbrk+0x64>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4413      	add	r3, r2
 8000b02:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <_sbrk+0x64>)
 8000b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b06:	68fb      	ldr	r3, [r7, #12]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20020000 	.word	0x20020000
 8000b14:	00000400 	.word	0x00000400
 8000b18:	2000008c 	.word	0x2000008c
 8000b1c:	200002b8 	.word	0x200002b8

08000b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim11;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4a:	f107 0318 	add.w	r3, r7, #24
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000b62:	463b      	mov	r3, r7
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000b70:	4a2b      	ldr	r2, [pc, #172]	@ (8000c20 <MX_TIM3_Init+0xdc>)
 8000b72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8000b74:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000b76:	2263      	movs	r2, #99	@ 0x63
 8000b78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7a:	4b28      	ldr	r3, [pc, #160]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b80:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000b82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b86:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b88:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8e:	4b23      	ldr	r3, [pc, #140]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b94:	4821      	ldr	r0, [pc, #132]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000b96:	f001 f9e3 	bl	8001f60 <HAL_TIM_Base_Init>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000ba0:	f7ff fec4 	bl	800092c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000baa:	f107 0318 	add.w	r3, r7, #24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000bb2:	f001 fd33 	bl	800261c <HAL_TIM_ConfigClockSource>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f7ff feb6 	bl	800092c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000bc0:	4816      	ldr	r0, [pc, #88]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000bc2:	f001 fa77 	bl	80020b4 <HAL_TIM_IC_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f7ff feae 	bl	800092c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	4619      	mov	r1, r3
 8000bde:	480f      	ldr	r0, [pc, #60]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000be0:	f002 f8b4 	bl	8002d4c <HAL_TIMEx_MasterConfigSynchronization>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000bea:	f7ff fe9f 	bl	800092c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	4619      	mov	r1, r3
 8000c04:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_TIM3_Init+0xd8>)
 8000c06:	f001 fc6d 	bl	80024e4 <HAL_TIM_IC_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000c10:	f7ff fe8c 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	3728      	adds	r7, #40	@ 0x28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000090 	.word	0x20000090
 8000c20:	40000400 	.word	0x40000400

08000c24 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <MX_TIM11_Init+0x40>)
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c68 <MX_TIM11_Init+0x44>)
 8000c2c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <MX_TIM11_Init+0x40>)
 8000c30:	2263      	movs	r2, #99	@ 0x63
 8000c32:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <MX_TIM11_Init+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <MX_TIM11_Init+0x40>)
 8000c3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c40:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <MX_TIM11_Init+0x40>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <MX_TIM11_Init+0x40>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c4e:	4805      	ldr	r0, [pc, #20]	@ (8000c64 <MX_TIM11_Init+0x40>)
 8000c50:	f001 f986 	bl	8001f60 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000c5a:	f7ff fe67 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200000d8 	.word	0x200000d8
 8000c68:	40014800 	.word	0x40014800

08000c6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	@ 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a27      	ldr	r2, [pc, #156]	@ (8000d28 <HAL_TIM_Base_MspInit+0xbc>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d134      	bne.n	8000cf8 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <HAL_TIM_Base_MspInit+0xc0>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	4a25      	ldr	r2, [pc, #148]	@ (8000d2c <HAL_TIM_Base_MspInit+0xc0>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c9e:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <HAL_TIM_Base_MspInit+0xc0>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <HAL_TIM_Base_MspInit+0xc0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <HAL_TIM_Base_MspInit+0xc0>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <HAL_TIM_Base_MspInit+0xc0>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cc6:	2340      	movs	r3, #64	@ 0x40
 8000cc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0314 	add.w	r3, r7, #20
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4813      	ldr	r0, [pc, #76]	@ (8000d30 <HAL_TIM_Base_MspInit+0xc4>)
 8000ce2:	f000 fb07 	bl	80012f4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	201d      	movs	r0, #29
 8000cec:	f000 fa39 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cf0:	201d      	movs	r0, #29
 8000cf2:	f000 fa52 	bl	800119a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000cf6:	e012      	b.n	8000d1e <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM11)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d34 <HAL_TIM_Base_MspInit+0xc8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d10d      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_TIM_Base_MspInit+0xc0>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <HAL_TIM_Base_MspInit+0xc0>)
 8000d0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_TIM_Base_MspInit+0xc0>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	@ 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40000400 	.word	0x40000400
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	40014800 	.word	0x40014800

08000d38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <MX_USART2_UART_Init+0x50>)
 8000d40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d42:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d50:	4b0c      	ldr	r3, [pc, #48]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d56:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d5c:	4b09      	ldr	r3, [pc, #36]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	220c      	movs	r2, #12
 8000d60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d6e:	4805      	ldr	r0, [pc, #20]	@ (8000d84 <MX_USART2_UART_Init+0x4c>)
 8000d70:	f002 f86e 	bl	8002e50 <HAL_UART_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d7a:	f7ff fdd7 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000120 	.word	0x20000120
 8000d88:	40004400 	.word	0x40004400

08000d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a1d      	ldr	r2, [pc, #116]	@ (8000e20 <HAL_UART_MspInit+0x94>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d133      	bne.n	8000e16 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e24 <HAL_UART_MspInit+0x98>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <HAL_UART_MspInit+0x98>)
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbe:	4b19      	ldr	r3, [pc, #100]	@ (8000e24 <HAL_UART_MspInit+0x98>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dc6:	613b      	str	r3, [r7, #16]
 8000dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <HAL_UART_MspInit+0x98>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <HAL_UART_MspInit+0x98>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <HAL_UART_MspInit+0x98>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000de6:	230c      	movs	r3, #12
 8000de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dea:	2302      	movs	r3, #2
 8000dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	2303      	movs	r3, #3
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000df6:	2307      	movs	r3, #7
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4809      	ldr	r0, [pc, #36]	@ (8000e28 <HAL_UART_MspInit+0x9c>)
 8000e02:	f000 fa77 	bl	80012f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2026      	movs	r0, #38	@ 0x26
 8000e0c:	f000 f9a9 	bl	8001162 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e10:	2026      	movs	r0, #38	@ 0x26
 8000e12:	f000 f9c2 	bl	800119a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	3728      	adds	r7, #40	@ 0x28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40004400 	.word	0x40004400
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e30:	f7ff fe76 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	@ (8000e68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	@ (8000e6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	@ (8000e70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f003 f97d 	bl	8004158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fccb 	bl	80007f8 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e70:	08004d64 	.word	0x08004d64
  ldr r2, =_sbss
 8000e74:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e78:	200002b8 	.word	0x200002b8

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e84:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec0 <HAL_Init+0x40>)
 8000e8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_Init+0x40>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0a      	ldr	r2, [pc, #40]	@ (8000ec0 <HAL_Init+0x40>)
 8000e96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e9c:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	@ (8000ec0 <HAL_Init+0x40>)
 8000ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 f94f 	bl	800114c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 f808 	bl	8000ec4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb4:	f7ff fd40 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023c00 	.word	0x40023c00

08000ec4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ecc:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_InitTick+0x54>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_InitTick+0x58>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 f967 	bl	80011b6 <HAL_SYSTICK_Config>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e00e      	b.n	8000f10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d80a      	bhi.n	8000f0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef8:	2200      	movs	r2, #0
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f00:	f000 f92f 	bl	8001162 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f04:	4a06      	ldr	r2, [pc, #24]	@ (8000f20 <HAL_InitTick+0x5c>)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	e000      	b.n	8000f10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000004 	.word	0x20000004

08000f24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x20>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4413      	add	r3, r2
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_IncTick+0x24>)
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000168 	.word	0x20000168

08000f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f50:	4b03      	ldr	r3, [pc, #12]	@ (8000f60 <HAL_GetTick+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000168 	.word	0x20000168

08000f64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff ffee 	bl	8000f4c <HAL_GetTick>
 8000f70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f7c:	d005      	beq.n	8000f8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_Delay+0x44>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4413      	add	r3, r2
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f8a:	bf00      	nop
 8000f8c:	f7ff ffde 	bl	8000f4c <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d8f7      	bhi.n	8000f8c <HAL_Delay+0x28>
  {
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000008 	.word	0x20000008

08000fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc8:	4013      	ands	r3, r2
 8000fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	60d3      	str	r3, [r2, #12]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff8:	4b04      	ldr	r3, [pc, #16]	@ (800100c <__NVIC_GetPriorityGrouping+0x18>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	0a1b      	lsrs	r3, r3, #8
 8000ffe:	f003 0307 	and.w	r3, r3, #7
}
 8001002:	4618      	mov	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	2b00      	cmp	r3, #0
 8001020:	db0b      	blt.n	800103a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f003 021f 	and.w	r2, r3, #31
 8001028:	4907      	ldr	r1, [pc, #28]	@ (8001048 <__NVIC_EnableIRQ+0x38>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	095b      	lsrs	r3, r3, #5
 8001030:	2001      	movs	r0, #1
 8001032:	fa00 f202 	lsl.w	r2, r0, r2
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e000e100 	.word	0xe000e100

0800104c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	2b00      	cmp	r3, #0
 800105e:	db0a      	blt.n	8001076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	b2da      	uxtb	r2, r3
 8001064:	490c      	ldr	r1, [pc, #48]	@ (8001098 <__NVIC_SetPriority+0x4c>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	0112      	lsls	r2, r2, #4
 800106c:	b2d2      	uxtb	r2, r2
 800106e:	440b      	add	r3, r1
 8001070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001074:	e00a      	b.n	800108c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4908      	ldr	r1, [pc, #32]	@ (800109c <__NVIC_SetPriority+0x50>)
 800107c:	79fb      	ldrb	r3, [r7, #7]
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	3b04      	subs	r3, #4
 8001084:	0112      	lsls	r2, r2, #4
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	440b      	add	r3, r1
 800108a:	761a      	strb	r2, [r3, #24]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000e100 	.word	0xe000e100
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b089      	sub	sp, #36	@ 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f1c3 0307 	rsb	r3, r3, #7
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	bf28      	it	cs
 80010be:	2304      	movcs	r3, #4
 80010c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3304      	adds	r3, #4
 80010c6:	2b06      	cmp	r3, #6
 80010c8:	d902      	bls.n	80010d0 <NVIC_EncodePriority+0x30>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3b03      	subs	r3, #3
 80010ce:	e000      	b.n	80010d2 <NVIC_EncodePriority+0x32>
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	401a      	ands	r2, r3
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa01 f303 	lsl.w	r3, r1, r3
 80010f2:	43d9      	mvns	r1, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f8:	4313      	orrs	r3, r2
         );
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3724      	adds	r7, #36	@ 0x24
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3b01      	subs	r3, #1
 8001114:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001118:	d301      	bcc.n	800111e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2301      	movs	r3, #1
 800111c:	e00f      	b.n	800113e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <SysTick_Config+0x40>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001126:	210f      	movs	r1, #15
 8001128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800112c:	f7ff ff8e 	bl	800104c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <SysTick_Config+0x40>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001136:	4b04      	ldr	r3, [pc, #16]	@ (8001148 <SysTick_Config+0x40>)
 8001138:	2207      	movs	r2, #7
 800113a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	e000e010 	.word	0xe000e010

0800114c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff ff29 	bl	8000fac <__NVIC_SetPriorityGrouping>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001162:	b580      	push	{r7, lr}
 8001164:	b086      	sub	sp, #24
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	60b9      	str	r1, [r7, #8]
 800116c:	607a      	str	r2, [r7, #4]
 800116e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001174:	f7ff ff3e 	bl	8000ff4 <__NVIC_GetPriorityGrouping>
 8001178:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	68b9      	ldr	r1, [r7, #8]
 800117e:	6978      	ldr	r0, [r7, #20]
 8001180:	f7ff ff8e 	bl	80010a0 <NVIC_EncodePriority>
 8001184:	4602      	mov	r2, r0
 8001186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800118a:	4611      	mov	r1, r2
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff ff5d 	bl	800104c <__NVIC_SetPriority>
}
 8001192:	bf00      	nop
 8001194:	3718      	adds	r7, #24
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff ff31 	bl	8001010 <__NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b082      	sub	sp, #8
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ffa2 	bl	8001108 <SysTick_Config>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff feb6 	bl	8000f4c <HAL_GetTick>
 80011e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d008      	beq.n	8001200 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2280      	movs	r2, #128	@ 0x80
 80011f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e052      	b.n	80012a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f022 0216 	bic.w	r2, r2, #22
 800120e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	695a      	ldr	r2, [r3, #20]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800121e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <HAL_DMA_Abort+0x62>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0208 	bic.w	r2, r2, #8
 800123e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0201 	bic.w	r2, r2, #1
 800124e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001250:	e013      	b.n	800127a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001252:	f7ff fe7b 	bl	8000f4c <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b05      	cmp	r3, #5
 800125e:	d90c      	bls.n	800127a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2220      	movs	r2, #32
 8001264:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e015      	b.n	80012a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b00      	cmp	r3, #0
 8001286:	d1e4      	bne.n	8001252 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800128c:	223f      	movs	r2, #63	@ 0x3f
 800128e:	409a      	lsls	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d004      	beq.n	80012cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2280      	movs	r2, #128	@ 0x80
 80012c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e00c      	b.n	80012e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2205      	movs	r2, #5
 80012d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f022 0201 	bic.w	r2, r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b089      	sub	sp, #36	@ 0x24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
 800130e:	e159      	b.n	80015c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001310:	2201      	movs	r2, #1
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	429a      	cmp	r2, r3
 800132a:	f040 8148 	bne.w	80015be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b01      	cmp	r3, #1
 8001338:	d005      	beq.n	8001346 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001342:	2b02      	cmp	r3, #2
 8001344:	d130      	bne.n	80013a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	68da      	ldr	r2, [r3, #12]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137c:	2201      	movs	r2, #1
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	091b      	lsrs	r3, r3, #4
 8001392:	f003 0201 	and.w	r2, r3, #1
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f003 0303 	and.w	r3, r3, #3
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d017      	beq.n	80013e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0303 	and.w	r3, r3, #3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d123      	bne.n	8001438 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	f003 0307 	and.w	r3, r3, #7
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	220f      	movs	r2, #15
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	691a      	ldr	r2, [r3, #16]
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	08da      	lsrs	r2, r3, #3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3208      	adds	r2, #8
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	2203      	movs	r2, #3
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0203 	and.w	r2, r3, #3
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 80a2 	beq.w	80015be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	4b57      	ldr	r3, [pc, #348]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	4a56      	ldr	r2, [pc, #344]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 8001484:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001488:	6453      	str	r3, [r2, #68]	@ 0x44
 800148a:	4b54      	ldr	r3, [pc, #336]	@ (80015dc <HAL_GPIO_Init+0x2e8>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001496:	4a52      	ldr	r2, [pc, #328]	@ (80015e0 <HAL_GPIO_Init+0x2ec>)
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	f003 0303 	and.w	r3, r3, #3
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	220f      	movs	r2, #15
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4013      	ands	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a49      	ldr	r2, [pc, #292]	@ (80015e4 <HAL_GPIO_Init+0x2f0>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d019      	beq.n	80014f6 <HAL_GPIO_Init+0x202>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a48      	ldr	r2, [pc, #288]	@ (80015e8 <HAL_GPIO_Init+0x2f4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d013      	beq.n	80014f2 <HAL_GPIO_Init+0x1fe>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a47      	ldr	r2, [pc, #284]	@ (80015ec <HAL_GPIO_Init+0x2f8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d00d      	beq.n	80014ee <HAL_GPIO_Init+0x1fa>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a46      	ldr	r2, [pc, #280]	@ (80015f0 <HAL_GPIO_Init+0x2fc>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d007      	beq.n	80014ea <HAL_GPIO_Init+0x1f6>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a45      	ldr	r2, [pc, #276]	@ (80015f4 <HAL_GPIO_Init+0x300>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d101      	bne.n	80014e6 <HAL_GPIO_Init+0x1f2>
 80014e2:	2304      	movs	r3, #4
 80014e4:	e008      	b.n	80014f8 <HAL_GPIO_Init+0x204>
 80014e6:	2307      	movs	r3, #7
 80014e8:	e006      	b.n	80014f8 <HAL_GPIO_Init+0x204>
 80014ea:	2303      	movs	r3, #3
 80014ec:	e004      	b.n	80014f8 <HAL_GPIO_Init+0x204>
 80014ee:	2302      	movs	r3, #2
 80014f0:	e002      	b.n	80014f8 <HAL_GPIO_Init+0x204>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_GPIO_Init+0x204>
 80014f6:	2300      	movs	r3, #0
 80014f8:	69fa      	ldr	r2, [r7, #28]
 80014fa:	f002 0203 	and.w	r2, r2, #3
 80014fe:	0092      	lsls	r2, r2, #2
 8001500:	4093      	lsls	r3, r2
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001508:	4935      	ldr	r1, [pc, #212]	@ (80015e0 <HAL_GPIO_Init+0x2ec>)
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	3302      	adds	r3, #2
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001516:	4b38      	ldr	r3, [pc, #224]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	43db      	mvns	r3, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4013      	ands	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4313      	orrs	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800153a:	4a2f      	ldr	r2, [pc, #188]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001540:	4b2d      	ldr	r3, [pc, #180]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d003      	beq.n	8001564 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001564:	4a24      	ldr	r2, [pc, #144]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800156a:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800158e:	4a1a      	ldr	r2, [pc, #104]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001594:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	43db      	mvns	r3, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4013      	ands	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015b8:	4a0f      	ldr	r2, [pc, #60]	@ (80015f8 <HAL_GPIO_Init+0x304>)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	f67f aea2 	bls.w	8001310 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3724      	adds	r7, #36	@ 0x24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40013800 	.word	0x40013800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40013c00 	.word	0x40013c00

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e267      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d075      	beq.n	800173a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800164e:	4b88      	ldr	r3, [pc, #544]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b04      	cmp	r3, #4
 8001658:	d00c      	beq.n	8001674 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165a:	4b85      	ldr	r3, [pc, #532]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001662:	2b08      	cmp	r3, #8
 8001664:	d112      	bne.n	800168c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001666:	4b82      	ldr	r3, [pc, #520]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800166e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001672:	d10b      	bne.n	800168c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001674:	4b7e      	ldr	r3, [pc, #504]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d05b      	beq.n	8001738 <HAL_RCC_OscConfig+0x108>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d157      	bne.n	8001738 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e242      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001694:	d106      	bne.n	80016a4 <HAL_RCC_OscConfig+0x74>
 8001696:	4b76      	ldr	r3, [pc, #472]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a75      	ldr	r2, [pc, #468]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 800169c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	e01d      	b.n	80016e0 <HAL_RCC_OscConfig+0xb0>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016ac:	d10c      	bne.n	80016c8 <HAL_RCC_OscConfig+0x98>
 80016ae:	4b70      	ldr	r3, [pc, #448]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a6f      	ldr	r2, [pc, #444]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80016b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a6c      	ldr	r2, [pc, #432]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80016c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c4:	6013      	str	r3, [r2, #0]
 80016c6:	e00b      	b.n	80016e0 <HAL_RCC_OscConfig+0xb0>
 80016c8:	4b69      	ldr	r3, [pc, #420]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a68      	ldr	r2, [pc, #416]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80016ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d2:	6013      	str	r3, [r2, #0]
 80016d4:	4b66      	ldr	r3, [pc, #408]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a65      	ldr	r2, [pc, #404]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80016da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff fc30 	bl	8000f4c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f0:	f7ff fc2c 	bl	8000f4c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b64      	cmp	r3, #100	@ 0x64
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e207      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	4b5b      	ldr	r3, [pc, #364]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0xc0>
 800170e:	e014      	b.n	800173a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fc1c 	bl	8000f4c <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001718:	f7ff fc18 	bl	8000f4c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b64      	cmp	r3, #100	@ 0x64
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e1f3      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	4b51      	ldr	r3, [pc, #324]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0xe8>
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d063      	beq.n	800180e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001746:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00b      	beq.n	800176a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001752:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800175a:	2b08      	cmp	r3, #8
 800175c:	d11c      	bne.n	8001798 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800175e:	4b44      	ldr	r3, [pc, #272]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d116      	bne.n	8001798 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	4b41      	ldr	r3, [pc, #260]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <HAL_RCC_OscConfig+0x152>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d001      	beq.n	8001782 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e1c7      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001782:	4b3b      	ldr	r3, [pc, #236]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4937      	ldr	r1, [pc, #220]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001796:	e03a      	b.n	800180e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d020      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017a0:	4b34      	ldr	r3, [pc, #208]	@ (8001874 <HAL_RCC_OscConfig+0x244>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff fbd1 	bl	8000f4c <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ae:	f7ff fbcd 	bl	8000f4c <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e1a8      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	4b28      	ldr	r3, [pc, #160]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4925      	ldr	r1, [pc, #148]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
 80017e0:	e015      	b.n	800180e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017e2:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <HAL_RCC_OscConfig+0x244>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e8:	f7ff fbb0 	bl	8000f4c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f0:	f7ff fbac 	bl	8000f4c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e187      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d036      	beq.n	8001888 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d016      	beq.n	8001850 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <HAL_RCC_OscConfig+0x248>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001828:	f7ff fb90 	bl	8000f4c <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001830:	f7ff fb8c 	bl	8000f4c <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e167      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_RCC_OscConfig+0x240>)
 8001844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x200>
 800184e:	e01b      	b.n	8001888 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001850:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_RCC_OscConfig+0x248>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001856:	f7ff fb79 	bl	8000f4c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185c:	e00e      	b.n	800187c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800185e:	f7ff fb75 	bl	8000f4c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d907      	bls.n	800187c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e150      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
 8001870:	40023800 	.word	0x40023800
 8001874:	42470000 	.word	0x42470000
 8001878:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	4b88      	ldr	r3, [pc, #544]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 800187e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1ea      	bne.n	800185e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 8097 	beq.w	80019c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189a:	4b81      	ldr	r3, [pc, #516]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	4b7d      	ldr	r3, [pc, #500]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	4a7c      	ldr	r2, [pc, #496]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b6:	4b7a      	ldr	r3, [pc, #488]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c2:	2301      	movs	r3, #1
 80018c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c6:	4b77      	ldr	r3, [pc, #476]	@ (8001aa4 <HAL_RCC_OscConfig+0x474>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d118      	bne.n	8001904 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d2:	4b74      	ldr	r3, [pc, #464]	@ (8001aa4 <HAL_RCC_OscConfig+0x474>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a73      	ldr	r2, [pc, #460]	@ (8001aa4 <HAL_RCC_OscConfig+0x474>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018de:	f7ff fb35 	bl	8000f4c <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e6:	f7ff fb31 	bl	8000f4c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e10c      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa4 <HAL_RCC_OscConfig+0x474>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x2ea>
 800190c:	4b64      	ldr	r3, [pc, #400]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001910:	4a63      	ldr	r2, [pc, #396]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6713      	str	r3, [r2, #112]	@ 0x70
 8001918:	e01c      	b.n	8001954 <HAL_RCC_OscConfig+0x324>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b05      	cmp	r3, #5
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x30c>
 8001922:	4b5f      	ldr	r3, [pc, #380]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001926:	4a5e      	ldr	r2, [pc, #376]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	6713      	str	r3, [r2, #112]	@ 0x70
 800192e:	4b5c      	ldr	r3, [pc, #368]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 8001930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001932:	4a5b      	ldr	r2, [pc, #364]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6713      	str	r3, [r2, #112]	@ 0x70
 800193a:	e00b      	b.n	8001954 <HAL_RCC_OscConfig+0x324>
 800193c:	4b58      	ldr	r3, [pc, #352]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001940:	4a57      	ldr	r2, [pc, #348]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 8001942:	f023 0301 	bic.w	r3, r3, #1
 8001946:	6713      	str	r3, [r2, #112]	@ 0x70
 8001948:	4b55      	ldr	r3, [pc, #340]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 800194a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800194c:	4a54      	ldr	r2, [pc, #336]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 800194e:	f023 0304 	bic.w	r3, r3, #4
 8001952:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d015      	beq.n	8001988 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195c:	f7ff faf6 	bl	8000f4c <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001962:	e00a      	b.n	800197a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001964:	f7ff faf2 	bl	8000f4c <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001972:	4293      	cmp	r3, r2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e0cb      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197a:	4b49      	ldr	r3, [pc, #292]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 800197c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0ee      	beq.n	8001964 <HAL_RCC_OscConfig+0x334>
 8001986:	e014      	b.n	80019b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001988:	f7ff fae0 	bl	8000f4c <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001990:	f7ff fadc 	bl	8000f4c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e0b5      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a6:	4b3e      	ldr	r3, [pc, #248]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 80019a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ee      	bne.n	8001990 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019b2:	7dfb      	ldrb	r3, [r7, #23]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d105      	bne.n	80019c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b8:	4b39      	ldr	r3, [pc, #228]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019bc:	4a38      	ldr	r2, [pc, #224]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 80019be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80a1 	beq.w	8001b10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ce:	4b34      	ldr	r3, [pc, #208]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d05c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d141      	bne.n	8001a66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b31      	ldr	r3, [pc, #196]	@ (8001aa8 <HAL_RCC_OscConfig+0x478>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fab0 	bl	8000f4c <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff faac 	bl	8000f4c <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e087      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a02:	4b27      	ldr	r3, [pc, #156]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69da      	ldr	r2, [r3, #28]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	019b      	lsls	r3, r3, #6
 8001a1e:	431a      	orrs	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	3b01      	subs	r3, #1
 8001a28:	041b      	lsls	r3, r3, #16
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	061b      	lsls	r3, r3, #24
 8001a32:	491b      	ldr	r1, [pc, #108]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a38:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <HAL_RCC_OscConfig+0x478>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fa85 	bl	8000f4c <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff fa81 	bl	8000f4c <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e05c      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x416>
 8001a64:	e054      	b.n	8001b10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_RCC_OscConfig+0x478>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fa6e 	bl	8000f4c <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff fa6a 	bl	8000f4c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e045      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_RCC_OscConfig+0x470>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x444>
 8001a92:	e03d      	b.n	8001b10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e038      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	@ (8001b1c <HAL_RCC_OscConfig+0x4ec>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d028      	beq.n	8001b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d121      	bne.n	8001b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d11a      	bne.n	8001b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001adc:	4013      	ands	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d111      	bne.n	8001b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	3b01      	subs	r3, #1
 8001af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d107      	bne.n	8001b0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40023800 	.word	0x40023800

08001b20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0cc      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b68      	ldr	r3, [pc, #416]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d90c      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b65      	ldr	r3, [pc, #404]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b63      	ldr	r3, [pc, #396]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0b8      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d020      	beq.n	8001baa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b74:	4b59      	ldr	r3, [pc, #356]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	4a58      	ldr	r2, [pc, #352]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0308 	and.w	r3, r3, #8
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d005      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b8c:	4b53      	ldr	r3, [pc, #332]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4a52      	ldr	r2, [pc, #328]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b98:	4b50      	ldr	r3, [pc, #320]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	494d      	ldr	r1, [pc, #308]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d044      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d107      	bne.n	8001bce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d119      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e07f      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d003      	beq.n	8001bde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bde:	4b3f      	ldr	r3, [pc, #252]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d109      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e06f      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	4b3b      	ldr	r3, [pc, #236]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e067      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfe:	4b37      	ldr	r3, [pc, #220]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f023 0203 	bic.w	r2, r3, #3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4934      	ldr	r1, [pc, #208]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c10:	f7ff f99c 	bl	8000f4c <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c16:	e00a      	b.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7ff f998 	bl	8000f4c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e04f      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	4b2b      	ldr	r3, [pc, #172]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 020c 	and.w	r2, r3, #12
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1eb      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d20c      	bcs.n	8001c68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c56:	4b20      	ldr	r3, [pc, #128]	@ (8001cd8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e032      	b.n	8001cce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c74:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4916      	ldr	r1, [pc, #88]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d009      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c92:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	490e      	ldr	r1, [pc, #56]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ca6:	f000 f821 	bl	8001cec <HAL_RCC_GetSysClockFreq>
 8001caa:	4602      	mov	r2, r0
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	490a      	ldr	r1, [pc, #40]	@ (8001ce0 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	5ccb      	ldrb	r3, [r1, r3]
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	4a09      	ldr	r2, [pc, #36]	@ (8001ce4 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001cc2:	4b09      	ldr	r3, [pc, #36]	@ (8001ce8 <HAL_RCC_ClockConfig+0x1c8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f8fc 	bl	8000ec4 <HAL_InitTick>

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08004d08 	.word	0x08004d08
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf0:	b094      	sub	sp, #80	@ 0x50
 8001cf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d04:	4b79      	ldr	r3, [pc, #484]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x200>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f003 030c 	and.w	r3, r3, #12
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d00d      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x40>
 8001d10:	2b08      	cmp	r3, #8
 8001d12:	f200 80e1 	bhi.w	8001ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x34>
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d1e:	e0db      	b.n	8001ed8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d20:	4b73      	ldr	r3, [pc, #460]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d24:	e0db      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d26:	4b73      	ldr	r3, [pc, #460]	@ (8001ef4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d2a:	e0d8      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d36:	4b6d      	ldr	r3, [pc, #436]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x200>)
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d42:	4b6a      	ldr	r3, [pc, #424]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x200>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	099b      	lsrs	r3, r3, #6
 8001d48:	2200      	movs	r2, #0
 8001d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d54:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d56:	2300      	movs	r3, #0
 8001d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d5e:	4622      	mov	r2, r4
 8001d60:	462b      	mov	r3, r5
 8001d62:	f04f 0000 	mov.w	r0, #0
 8001d66:	f04f 0100 	mov.w	r1, #0
 8001d6a:	0159      	lsls	r1, r3, #5
 8001d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d70:	0150      	lsls	r0, r2, #5
 8001d72:	4602      	mov	r2, r0
 8001d74:	460b      	mov	r3, r1
 8001d76:	4621      	mov	r1, r4
 8001d78:	1a51      	subs	r1, r2, r1
 8001d7a:	6139      	str	r1, [r7, #16]
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d90:	4659      	mov	r1, fp
 8001d92:	018b      	lsls	r3, r1, #6
 8001d94:	4651      	mov	r1, sl
 8001d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d9a:	4651      	mov	r1, sl
 8001d9c:	018a      	lsls	r2, r1, #6
 8001d9e:	4651      	mov	r1, sl
 8001da0:	ebb2 0801 	subs.w	r8, r2, r1
 8001da4:	4659      	mov	r1, fp
 8001da6:	eb63 0901 	sbc.w	r9, r3, r1
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	f04f 0300 	mov.w	r3, #0
 8001db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001dbe:	4690      	mov	r8, r2
 8001dc0:	4699      	mov	r9, r3
 8001dc2:	4623      	mov	r3, r4
 8001dc4:	eb18 0303 	adds.w	r3, r8, r3
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	462b      	mov	r3, r5
 8001dcc:	eb49 0303 	adc.w	r3, r9, r3
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001dde:	4629      	mov	r1, r5
 8001de0:	024b      	lsls	r3, r1, #9
 8001de2:	4621      	mov	r1, r4
 8001de4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001de8:	4621      	mov	r1, r4
 8001dea:	024a      	lsls	r2, r1, #9
 8001dec:	4610      	mov	r0, r2
 8001dee:	4619      	mov	r1, r3
 8001df0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001df2:	2200      	movs	r2, #0
 8001df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001df6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001df8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dfc:	f7fe fa40 	bl	8000280 <__aeabi_uldivmod>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4613      	mov	r3, r2
 8001e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e08:	e058      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e0a:	4b38      	ldr	r3, [pc, #224]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x200>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	099b      	lsrs	r3, r3, #6
 8001e10:	2200      	movs	r2, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	4611      	mov	r1, r2
 8001e16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e1a:	623b      	str	r3, [r7, #32]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e24:	4642      	mov	r2, r8
 8001e26:	464b      	mov	r3, r9
 8001e28:	f04f 0000 	mov.w	r0, #0
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	0159      	lsls	r1, r3, #5
 8001e32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e36:	0150      	lsls	r0, r2, #5
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4641      	mov	r1, r8
 8001e3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e42:	4649      	mov	r1, r9
 8001e44:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e5c:	ebb2 040a 	subs.w	r4, r2, sl
 8001e60:	eb63 050b 	sbc.w	r5, r3, fp
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	f04f 0300 	mov.w	r3, #0
 8001e6c:	00eb      	lsls	r3, r5, #3
 8001e6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e72:	00e2      	lsls	r2, r4, #3
 8001e74:	4614      	mov	r4, r2
 8001e76:	461d      	mov	r5, r3
 8001e78:	4643      	mov	r3, r8
 8001e7a:	18e3      	adds	r3, r4, r3
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	464b      	mov	r3, r9
 8001e80:	eb45 0303 	adc.w	r3, r5, r3
 8001e84:	607b      	str	r3, [r7, #4]
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e92:	4629      	mov	r1, r5
 8001e94:	028b      	lsls	r3, r1, #10
 8001e96:	4621      	mov	r1, r4
 8001e98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	028a      	lsls	r2, r1, #10
 8001ea0:	4610      	mov	r0, r2
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
 8001eaa:	61fa      	str	r2, [r7, #28]
 8001eac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001eb0:	f7fe f9e6 	bl	8000280 <__aeabi_uldivmod>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4613      	mov	r3, r2
 8001eba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <HAL_RCC_GetSysClockFreq+0x200>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ecc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ed6:	e002      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ed8:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3750      	adds	r7, #80	@ 0x50
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	00f42400 	.word	0x00f42400
 8001ef4:	007a1200 	.word	0x007a1200

08001ef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001efc:	4b03      	ldr	r3, [pc, #12]	@ (8001f0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001efe:	681b      	ldr	r3, [r3, #0]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	20000000 	.word	0x20000000

08001f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f14:	f7ff fff0 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	0a9b      	lsrs	r3, r3, #10
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	4903      	ldr	r1, [pc, #12]	@ (8001f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f26:	5ccb      	ldrb	r3, [r1, r3]
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	08004d18 	.word	0x08004d18

08001f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f3c:	f7ff ffdc 	bl	8001ef8 <HAL_RCC_GetHCLKFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b05      	ldr	r3, [pc, #20]	@ (8001f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	0b5b      	lsrs	r3, r3, #13
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	4903      	ldr	r1, [pc, #12]	@ (8001f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	08004d18 	.word	0x08004d18

08001f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e041      	b.n	8001ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d106      	bne.n	8001f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe fe70 	bl	8000c6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2202      	movs	r2, #2
 8001f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4610      	mov	r0, r2
 8001fa0:	f000 fc70 	bl	8002884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b01      	cmp	r3, #1
 8002012:	d001      	beq.n	8002018 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e03c      	b.n	8002092 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2202      	movs	r2, #2
 800201c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1e      	ldr	r2, [pc, #120]	@ (80020a0 <HAL_TIM_Base_Start+0xa0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d018      	beq.n	800205c <HAL_TIM_Base_Start+0x5c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002032:	d013      	beq.n	800205c <HAL_TIM_Base_Start+0x5c>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a1a      	ldr	r2, [pc, #104]	@ (80020a4 <HAL_TIM_Base_Start+0xa4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d00e      	beq.n	800205c <HAL_TIM_Base_Start+0x5c>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a19      	ldr	r2, [pc, #100]	@ (80020a8 <HAL_TIM_Base_Start+0xa8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_TIM_Base_Start+0x5c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a17      	ldr	r2, [pc, #92]	@ (80020ac <HAL_TIM_Base_Start+0xac>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_TIM_Base_Start+0x5c>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a16      	ldr	r2, [pc, #88]	@ (80020b0 <HAL_TIM_Base_Start+0xb0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d111      	bne.n	8002080 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b06      	cmp	r3, #6
 800206c:	d010      	beq.n	8002090 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0201 	orr.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207e:	e007      	b.n	8002090 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40010000 	.word	0x40010000
 80020a4:	40000400 	.word	0x40000400
 80020a8:	40000800 	.word	0x40000800
 80020ac:	40000c00 	.word	0x40000c00
 80020b0:	40014000 	.word	0x40014000

080020b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e041      	b.n	800214a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f839 	bl	8002152 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3304      	adds	r3, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4610      	mov	r0, r2
 80020f4:	f000 fbc6 	bl	8002884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d104      	bne.n	8002182 <HAL_TIM_IC_Start+0x1a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800217e:	b2db      	uxtb	r3, r3
 8002180:	e013      	b.n	80021aa <HAL_TIM_IC_Start+0x42>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d104      	bne.n	8002192 <HAL_TIM_IC_Start+0x2a>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800218e:	b2db      	uxtb	r3, r3
 8002190:	e00b      	b.n	80021aa <HAL_TIM_IC_Start+0x42>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b08      	cmp	r3, #8
 8002196:	d104      	bne.n	80021a2 <HAL_TIM_IC_Start+0x3a>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	e003      	b.n	80021aa <HAL_TIM_IC_Start+0x42>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d104      	bne.n	80021bc <HAL_TIM_IC_Start+0x54>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e013      	b.n	80021e4 <HAL_TIM_IC_Start+0x7c>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d104      	bne.n	80021cc <HAL_TIM_IC_Start+0x64>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	e00b      	b.n	80021e4 <HAL_TIM_IC_Start+0x7c>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b08      	cmp	r3, #8
 80021d0:	d104      	bne.n	80021dc <HAL_TIM_IC_Start+0x74>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	e003      	b.n	80021e4 <HAL_TIM_IC_Start+0x7c>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d102      	bne.n	80021f2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80021ec:	7bbb      	ldrb	r3, [r7, #14]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d001      	beq.n	80021f6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e077      	b.n	80022e6 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d104      	bne.n	8002206 <HAL_TIM_IC_Start+0x9e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002204:	e013      	b.n	800222e <HAL_TIM_IC_Start+0xc6>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d104      	bne.n	8002216 <HAL_TIM_IC_Start+0xae>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002214:	e00b      	b.n	800222e <HAL_TIM_IC_Start+0xc6>
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b08      	cmp	r3, #8
 800221a:	d104      	bne.n	8002226 <HAL_TIM_IC_Start+0xbe>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002224:	e003      	b.n	800222e <HAL_TIM_IC_Start+0xc6>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2202      	movs	r2, #2
 800222a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d104      	bne.n	800223e <HAL_TIM_IC_Start+0xd6>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800223c:	e013      	b.n	8002266 <HAL_TIM_IC_Start+0xfe>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d104      	bne.n	800224e <HAL_TIM_IC_Start+0xe6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800224c:	e00b      	b.n	8002266 <HAL_TIM_IC_Start+0xfe>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b08      	cmp	r3, #8
 8002252:	d104      	bne.n	800225e <HAL_TIM_IC_Start+0xf6>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800225c:	e003      	b.n	8002266 <HAL_TIM_IC_Start+0xfe>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	6839      	ldr	r1, [r7, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f000 fd46 	bl	8002d00 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a1d      	ldr	r2, [pc, #116]	@ (80022f0 <HAL_TIM_IC_Start+0x188>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d018      	beq.n	80022b0 <HAL_TIM_IC_Start+0x148>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002286:	d013      	beq.n	80022b0 <HAL_TIM_IC_Start+0x148>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a19      	ldr	r2, [pc, #100]	@ (80022f4 <HAL_TIM_IC_Start+0x18c>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00e      	beq.n	80022b0 <HAL_TIM_IC_Start+0x148>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a18      	ldr	r2, [pc, #96]	@ (80022f8 <HAL_TIM_IC_Start+0x190>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_TIM_IC_Start+0x148>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <HAL_TIM_IC_Start+0x194>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d004      	beq.n	80022b0 <HAL_TIM_IC_Start+0x148>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a15      	ldr	r2, [pc, #84]	@ (8002300 <HAL_TIM_IC_Start+0x198>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d111      	bne.n	80022d4 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d010      	beq.n	80022e4 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0201 	orr.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022d2:	e007      	b.n	80022e4 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40010000 	.word	0x40010000
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40000800 	.word	0x40000800
 80022fc:	40000c00 	.word	0x40000c00
 8002300:	40014000 	.word	0x40014000

08002304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d020      	beq.n	8002368 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d01b      	beq.n	8002368 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0202 	mvn.w	r2, #2
 8002338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe f9ca 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 8002354:	e005      	b.n	8002362 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f000 fa76 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 fa7d 	bl	800285c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d020      	beq.n	80023b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01b      	beq.n	80023b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f06f 0204 	mvn.w	r2, #4
 8002384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2202      	movs	r2, #2
 800238a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe f9a4 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 80023a0:	e005      	b.n	80023ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f000 fa50 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 fa57 	bl	800285c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d020      	beq.n	8002400 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d01b      	beq.n	8002400 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f06f 0208 	mvn.w	r2, #8
 80023d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2204      	movs	r2, #4
 80023d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe f97e 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 80023ec:	e005      	b.n	80023fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa2a 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 fa31 	bl	800285c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	d020      	beq.n	800244c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01b      	beq.n	800244c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0210 	mvn.w	r2, #16
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2208      	movs	r2, #8
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe f958 	bl	80006e8 <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa04 	bl	8002848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 fa0b 	bl	800285c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00c      	beq.n	8002470 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f06f 0201 	mvn.w	r2, #1
 8002468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f9e2 	bl	8002834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00c      	beq.n	8002494 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002480:	2b00      	cmp	r3, #0
 8002482:	d007      	beq.n	8002494 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800248c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 fcd4 	bl	8002e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00c      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d007      	beq.n	80024b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f9dc 	bl	8002870 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00c      	beq.n	80024dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d007      	beq.n	80024dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f06f 0220 	mvn.w	r2, #32
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 fca6 	bl	8002e28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d101      	bne.n	8002502 <HAL_TIM_IC_ConfigChannel+0x1e>
 80024fe:	2302      	movs	r3, #2
 8002500:	e088      	b.n	8002614 <HAL_TIM_IC_ConfigChannel+0x130>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11b      	bne.n	8002548 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002520:	f000 fa36 	bl	8002990 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699a      	ldr	r2, [r3, #24]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 020c 	bic.w	r2, r2, #12
 8002532:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6999      	ldr	r1, [r3, #24]
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	430a      	orrs	r2, r1
 8002544:	619a      	str	r2, [r3, #24]
 8002546:	e060      	b.n	800260a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b04      	cmp	r3, #4
 800254c:	d11c      	bne.n	8002588 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800255e:	f000 faae 	bl	8002abe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002570:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6999      	ldr	r1, [r3, #24]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	021a      	lsls	r2, r3, #8
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	619a      	str	r2, [r3, #24]
 8002586:	e040      	b.n	800260a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b08      	cmp	r3, #8
 800258c:	d11b      	bne.n	80025c6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800259e:	f000 fafb 	bl	8002b98 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 020c 	bic.w	r2, r2, #12
 80025b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	69d9      	ldr	r1, [r3, #28]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	61da      	str	r2, [r3, #28]
 80025c4:	e021      	b.n	800260a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0c      	cmp	r3, #12
 80025ca:	d11c      	bne.n	8002606 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80025dc:	f000 fb18 	bl	8002c10 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69da      	ldr	r2, [r3, #28]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80025ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69d9      	ldr	r1, [r3, #28]
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	021a      	lsls	r2, r3, #8
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	430a      	orrs	r2, r1
 8002602:	61da      	str	r2, [r3, #28]
 8002604:	e001      	b.n	800260a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002612:	7dfb      	ldrb	r3, [r7, #23]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_TIM_ConfigClockSource+0x1c>
 8002634:	2302      	movs	r3, #2
 8002636:	e0b4      	b.n	80027a2 <HAL_TIM_ConfigClockSource+0x186>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800265e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002670:	d03e      	beq.n	80026f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002672:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002676:	f200 8087 	bhi.w	8002788 <HAL_TIM_ConfigClockSource+0x16c>
 800267a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800267e:	f000 8086 	beq.w	800278e <HAL_TIM_ConfigClockSource+0x172>
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002686:	d87f      	bhi.n	8002788 <HAL_TIM_ConfigClockSource+0x16c>
 8002688:	2b70      	cmp	r3, #112	@ 0x70
 800268a:	d01a      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0xa6>
 800268c:	2b70      	cmp	r3, #112	@ 0x70
 800268e:	d87b      	bhi.n	8002788 <HAL_TIM_ConfigClockSource+0x16c>
 8002690:	2b60      	cmp	r3, #96	@ 0x60
 8002692:	d050      	beq.n	8002736 <HAL_TIM_ConfigClockSource+0x11a>
 8002694:	2b60      	cmp	r3, #96	@ 0x60
 8002696:	d877      	bhi.n	8002788 <HAL_TIM_ConfigClockSource+0x16c>
 8002698:	2b50      	cmp	r3, #80	@ 0x50
 800269a:	d03c      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0xfa>
 800269c:	2b50      	cmp	r3, #80	@ 0x50
 800269e:	d873      	bhi.n	8002788 <HAL_TIM_ConfigClockSource+0x16c>
 80026a0:	2b40      	cmp	r3, #64	@ 0x40
 80026a2:	d058      	beq.n	8002756 <HAL_TIM_ConfigClockSource+0x13a>
 80026a4:	2b40      	cmp	r3, #64	@ 0x40
 80026a6:	d86f      	bhi.n	8002788 <HAL_TIM_ConfigClockSource+0x16c>
 80026a8:	2b30      	cmp	r3, #48	@ 0x30
 80026aa:	d064      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0x15a>
 80026ac:	2b30      	cmp	r3, #48	@ 0x30
 80026ae:	d86b      	bhi.n	8002788 <HAL_TIM_ConfigClockSource+0x16c>
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d060      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0x15a>
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	d867      	bhi.n	8002788 <HAL_TIM_ConfigClockSource+0x16c>
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d05c      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0x15a>
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d05a      	beq.n	8002776 <HAL_TIM_ConfigClockSource+0x15a>
 80026c0:	e062      	b.n	8002788 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026d2:	f000 faf5 	bl	8002cc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80026e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	609a      	str	r2, [r3, #8]
      break;
 80026ee:	e04f      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002700:	f000 fade 	bl	8002cc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002712:	609a      	str	r2, [r3, #8]
      break;
 8002714:	e03c      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002722:	461a      	mov	r2, r3
 8002724:	f000 f99c 	bl	8002a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2150      	movs	r1, #80	@ 0x50
 800272e:	4618      	mov	r0, r3
 8002730:	f000 faab 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 8002734:	e02c      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002742:	461a      	mov	r2, r3
 8002744:	f000 f9f8 	bl	8002b38 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2160      	movs	r1, #96	@ 0x60
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fa9b 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 8002754:	e01c      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002762:	461a      	mov	r2, r3
 8002764:	f000 f97c 	bl	8002a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2140      	movs	r1, #64	@ 0x40
 800276e:	4618      	mov	r0, r3
 8002770:	f000 fa8b 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 8002774:	e00c      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4619      	mov	r1, r3
 8002780:	4610      	mov	r0, r2
 8002782:	f000 fa82 	bl	8002c8a <TIM_ITRx_SetConfig>
      break;
 8002786:	e003      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	73fb      	strb	r3, [r7, #15]
      break;
 800278c:	e000      	b.n	8002790 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800278e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b0c      	cmp	r3, #12
 80027be:	d831      	bhi.n	8002824 <HAL_TIM_ReadCapturedValue+0x78>
 80027c0:	a201      	add	r2, pc, #4	@ (adr r2, 80027c8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c6:	bf00      	nop
 80027c8:	080027fd 	.word	0x080027fd
 80027cc:	08002825 	.word	0x08002825
 80027d0:	08002825 	.word	0x08002825
 80027d4:	08002825 	.word	0x08002825
 80027d8:	08002807 	.word	0x08002807
 80027dc:	08002825 	.word	0x08002825
 80027e0:	08002825 	.word	0x08002825
 80027e4:	08002825 	.word	0x08002825
 80027e8:	08002811 	.word	0x08002811
 80027ec:	08002825 	.word	0x08002825
 80027f0:	08002825 	.word	0x08002825
 80027f4:	08002825 	.word	0x08002825
 80027f8:	0800281b 	.word	0x0800281b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002802:	60fb      	str	r3, [r7, #12]

      break;
 8002804:	e00f      	b.n	8002826 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280c:	60fb      	str	r3, [r7, #12]

      break;
 800280e:	e00a      	b.n	8002826 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002816:	60fb      	str	r3, [r7, #12]

      break;
 8002818:	e005      	b.n	8002826 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	60fb      	str	r3, [r7, #12]

      break;
 8002822:	e000      	b.n	8002826 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002824:	bf00      	nop
  }

  return tmpreg;
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a37      	ldr	r2, [pc, #220]	@ (8002974 <TIM_Base_SetConfig+0xf0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d00f      	beq.n	80028bc <TIM_Base_SetConfig+0x38>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a2:	d00b      	beq.n	80028bc <TIM_Base_SetConfig+0x38>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a34      	ldr	r2, [pc, #208]	@ (8002978 <TIM_Base_SetConfig+0xf4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d007      	beq.n	80028bc <TIM_Base_SetConfig+0x38>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a33      	ldr	r2, [pc, #204]	@ (800297c <TIM_Base_SetConfig+0xf8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d003      	beq.n	80028bc <TIM_Base_SetConfig+0x38>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a32      	ldr	r2, [pc, #200]	@ (8002980 <TIM_Base_SetConfig+0xfc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d108      	bne.n	80028ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a28      	ldr	r2, [pc, #160]	@ (8002974 <TIM_Base_SetConfig+0xf0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01b      	beq.n	800290e <TIM_Base_SetConfig+0x8a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028dc:	d017      	beq.n	800290e <TIM_Base_SetConfig+0x8a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a25      	ldr	r2, [pc, #148]	@ (8002978 <TIM_Base_SetConfig+0xf4>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d013      	beq.n	800290e <TIM_Base_SetConfig+0x8a>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a24      	ldr	r2, [pc, #144]	@ (800297c <TIM_Base_SetConfig+0xf8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00f      	beq.n	800290e <TIM_Base_SetConfig+0x8a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a23      	ldr	r2, [pc, #140]	@ (8002980 <TIM_Base_SetConfig+0xfc>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d00b      	beq.n	800290e <TIM_Base_SetConfig+0x8a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a22      	ldr	r2, [pc, #136]	@ (8002984 <TIM_Base_SetConfig+0x100>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d007      	beq.n	800290e <TIM_Base_SetConfig+0x8a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a21      	ldr	r2, [pc, #132]	@ (8002988 <TIM_Base_SetConfig+0x104>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d003      	beq.n	800290e <TIM_Base_SetConfig+0x8a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a20      	ldr	r2, [pc, #128]	@ (800298c <TIM_Base_SetConfig+0x108>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d108      	bne.n	8002920 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a0c      	ldr	r2, [pc, #48]	@ (8002974 <TIM_Base_SetConfig+0xf0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d103      	bne.n	800294e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f043 0204 	orr.w	r2, r3, #4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	601a      	str	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40010000 	.word	0x40010000
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800
 8002980:	40000c00 	.word	0x40000c00
 8002984:	40014000 	.word	0x40014000
 8002988:	40014400 	.word	0x40014400
 800298c:	40014800 	.word	0x40014800

08002990 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
 800299c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	f023 0201 	bic.w	r2, r3, #1
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a24      	ldr	r2, [pc, #144]	@ (8002a4c <TIM_TI1_SetConfig+0xbc>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <TIM_TI1_SetConfig+0x56>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029c4:	d00f      	beq.n	80029e6 <TIM_TI1_SetConfig+0x56>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	4a21      	ldr	r2, [pc, #132]	@ (8002a50 <TIM_TI1_SetConfig+0xc0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d00b      	beq.n	80029e6 <TIM_TI1_SetConfig+0x56>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a20      	ldr	r2, [pc, #128]	@ (8002a54 <TIM_TI1_SetConfig+0xc4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <TIM_TI1_SetConfig+0x56>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a58 <TIM_TI1_SetConfig+0xc8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <TIM_TI1_SetConfig+0x56>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4a1e      	ldr	r2, [pc, #120]	@ (8002a5c <TIM_TI1_SetConfig+0xcc>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <TIM_TI1_SetConfig+0x5a>
 80029e6:	2301      	movs	r3, #1
 80029e8:	e000      	b.n	80029ec <TIM_TI1_SetConfig+0x5c>
 80029ea:	2300      	movs	r3, #0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	e003      	b.n	8002a0a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f023 030a 	bic.w	r3, r3, #10
 8002a24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f003 030a 	and.w	r3, r3, #10
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	621a      	str	r2, [r3, #32]
}
 8002a3e:	bf00      	nop
 8002a40:	371c      	adds	r7, #28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40000400 	.word	0x40000400
 8002a54:	40000800 	.word	0x40000800
 8002a58:	40000c00 	.word	0x40000c00
 8002a5c:	40014000 	.word	0x40014000

08002a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 030a 	bic.w	r3, r3, #10
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr

08002abe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	b087      	sub	sp, #28
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	60f8      	str	r0, [r7, #12]
 8002ac6:	60b9      	str	r1, [r7, #8]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a1b      	ldr	r3, [r3, #32]
 8002ad6:	f023 0210 	bic.w	r2, r3, #16
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	021b      	lsls	r3, r3, #8
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	031b      	lsls	r3, r3, #12
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b10:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	693a      	ldr	r2, [r7, #16]
 8002b24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	621a      	str	r2, [r3, #32]
}
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f023 0210 	bic.w	r2, r3, #16
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	031b      	lsls	r3, r3, #12
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002b74:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	621a      	str	r2, [r3, #32]
}
 8002b8c:	bf00      	nop
 8002b8e:	371c      	adds	r7, #28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b087      	sub	sp, #28
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f023 0303 	bic.w	r3, r3, #3
 8002bc4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bd4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002be8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	021b      	lsls	r3, r3, #8
 8002bee:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	621a      	str	r2, [r3, #32]
}
 8002c04:	bf00      	nop
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
 8002c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c3c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	021b      	lsls	r3, r3, #8
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c4e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	031b      	lsls	r3, r3, #12
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002c62:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	031b      	lsls	r3, r3, #12
 8002c68:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	621a      	str	r2, [r3, #32]
}
 8002c7e:	bf00      	nop
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f043 0307 	orr.w	r3, r3, #7
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	609a      	str	r2, [r3, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	021a      	lsls	r2, r3, #8
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	609a      	str	r2, [r3, #8]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	2201      	movs	r2, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1a      	ldr	r2, [r3, #32]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	401a      	ands	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6a1a      	ldr	r2, [r3, #32]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	fa01 f303 	lsl.w	r3, r1, r3
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e050      	b.n	8002e06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68fa      	ldr	r2, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d018      	beq.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002db0:	d013      	beq.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a18      	ldr	r2, [pc, #96]	@ (8002e18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d00e      	beq.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a16      	ldr	r2, [pc, #88]	@ (8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d009      	beq.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a15      	ldr	r2, [pc, #84]	@ (8002e20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d004      	beq.n	8002dda <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a13      	ldr	r2, [pc, #76]	@ (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10c      	bne.n	8002df4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68ba      	ldr	r2, [r7, #8]
 8002df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40014000 	.word	0x40014000

08002e28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e042      	b.n	8002ee8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d106      	bne.n	8002e7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd ff88 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2224      	movs	r2, #36	@ 0x24
 8002e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 fd7f 	bl	8003998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ea8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695a      	ldr	r2, [r3, #20]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002eb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68da      	ldr	r2, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ec8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	@ 0x28
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b20      	cmp	r3, #32
 8002f0e:	d175      	bne.n	8002ffc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_UART_Transmit+0x2c>
 8002f16:	88fb      	ldrh	r3, [r7, #6]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e06e      	b.n	8002ffe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2221      	movs	r2, #33	@ 0x21
 8002f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f2e:	f7fe f80d 	bl	8000f4c <HAL_GetTick>
 8002f32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	88fa      	ldrh	r2, [r7, #6]
 8002f38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	88fa      	ldrh	r2, [r7, #6]
 8002f3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f48:	d108      	bne.n	8002f5c <HAL_UART_Transmit+0x6c>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d104      	bne.n	8002f5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	61bb      	str	r3, [r7, #24]
 8002f5a:	e003      	b.n	8002f64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f64:	e02e      	b.n	8002fc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	9300      	str	r3, [sp, #0]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2180      	movs	r1, #128	@ 0x80
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fb1d 	bl	80035b0 <UART_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e03a      	b.n	8002ffe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10b      	bne.n	8002fa6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	3302      	adds	r3, #2
 8002fa2:	61bb      	str	r3, [r7, #24]
 8002fa4:	e007      	b.n	8002fb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	781a      	ldrb	r2, [r3, #0]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1cb      	bne.n	8002f66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	2140      	movs	r1, #64	@ 0x40
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 fae9 	bl	80035b0 <UART_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e006      	b.n	8002ffe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e000      	b.n	8002ffe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002ffc:	2302      	movs	r3, #2
  }
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0ba      	sub	sp, #232	@ 0xe8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003034:	2300      	movs	r3, #0
 8003036:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800303a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003046:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10f      	bne.n	800306e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800304e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_UART_IRQHandler+0x66>
 800305a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 fbd7 	bl	800381a <UART_Receive_IT>
      return;
 800306c:	e273      	b.n	8003556 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800306e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80de 	beq.w	8003234 <HAL_UART_IRQHandler+0x22c>
 8003078:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d106      	bne.n	8003092 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003088:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80d1 	beq.w	8003234 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_UART_IRQHandler+0xae>
 800309e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d005      	beq.n	80030b6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_UART_IRQHandler+0xd2>
 80030c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f043 0202 	orr.w	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00b      	beq.n	80030fe <HAL_UART_IRQHandler+0xf6>
 80030e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f043 0204 	orr.w	r2, r3, #4
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d011      	beq.n	800312e <HAL_UART_IRQHandler+0x126>
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003116:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003126:	f043 0208 	orr.w	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 820a 	beq.w	800354c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d008      	beq.n	8003156 <HAL_UART_IRQHandler+0x14e>
 8003144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 fb62 	bl	800381a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003160:	2b40      	cmp	r3, #64	@ 0x40
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003172:	f003 0308 	and.w	r3, r3, #8
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <HAL_UART_IRQHandler+0x17a>
 800317a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d04f      	beq.n	8003222 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 fa6d 	bl	8003662 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003192:	2b40      	cmp	r3, #64	@ 0x40
 8003194:	d141      	bne.n	800321a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3314      	adds	r3, #20
 800319c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3314      	adds	r3, #20
 80031be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031d2:	e841 2300 	strex	r3, r2, [r1]
 80031d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1d9      	bne.n	8003196 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d013      	beq.n	8003212 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ee:	4a8a      	ldr	r2, [pc, #552]	@ (8003418 <HAL_UART_IRQHandler+0x410>)
 80031f0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe f859 	bl	80012ae <HAL_DMA_Abort_IT>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d016      	beq.n	8003230 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800320c:	4610      	mov	r0, r2
 800320e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003210:	e00e      	b.n	8003230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f9b6 	bl	8003584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003218:	e00a      	b.n	8003230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f9b2 	bl	8003584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e006      	b.n	8003230 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f9ae 	bl	8003584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800322e:	e18d      	b.n	800354c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	bf00      	nop
    return;
 8003232:	e18b      	b.n	800354c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003238:	2b01      	cmp	r3, #1
 800323a:	f040 8167 	bne.w	800350c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800323e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8160 	beq.w	800350c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800324c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003250:	f003 0310 	and.w	r3, r3, #16
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8159 	beq.w	800350c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800325a:	2300      	movs	r3, #0
 800325c:	60bb      	str	r3, [r7, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327a:	2b40      	cmp	r3, #64	@ 0x40
 800327c:	f040 80ce 	bne.w	800341c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800328c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80a9 	beq.w	80033e8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800329a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800329e:	429a      	cmp	r2, r3
 80032a0:	f080 80a2 	bcs.w	80033e8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b6:	f000 8088 	beq.w	80033ca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	330c      	adds	r3, #12
 80032c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	330c      	adds	r3, #12
 80032e2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80032e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032f6:	e841 2300 	strex	r3, r2, [r1]
 80032fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80032fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1d9      	bne.n	80032ba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	3314      	adds	r3, #20
 800330c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003310:	e853 3f00 	ldrex	r3, [r3]
 8003314:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003316:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3314      	adds	r3, #20
 8003326:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800332a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800332e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003330:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003332:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003336:	e841 2300 	strex	r3, r2, [r1]
 800333a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800333c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1e1      	bne.n	8003306 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	3314      	adds	r3, #20
 8003348:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800334c:	e853 3f00 	ldrex	r3, [r3]
 8003350:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003352:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003354:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003358:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3314      	adds	r3, #20
 8003362:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003366:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003368:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800336c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800336e:	e841 2300 	strex	r3, r2, [r1]
 8003372:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003374:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1e3      	bne.n	8003342 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2220      	movs	r2, #32
 800337e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003398:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800339a:	f023 0310 	bic.w	r3, r3, #16
 800339e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	330c      	adds	r3, #12
 80033a8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033ac:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033ae:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033b2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033b4:	e841 2300 	strex	r3, r2, [r1]
 80033b8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e3      	bne.n	8003388 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd ff02 	bl	80011ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033d8:	b29b      	uxth	r3, r3
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	b29b      	uxth	r3, r3
 80033de:	4619      	mov	r1, r3
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f8d9 	bl	8003598 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80033e6:	e0b3      	b.n	8003550 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033f0:	429a      	cmp	r2, r3
 80033f2:	f040 80ad 	bne.w	8003550 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003400:	f040 80a6 	bne.w	8003550 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800340e:	4619      	mov	r1, r3
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f8c1 	bl	8003598 <HAL_UARTEx_RxEventCallback>
      return;
 8003416:	e09b      	b.n	8003550 <HAL_UART_IRQHandler+0x548>
 8003418:	08003729 	.word	0x08003729
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003424:	b29b      	uxth	r3, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	f000 808e 	beq.w	8003554 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003438:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8089 	beq.w	8003554 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344c:	e853 3f00 	ldrex	r3, [r3]
 8003450:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003458:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003466:	647a      	str	r2, [r7, #68]	@ 0x44
 8003468:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800346c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e3      	bne.n	8003442 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3314      	adds	r3, #20
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003484:	e853 3f00 	ldrex	r3, [r3]
 8003488:	623b      	str	r3, [r7, #32]
   return(result);
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f023 0301 	bic.w	r3, r3, #1
 8003490:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3314      	adds	r3, #20
 800349a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800349e:	633a      	str	r2, [r7, #48]	@ 0x30
 80034a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e3      	bne.n	800347a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	330c      	adds	r3, #12
 80034c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	e853 3f00 	ldrex	r3, [r3]
 80034ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0310 	bic.w	r3, r3, #16
 80034d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034e4:	61fa      	str	r2, [r7, #28]
 80034e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	69b9      	ldr	r1, [r7, #24]
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	617b      	str	r3, [r7, #20]
   return(result);
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e3      	bne.n	80034c0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003502:	4619      	mov	r1, r3
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f847 	bl	8003598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800350a:	e023      	b.n	8003554 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800350c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <HAL_UART_IRQHandler+0x524>
 8003518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800351c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d003      	beq.n	800352c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 f910 	bl	800374a <UART_Transmit_IT>
    return;
 800352a:	e014      	b.n	8003556 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800352c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00e      	beq.n	8003556 <HAL_UART_IRQHandler+0x54e>
 8003538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800353c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f950 	bl	80037ea <UART_EndTransmit_IT>
    return;
 800354a:	e004      	b.n	8003556 <HAL_UART_IRQHandler+0x54e>
    return;
 800354c:	bf00      	nop
 800354e:	e002      	b.n	8003556 <HAL_UART_IRQHandler+0x54e>
      return;
 8003550:	bf00      	nop
 8003552:	e000      	b.n	8003556 <HAL_UART_IRQHandler+0x54e>
      return;
 8003554:	bf00      	nop
  }
}
 8003556:	37e8      	adds	r7, #232	@ 0xe8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	603b      	str	r3, [r7, #0]
 80035bc:	4613      	mov	r3, r2
 80035be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c0:	e03b      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035c8:	d037      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ca:	f7fd fcbf 	bl	8000f4c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d302      	bcc.n	80035e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e03a      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d023      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	2b80      	cmp	r3, #128	@ 0x80
 80035f6:	d020      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b40      	cmp	r3, #64	@ 0x40
 80035fc:	d01d      	beq.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b08      	cmp	r3, #8
 800360a:	d116      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f81d 	bl	8003662 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2208      	movs	r2, #8
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e00f      	b.n	800365a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4013      	ands	r3, r2
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	429a      	cmp	r2, r3
 8003648:	bf0c      	ite	eq
 800364a:	2301      	moveq	r3, #1
 800364c:	2300      	movne	r3, #0
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	429a      	cmp	r2, r3
 8003656:	d0b4      	beq.n	80035c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003662:	b480      	push	{r7}
 8003664:	b095      	sub	sp, #84	@ 0x54
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800367a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003680:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800368a:	643a      	str	r2, [r7, #64]	@ 0x40
 800368c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003690:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003692:	e841 2300 	strex	r3, r2, [r1]
 8003696:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1e5      	bne.n	800366a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	3314      	adds	r3, #20
 80036a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	3314      	adds	r3, #20
 80036bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e5      	bne.n	800369e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d119      	bne.n	800370e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	330c      	adds	r3, #12
 80036e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	e853 3f00 	ldrex	r3, [r3]
 80036e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	f023 0310 	bic.w	r3, r3, #16
 80036f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	330c      	adds	r3, #12
 80036f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036fa:	61ba      	str	r2, [r7, #24]
 80036fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	6979      	ldr	r1, [r7, #20]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	613b      	str	r3, [r7, #16]
   return(result);
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1e5      	bne.n	80036da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800371c:	bf00      	nop
 800371e:	3754      	adds	r7, #84	@ 0x54
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff ff21 	bl	8003584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b21      	cmp	r3, #33	@ 0x21
 800375c:	d13e      	bne.n	80037dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003766:	d114      	bne.n	8003792 <UART_Transmit_IT+0x48>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d110      	bne.n	8003792 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003784:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	1c9a      	adds	r2, r3, #2
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	621a      	str	r2, [r3, #32]
 8003790:	e008      	b.n	80037a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	1c59      	adds	r1, r3, #1
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6211      	str	r1, [r2, #32]
 800379c:	781a      	ldrb	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	4619      	mov	r1, r3
 80037b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10f      	bne.n	80037d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68da      	ldr	r2, [r3, #12]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003800:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fea6 	bl	800355c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3708      	adds	r7, #8
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b08c      	sub	sp, #48	@ 0x30
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003822:	2300      	movs	r3, #0
 8003824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b22      	cmp	r3, #34	@ 0x22
 8003834:	f040 80aa 	bne.w	800398c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003840:	d115      	bne.n	800386e <UART_Receive_IT+0x54>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d111      	bne.n	800386e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	b29b      	uxth	r3, r3
 8003858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800385c:	b29a      	uxth	r2, r3
 800385e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003860:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003866:	1c9a      	adds	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	629a      	str	r2, [r3, #40]	@ 0x28
 800386c:	e024      	b.n	80038b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003872:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800387c:	d007      	beq.n	800388e <UART_Receive_IT+0x74>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <UART_Receive_IT+0x82>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	b2da      	uxtb	r2, r3
 8003896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e008      	b.n	80038ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4619      	mov	r1, r3
 80038c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d15d      	bne.n	8003988 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0220 	bic.w	r2, r2, #32
 80038da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f022 0201 	bic.w	r2, r2, #1
 80038fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	2b01      	cmp	r3, #1
 8003910:	d135      	bne.n	800397e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	330c      	adds	r3, #12
 800391e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	e853 3f00 	ldrex	r3, [r3]
 8003926:	613b      	str	r3, [r7, #16]
   return(result);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f023 0310 	bic.w	r3, r3, #16
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003938:	623a      	str	r2, [r7, #32]
 800393a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393c:	69f9      	ldr	r1, [r7, #28]
 800393e:	6a3a      	ldr	r2, [r7, #32]
 8003940:	e841 2300 	strex	r3, r2, [r1]
 8003944:	61bb      	str	r3, [r7, #24]
   return(result);
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e5      	bne.n	8003918 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0310 	and.w	r3, r3, #16
 8003956:	2b10      	cmp	r3, #16
 8003958:	d10a      	bne.n	8003970 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7ff fe0e 	bl	8003598 <HAL_UARTEx_RxEventCallback>
 800397c:	e002      	b.n	8003984 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff fdf6 	bl	8003570 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e002      	b.n	800398e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	e000      	b.n	800398e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
  }
}
 800398e:	4618      	mov	r0, r3
 8003990:	3730      	adds	r7, #48	@ 0x30
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800399c:	b0c0      	sub	sp, #256	@ 0x100
 800399e:	af00      	add	r7, sp, #0
 80039a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	68d9      	ldr	r1, [r3, #12]
 80039b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	ea40 0301 	orr.w	r3, r0, r1
 80039c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	4313      	orrs	r3, r2
 80039e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039f0:	f021 010c 	bic.w	r1, r1, #12
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80039fe:	430b      	orrs	r3, r1
 8003a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a12:	6999      	ldr	r1, [r3, #24]
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	ea40 0301 	orr.w	r3, r0, r1
 8003a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b8f      	ldr	r3, [pc, #572]	@ (8003c64 <UART_SetConfig+0x2cc>)
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d005      	beq.n	8003a38 <UART_SetConfig+0xa0>
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b8d      	ldr	r3, [pc, #564]	@ (8003c68 <UART_SetConfig+0x2d0>)
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d104      	bne.n	8003a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a38:	f7fe fa7e 	bl	8001f38 <HAL_RCC_GetPCLK2Freq>
 8003a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a40:	e003      	b.n	8003a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a42:	f7fe fa65 	bl	8001f10 <HAL_RCC_GetPCLK1Freq>
 8003a46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4e:	69db      	ldr	r3, [r3, #28]
 8003a50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a54:	f040 810c 	bne.w	8003c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a6a:	4622      	mov	r2, r4
 8003a6c:	462b      	mov	r3, r5
 8003a6e:	1891      	adds	r1, r2, r2
 8003a70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a72:	415b      	adcs	r3, r3
 8003a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a7a:	4621      	mov	r1, r4
 8003a7c:	eb12 0801 	adds.w	r8, r2, r1
 8003a80:	4629      	mov	r1, r5
 8003a82:	eb43 0901 	adc.w	r9, r3, r1
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a9a:	4690      	mov	r8, r2
 8003a9c:	4699      	mov	r9, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	eb18 0303 	adds.w	r3, r8, r3
 8003aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	eb49 0303 	adc.w	r3, r9, r3
 8003aae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003abe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	18db      	adds	r3, r3, r3
 8003aca:	653b      	str	r3, [r7, #80]	@ 0x50
 8003acc:	4613      	mov	r3, r2
 8003ace:	eb42 0303 	adc.w	r3, r2, r3
 8003ad2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003adc:	f7fc fbd0 	bl	8000280 <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4b61      	ldr	r3, [pc, #388]	@ (8003c6c <UART_SetConfig+0x2d4>)
 8003ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	011c      	lsls	r4, r3, #4
 8003aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003af8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b00:	4642      	mov	r2, r8
 8003b02:	464b      	mov	r3, r9
 8003b04:	1891      	adds	r1, r2, r2
 8003b06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b08:	415b      	adcs	r3, r3
 8003b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b10:	4641      	mov	r1, r8
 8003b12:	eb12 0a01 	adds.w	sl, r2, r1
 8003b16:	4649      	mov	r1, r9
 8003b18:	eb43 0b01 	adc.w	fp, r3, r1
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b30:	4692      	mov	sl, r2
 8003b32:	469b      	mov	fp, r3
 8003b34:	4643      	mov	r3, r8
 8003b36:	eb1a 0303 	adds.w	r3, sl, r3
 8003b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b3e:	464b      	mov	r3, r9
 8003b40:	eb4b 0303 	adc.w	r3, fp, r3
 8003b44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	18db      	adds	r3, r3, r3
 8003b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b62:	4613      	mov	r3, r2
 8003b64:	eb42 0303 	adc.w	r3, r2, r3
 8003b68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b72:	f7fc fb85 	bl	8000280 <__aeabi_uldivmod>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c6c <UART_SetConfig+0x2d4>)
 8003b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b82:	095b      	lsrs	r3, r3, #5
 8003b84:	2264      	movs	r2, #100	@ 0x64
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	1acb      	subs	r3, r1, r3
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b92:	4b36      	ldr	r3, [pc, #216]	@ (8003c6c <UART_SetConfig+0x2d4>)
 8003b94:	fba3 2302 	umull	r2, r3, r3, r2
 8003b98:	095b      	lsrs	r3, r3, #5
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ba0:	441c      	add	r4, r3
 8003ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	1891      	adds	r1, r2, r2
 8003bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bbc:	415b      	adcs	r3, r3
 8003bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	1851      	adds	r1, r2, r1
 8003bc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bca:	4649      	mov	r1, r9
 8003bcc:	414b      	adcs	r3, r1
 8003bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bdc:	4659      	mov	r1, fp
 8003bde:	00cb      	lsls	r3, r1, #3
 8003be0:	4651      	mov	r1, sl
 8003be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be6:	4651      	mov	r1, sl
 8003be8:	00ca      	lsls	r2, r1, #3
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	eb42 0303 	adc.w	r3, r2, r3
 8003c00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c18:	460b      	mov	r3, r1
 8003c1a:	18db      	adds	r3, r3, r3
 8003c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c1e:	4613      	mov	r3, r2
 8003c20:	eb42 0303 	adc.w	r3, r2, r3
 8003c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c2e:	f7fc fb27 	bl	8000280 <__aeabi_uldivmod>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <UART_SetConfig+0x2d4>)
 8003c38:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	2164      	movs	r1, #100	@ 0x64
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	3332      	adds	r3, #50	@ 0x32
 8003c4a:	4a08      	ldr	r2, [pc, #32]	@ (8003c6c <UART_SetConfig+0x2d4>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	f003 0207 	and.w	r2, r3, #7
 8003c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4422      	add	r2, r4
 8003c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c60:	e106      	b.n	8003e70 <UART_SetConfig+0x4d8>
 8003c62:	bf00      	nop
 8003c64:	40011000 	.word	0x40011000
 8003c68:	40011400 	.word	0x40011400
 8003c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c82:	4642      	mov	r2, r8
 8003c84:	464b      	mov	r3, r9
 8003c86:	1891      	adds	r1, r2, r2
 8003c88:	6239      	str	r1, [r7, #32]
 8003c8a:	415b      	adcs	r3, r3
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c92:	4641      	mov	r1, r8
 8003c94:	1854      	adds	r4, r2, r1
 8003c96:	4649      	mov	r1, r9
 8003c98:	eb43 0501 	adc.w	r5, r3, r1
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	00eb      	lsls	r3, r5, #3
 8003ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003caa:	00e2      	lsls	r2, r4, #3
 8003cac:	4614      	mov	r4, r2
 8003cae:	461d      	mov	r5, r3
 8003cb0:	4643      	mov	r3, r8
 8003cb2:	18e3      	adds	r3, r4, r3
 8003cb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cb8:	464b      	mov	r3, r9
 8003cba:	eb45 0303 	adc.w	r3, r5, r3
 8003cbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cde:	4629      	mov	r1, r5
 8003ce0:	008b      	lsls	r3, r1, #2
 8003ce2:	4621      	mov	r1, r4
 8003ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ce8:	4621      	mov	r1, r4
 8003cea:	008a      	lsls	r2, r1, #2
 8003cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cf0:	f7fc fac6 	bl	8000280 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4b60      	ldr	r3, [pc, #384]	@ (8003e7c <UART_SetConfig+0x4e4>)
 8003cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	011c      	lsls	r4, r3, #4
 8003d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d14:	4642      	mov	r2, r8
 8003d16:	464b      	mov	r3, r9
 8003d18:	1891      	adds	r1, r2, r2
 8003d1a:	61b9      	str	r1, [r7, #24]
 8003d1c:	415b      	adcs	r3, r3
 8003d1e:	61fb      	str	r3, [r7, #28]
 8003d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d24:	4641      	mov	r1, r8
 8003d26:	1851      	adds	r1, r2, r1
 8003d28:	6139      	str	r1, [r7, #16]
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	414b      	adcs	r3, r1
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	f04f 0300 	mov.w	r3, #0
 8003d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d3c:	4659      	mov	r1, fp
 8003d3e:	00cb      	lsls	r3, r1, #3
 8003d40:	4651      	mov	r1, sl
 8003d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d46:	4651      	mov	r1, sl
 8003d48:	00ca      	lsls	r2, r1, #3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4603      	mov	r3, r0
 8003d50:	4642      	mov	r2, r8
 8003d52:	189b      	adds	r3, r3, r2
 8003d54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d58:	464b      	mov	r3, r9
 8003d5a:	460a      	mov	r2, r1
 8003d5c:	eb42 0303 	adc.w	r3, r2, r3
 8003d60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d70:	f04f 0200 	mov.w	r2, #0
 8003d74:	f04f 0300 	mov.w	r3, #0
 8003d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	008b      	lsls	r3, r1, #2
 8003d80:	4641      	mov	r1, r8
 8003d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d86:	4641      	mov	r1, r8
 8003d88:	008a      	lsls	r2, r1, #2
 8003d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d8e:	f7fc fa77 	bl	8000280 <__aeabi_uldivmod>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4611      	mov	r1, r2
 8003d98:	4b38      	ldr	r3, [pc, #224]	@ (8003e7c <UART_SetConfig+0x4e4>)
 8003d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	2264      	movs	r2, #100	@ 0x64
 8003da2:	fb02 f303 	mul.w	r3, r2, r3
 8003da6:	1acb      	subs	r3, r1, r3
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	3332      	adds	r3, #50	@ 0x32
 8003dac:	4a33      	ldr	r2, [pc, #204]	@ (8003e7c <UART_SetConfig+0x4e4>)
 8003dae:	fba2 2303 	umull	r2, r3, r2, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003db8:	441c      	add	r4, r3
 8003dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003dc8:	4642      	mov	r2, r8
 8003dca:	464b      	mov	r3, r9
 8003dcc:	1891      	adds	r1, r2, r2
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	415b      	adcs	r3, r3
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd8:	4641      	mov	r1, r8
 8003dda:	1851      	adds	r1, r2, r1
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	4649      	mov	r1, r9
 8003de0:	414b      	adcs	r3, r1
 8003de2:	607b      	str	r3, [r7, #4]
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003df0:	4659      	mov	r1, fp
 8003df2:	00cb      	lsls	r3, r1, #3
 8003df4:	4651      	mov	r1, sl
 8003df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dfa:	4651      	mov	r1, sl
 8003dfc:	00ca      	lsls	r2, r1, #3
 8003dfe:	4610      	mov	r0, r2
 8003e00:	4619      	mov	r1, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	4642      	mov	r2, r8
 8003e06:	189b      	adds	r3, r3, r2
 8003e08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	460a      	mov	r2, r1
 8003e0e:	eb42 0303 	adc.w	r3, r2, r3
 8003e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	008b      	lsls	r3, r1, #2
 8003e30:	4641      	mov	r1, r8
 8003e32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e36:	4641      	mov	r1, r8
 8003e38:	008a      	lsls	r2, r1, #2
 8003e3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e3e:	f7fc fa1f 	bl	8000280 <__aeabi_uldivmod>
 8003e42:	4602      	mov	r2, r0
 8003e44:	460b      	mov	r3, r1
 8003e46:	4b0d      	ldr	r3, [pc, #52]	@ (8003e7c <UART_SetConfig+0x4e4>)
 8003e48:	fba3 1302 	umull	r1, r3, r3, r2
 8003e4c:	095b      	lsrs	r3, r3, #5
 8003e4e:	2164      	movs	r1, #100	@ 0x64
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	3332      	adds	r3, #50	@ 0x32
 8003e5a:	4a08      	ldr	r2, [pc, #32]	@ (8003e7c <UART_SetConfig+0x4e4>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	095b      	lsrs	r3, r3, #5
 8003e62:	f003 020f 	and.w	r2, r3, #15
 8003e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4422      	add	r2, r4
 8003e6e:	609a      	str	r2, [r3, #8]
}
 8003e70:	bf00      	nop
 8003e72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e76:	46bd      	mov	sp, r7
 8003e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e7c:	51eb851f 	.word	0x51eb851f

08003e80 <std>:
 8003e80:	2300      	movs	r3, #0
 8003e82:	b510      	push	{r4, lr}
 8003e84:	4604      	mov	r4, r0
 8003e86:	e9c0 3300 	strd	r3, r3, [r0]
 8003e8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e8e:	6083      	str	r3, [r0, #8]
 8003e90:	8181      	strh	r1, [r0, #12]
 8003e92:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e94:	81c2      	strh	r2, [r0, #14]
 8003e96:	6183      	str	r3, [r0, #24]
 8003e98:	4619      	mov	r1, r3
 8003e9a:	2208      	movs	r2, #8
 8003e9c:	305c      	adds	r0, #92	@ 0x5c
 8003e9e:	f000 f906 	bl	80040ae <memset>
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <std+0x58>)
 8003ea4:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <std+0x5c>)
 8003ea8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <std+0x60>)
 8003eac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003eae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee4 <std+0x64>)
 8003eb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee8 <std+0x68>)
 8003eb4:	6224      	str	r4, [r4, #32]
 8003eb6:	429c      	cmp	r4, r3
 8003eb8:	d006      	beq.n	8003ec8 <std+0x48>
 8003eba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ebe:	4294      	cmp	r4, r2
 8003ec0:	d002      	beq.n	8003ec8 <std+0x48>
 8003ec2:	33d0      	adds	r3, #208	@ 0xd0
 8003ec4:	429c      	cmp	r4, r3
 8003ec6:	d105      	bne.n	8003ed4 <std+0x54>
 8003ec8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed0:	f000 b966 	b.w	80041a0 <__retarget_lock_init_recursive>
 8003ed4:	bd10      	pop	{r4, pc}
 8003ed6:	bf00      	nop
 8003ed8:	08004029 	.word	0x08004029
 8003edc:	0800404b 	.word	0x0800404b
 8003ee0:	08004083 	.word	0x08004083
 8003ee4:	080040a7 	.word	0x080040a7
 8003ee8:	2000016c 	.word	0x2000016c

08003eec <stdio_exit_handler>:
 8003eec:	4a02      	ldr	r2, [pc, #8]	@ (8003ef8 <stdio_exit_handler+0xc>)
 8003eee:	4903      	ldr	r1, [pc, #12]	@ (8003efc <stdio_exit_handler+0x10>)
 8003ef0:	4803      	ldr	r0, [pc, #12]	@ (8003f00 <stdio_exit_handler+0x14>)
 8003ef2:	f000 b869 	b.w	8003fc8 <_fwalk_sglue>
 8003ef6:	bf00      	nop
 8003ef8:	2000000c 	.word	0x2000000c
 8003efc:	08004a3d 	.word	0x08004a3d
 8003f00:	2000001c 	.word	0x2000001c

08003f04 <cleanup_stdio>:
 8003f04:	6841      	ldr	r1, [r0, #4]
 8003f06:	4b0c      	ldr	r3, [pc, #48]	@ (8003f38 <cleanup_stdio+0x34>)
 8003f08:	4299      	cmp	r1, r3
 8003f0a:	b510      	push	{r4, lr}
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	d001      	beq.n	8003f14 <cleanup_stdio+0x10>
 8003f10:	f000 fd94 	bl	8004a3c <_fflush_r>
 8003f14:	68a1      	ldr	r1, [r4, #8]
 8003f16:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <cleanup_stdio+0x38>)
 8003f18:	4299      	cmp	r1, r3
 8003f1a:	d002      	beq.n	8003f22 <cleanup_stdio+0x1e>
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	f000 fd8d 	bl	8004a3c <_fflush_r>
 8003f22:	68e1      	ldr	r1, [r4, #12]
 8003f24:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <cleanup_stdio+0x3c>)
 8003f26:	4299      	cmp	r1, r3
 8003f28:	d004      	beq.n	8003f34 <cleanup_stdio+0x30>
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f30:	f000 bd84 	b.w	8004a3c <_fflush_r>
 8003f34:	bd10      	pop	{r4, pc}
 8003f36:	bf00      	nop
 8003f38:	2000016c 	.word	0x2000016c
 8003f3c:	200001d4 	.word	0x200001d4
 8003f40:	2000023c 	.word	0x2000023c

08003f44 <global_stdio_init.part.0>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	4b0b      	ldr	r3, [pc, #44]	@ (8003f74 <global_stdio_init.part.0+0x30>)
 8003f48:	4c0b      	ldr	r4, [pc, #44]	@ (8003f78 <global_stdio_init.part.0+0x34>)
 8003f4a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f7c <global_stdio_init.part.0+0x38>)
 8003f4c:	601a      	str	r2, [r3, #0]
 8003f4e:	4620      	mov	r0, r4
 8003f50:	2200      	movs	r2, #0
 8003f52:	2104      	movs	r1, #4
 8003f54:	f7ff ff94 	bl	8003e80 <std>
 8003f58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	2109      	movs	r1, #9
 8003f60:	f7ff ff8e 	bl	8003e80 <std>
 8003f64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f68:	2202      	movs	r2, #2
 8003f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f6e:	2112      	movs	r1, #18
 8003f70:	f7ff bf86 	b.w	8003e80 <std>
 8003f74:	200002a4 	.word	0x200002a4
 8003f78:	2000016c 	.word	0x2000016c
 8003f7c:	08003eed 	.word	0x08003eed

08003f80 <__sfp_lock_acquire>:
 8003f80:	4801      	ldr	r0, [pc, #4]	@ (8003f88 <__sfp_lock_acquire+0x8>)
 8003f82:	f000 b90e 	b.w	80041a2 <__retarget_lock_acquire_recursive>
 8003f86:	bf00      	nop
 8003f88:	200002ad 	.word	0x200002ad

08003f8c <__sfp_lock_release>:
 8003f8c:	4801      	ldr	r0, [pc, #4]	@ (8003f94 <__sfp_lock_release+0x8>)
 8003f8e:	f000 b909 	b.w	80041a4 <__retarget_lock_release_recursive>
 8003f92:	bf00      	nop
 8003f94:	200002ad 	.word	0x200002ad

08003f98 <__sinit>:
 8003f98:	b510      	push	{r4, lr}
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	f7ff fff0 	bl	8003f80 <__sfp_lock_acquire>
 8003fa0:	6a23      	ldr	r3, [r4, #32]
 8003fa2:	b11b      	cbz	r3, 8003fac <__sinit+0x14>
 8003fa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa8:	f7ff bff0 	b.w	8003f8c <__sfp_lock_release>
 8003fac:	4b04      	ldr	r3, [pc, #16]	@ (8003fc0 <__sinit+0x28>)
 8003fae:	6223      	str	r3, [r4, #32]
 8003fb0:	4b04      	ldr	r3, [pc, #16]	@ (8003fc4 <__sinit+0x2c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1f5      	bne.n	8003fa4 <__sinit+0xc>
 8003fb8:	f7ff ffc4 	bl	8003f44 <global_stdio_init.part.0>
 8003fbc:	e7f2      	b.n	8003fa4 <__sinit+0xc>
 8003fbe:	bf00      	nop
 8003fc0:	08003f05 	.word	0x08003f05
 8003fc4:	200002a4 	.word	0x200002a4

08003fc8 <_fwalk_sglue>:
 8003fc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fcc:	4607      	mov	r7, r0
 8003fce:	4688      	mov	r8, r1
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	2600      	movs	r6, #0
 8003fd4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fd8:	f1b9 0901 	subs.w	r9, r9, #1
 8003fdc:	d505      	bpl.n	8003fea <_fwalk_sglue+0x22>
 8003fde:	6824      	ldr	r4, [r4, #0]
 8003fe0:	2c00      	cmp	r4, #0
 8003fe2:	d1f7      	bne.n	8003fd4 <_fwalk_sglue+0xc>
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003fea:	89ab      	ldrh	r3, [r5, #12]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d907      	bls.n	8004000 <_fwalk_sglue+0x38>
 8003ff0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	d003      	beq.n	8004000 <_fwalk_sglue+0x38>
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4638      	mov	r0, r7
 8003ffc:	47c0      	blx	r8
 8003ffe:	4306      	orrs	r6, r0
 8004000:	3568      	adds	r5, #104	@ 0x68
 8004002:	e7e9      	b.n	8003fd8 <_fwalk_sglue+0x10>

08004004 <iprintf>:
 8004004:	b40f      	push	{r0, r1, r2, r3}
 8004006:	b507      	push	{r0, r1, r2, lr}
 8004008:	4906      	ldr	r1, [pc, #24]	@ (8004024 <iprintf+0x20>)
 800400a:	ab04      	add	r3, sp, #16
 800400c:	6808      	ldr	r0, [r1, #0]
 800400e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004012:	6881      	ldr	r1, [r0, #8]
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	f000 f9e9 	bl	80043ec <_vfiprintf_r>
 800401a:	b003      	add	sp, #12
 800401c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004020:	b004      	add	sp, #16
 8004022:	4770      	bx	lr
 8004024:	20000018 	.word	0x20000018

08004028 <__sread>:
 8004028:	b510      	push	{r4, lr}
 800402a:	460c      	mov	r4, r1
 800402c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004030:	f000 f868 	bl	8004104 <_read_r>
 8004034:	2800      	cmp	r0, #0
 8004036:	bfab      	itete	ge
 8004038:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800403a:	89a3      	ldrhlt	r3, [r4, #12]
 800403c:	181b      	addge	r3, r3, r0
 800403e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004042:	bfac      	ite	ge
 8004044:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004046:	81a3      	strhlt	r3, [r4, #12]
 8004048:	bd10      	pop	{r4, pc}

0800404a <__swrite>:
 800404a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800404e:	461f      	mov	r7, r3
 8004050:	898b      	ldrh	r3, [r1, #12]
 8004052:	05db      	lsls	r3, r3, #23
 8004054:	4605      	mov	r5, r0
 8004056:	460c      	mov	r4, r1
 8004058:	4616      	mov	r6, r2
 800405a:	d505      	bpl.n	8004068 <__swrite+0x1e>
 800405c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004060:	2302      	movs	r3, #2
 8004062:	2200      	movs	r2, #0
 8004064:	f000 f83c 	bl	80040e0 <_lseek_r>
 8004068:	89a3      	ldrh	r3, [r4, #12]
 800406a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800406e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004072:	81a3      	strh	r3, [r4, #12]
 8004074:	4632      	mov	r2, r6
 8004076:	463b      	mov	r3, r7
 8004078:	4628      	mov	r0, r5
 800407a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800407e:	f000 b853 	b.w	8004128 <_write_r>

08004082 <__sseek>:
 8004082:	b510      	push	{r4, lr}
 8004084:	460c      	mov	r4, r1
 8004086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800408a:	f000 f829 	bl	80040e0 <_lseek_r>
 800408e:	1c43      	adds	r3, r0, #1
 8004090:	89a3      	ldrh	r3, [r4, #12]
 8004092:	bf15      	itete	ne
 8004094:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004096:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800409a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800409e:	81a3      	strheq	r3, [r4, #12]
 80040a0:	bf18      	it	ne
 80040a2:	81a3      	strhne	r3, [r4, #12]
 80040a4:	bd10      	pop	{r4, pc}

080040a6 <__sclose>:
 80040a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040aa:	f000 b809 	b.w	80040c0 <_close_r>

080040ae <memset>:
 80040ae:	4402      	add	r2, r0
 80040b0:	4603      	mov	r3, r0
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d100      	bne.n	80040b8 <memset+0xa>
 80040b6:	4770      	bx	lr
 80040b8:	f803 1b01 	strb.w	r1, [r3], #1
 80040bc:	e7f9      	b.n	80040b2 <memset+0x4>
	...

080040c0 <_close_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4d06      	ldr	r5, [pc, #24]	@ (80040dc <_close_r+0x1c>)
 80040c4:	2300      	movs	r3, #0
 80040c6:	4604      	mov	r4, r0
 80040c8:	4608      	mov	r0, r1
 80040ca:	602b      	str	r3, [r5, #0]
 80040cc:	f7fc fcbd 	bl	8000a4a <_close>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_close_r+0x1a>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_close_r+0x1a>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	200002a8 	.word	0x200002a8

080040e0 <_lseek_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4d07      	ldr	r5, [pc, #28]	@ (8004100 <_lseek_r+0x20>)
 80040e4:	4604      	mov	r4, r0
 80040e6:	4608      	mov	r0, r1
 80040e8:	4611      	mov	r1, r2
 80040ea:	2200      	movs	r2, #0
 80040ec:	602a      	str	r2, [r5, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	f7fc fcd2 	bl	8000a98 <_lseek>
 80040f4:	1c43      	adds	r3, r0, #1
 80040f6:	d102      	bne.n	80040fe <_lseek_r+0x1e>
 80040f8:	682b      	ldr	r3, [r5, #0]
 80040fa:	b103      	cbz	r3, 80040fe <_lseek_r+0x1e>
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	bd38      	pop	{r3, r4, r5, pc}
 8004100:	200002a8 	.word	0x200002a8

08004104 <_read_r>:
 8004104:	b538      	push	{r3, r4, r5, lr}
 8004106:	4d07      	ldr	r5, [pc, #28]	@ (8004124 <_read_r+0x20>)
 8004108:	4604      	mov	r4, r0
 800410a:	4608      	mov	r0, r1
 800410c:	4611      	mov	r1, r2
 800410e:	2200      	movs	r2, #0
 8004110:	602a      	str	r2, [r5, #0]
 8004112:	461a      	mov	r2, r3
 8004114:	f7fc fc7c 	bl	8000a10 <_read>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_read_r+0x1e>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_read_r+0x1e>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	200002a8 	.word	0x200002a8

08004128 <_write_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	4d07      	ldr	r5, [pc, #28]	@ (8004148 <_write_r+0x20>)
 800412c:	4604      	mov	r4, r0
 800412e:	4608      	mov	r0, r1
 8004130:	4611      	mov	r1, r2
 8004132:	2200      	movs	r2, #0
 8004134:	602a      	str	r2, [r5, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	f7fc fa94 	bl	8000664 <_write>
 800413c:	1c43      	adds	r3, r0, #1
 800413e:	d102      	bne.n	8004146 <_write_r+0x1e>
 8004140:	682b      	ldr	r3, [r5, #0]
 8004142:	b103      	cbz	r3, 8004146 <_write_r+0x1e>
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	bd38      	pop	{r3, r4, r5, pc}
 8004148:	200002a8 	.word	0x200002a8

0800414c <__errno>:
 800414c:	4b01      	ldr	r3, [pc, #4]	@ (8004154 <__errno+0x8>)
 800414e:	6818      	ldr	r0, [r3, #0]
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000018 	.word	0x20000018

08004158 <__libc_init_array>:
 8004158:	b570      	push	{r4, r5, r6, lr}
 800415a:	4d0d      	ldr	r5, [pc, #52]	@ (8004190 <__libc_init_array+0x38>)
 800415c:	4c0d      	ldr	r4, [pc, #52]	@ (8004194 <__libc_init_array+0x3c>)
 800415e:	1b64      	subs	r4, r4, r5
 8004160:	10a4      	asrs	r4, r4, #2
 8004162:	2600      	movs	r6, #0
 8004164:	42a6      	cmp	r6, r4
 8004166:	d109      	bne.n	800417c <__libc_init_array+0x24>
 8004168:	4d0b      	ldr	r5, [pc, #44]	@ (8004198 <__libc_init_array+0x40>)
 800416a:	4c0c      	ldr	r4, [pc, #48]	@ (800419c <__libc_init_array+0x44>)
 800416c:	f000 fdb6 	bl	8004cdc <_init>
 8004170:	1b64      	subs	r4, r4, r5
 8004172:	10a4      	asrs	r4, r4, #2
 8004174:	2600      	movs	r6, #0
 8004176:	42a6      	cmp	r6, r4
 8004178:	d105      	bne.n	8004186 <__libc_init_array+0x2e>
 800417a:	bd70      	pop	{r4, r5, r6, pc}
 800417c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004180:	4798      	blx	r3
 8004182:	3601      	adds	r6, #1
 8004184:	e7ee      	b.n	8004164 <__libc_init_array+0xc>
 8004186:	f855 3b04 	ldr.w	r3, [r5], #4
 800418a:	4798      	blx	r3
 800418c:	3601      	adds	r6, #1
 800418e:	e7f2      	b.n	8004176 <__libc_init_array+0x1e>
 8004190:	08004d5c 	.word	0x08004d5c
 8004194:	08004d5c 	.word	0x08004d5c
 8004198:	08004d5c 	.word	0x08004d5c
 800419c:	08004d60 	.word	0x08004d60

080041a0 <__retarget_lock_init_recursive>:
 80041a0:	4770      	bx	lr

080041a2 <__retarget_lock_acquire_recursive>:
 80041a2:	4770      	bx	lr

080041a4 <__retarget_lock_release_recursive>:
 80041a4:	4770      	bx	lr
	...

080041a8 <_free_r>:
 80041a8:	b538      	push	{r3, r4, r5, lr}
 80041aa:	4605      	mov	r5, r0
 80041ac:	2900      	cmp	r1, #0
 80041ae:	d041      	beq.n	8004234 <_free_r+0x8c>
 80041b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041b4:	1f0c      	subs	r4, r1, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	bfb8      	it	lt
 80041ba:	18e4      	addlt	r4, r4, r3
 80041bc:	f000 f8e0 	bl	8004380 <__malloc_lock>
 80041c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004238 <_free_r+0x90>)
 80041c2:	6813      	ldr	r3, [r2, #0]
 80041c4:	b933      	cbnz	r3, 80041d4 <_free_r+0x2c>
 80041c6:	6063      	str	r3, [r4, #4]
 80041c8:	6014      	str	r4, [r2, #0]
 80041ca:	4628      	mov	r0, r5
 80041cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041d0:	f000 b8dc 	b.w	800438c <__malloc_unlock>
 80041d4:	42a3      	cmp	r3, r4
 80041d6:	d908      	bls.n	80041ea <_free_r+0x42>
 80041d8:	6820      	ldr	r0, [r4, #0]
 80041da:	1821      	adds	r1, r4, r0
 80041dc:	428b      	cmp	r3, r1
 80041de:	bf01      	itttt	eq
 80041e0:	6819      	ldreq	r1, [r3, #0]
 80041e2:	685b      	ldreq	r3, [r3, #4]
 80041e4:	1809      	addeq	r1, r1, r0
 80041e6:	6021      	streq	r1, [r4, #0]
 80041e8:	e7ed      	b.n	80041c6 <_free_r+0x1e>
 80041ea:	461a      	mov	r2, r3
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	b10b      	cbz	r3, 80041f4 <_free_r+0x4c>
 80041f0:	42a3      	cmp	r3, r4
 80041f2:	d9fa      	bls.n	80041ea <_free_r+0x42>
 80041f4:	6811      	ldr	r1, [r2, #0]
 80041f6:	1850      	adds	r0, r2, r1
 80041f8:	42a0      	cmp	r0, r4
 80041fa:	d10b      	bne.n	8004214 <_free_r+0x6c>
 80041fc:	6820      	ldr	r0, [r4, #0]
 80041fe:	4401      	add	r1, r0
 8004200:	1850      	adds	r0, r2, r1
 8004202:	4283      	cmp	r3, r0
 8004204:	6011      	str	r1, [r2, #0]
 8004206:	d1e0      	bne.n	80041ca <_free_r+0x22>
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	6053      	str	r3, [r2, #4]
 800420e:	4408      	add	r0, r1
 8004210:	6010      	str	r0, [r2, #0]
 8004212:	e7da      	b.n	80041ca <_free_r+0x22>
 8004214:	d902      	bls.n	800421c <_free_r+0x74>
 8004216:	230c      	movs	r3, #12
 8004218:	602b      	str	r3, [r5, #0]
 800421a:	e7d6      	b.n	80041ca <_free_r+0x22>
 800421c:	6820      	ldr	r0, [r4, #0]
 800421e:	1821      	adds	r1, r4, r0
 8004220:	428b      	cmp	r3, r1
 8004222:	bf04      	itt	eq
 8004224:	6819      	ldreq	r1, [r3, #0]
 8004226:	685b      	ldreq	r3, [r3, #4]
 8004228:	6063      	str	r3, [r4, #4]
 800422a:	bf04      	itt	eq
 800422c:	1809      	addeq	r1, r1, r0
 800422e:	6021      	streq	r1, [r4, #0]
 8004230:	6054      	str	r4, [r2, #4]
 8004232:	e7ca      	b.n	80041ca <_free_r+0x22>
 8004234:	bd38      	pop	{r3, r4, r5, pc}
 8004236:	bf00      	nop
 8004238:	200002b4 	.word	0x200002b4

0800423c <sbrk_aligned>:
 800423c:	b570      	push	{r4, r5, r6, lr}
 800423e:	4e0f      	ldr	r6, [pc, #60]	@ (800427c <sbrk_aligned+0x40>)
 8004240:	460c      	mov	r4, r1
 8004242:	6831      	ldr	r1, [r6, #0]
 8004244:	4605      	mov	r5, r0
 8004246:	b911      	cbnz	r1, 800424e <sbrk_aligned+0x12>
 8004248:	f000 fcb4 	bl	8004bb4 <_sbrk_r>
 800424c:	6030      	str	r0, [r6, #0]
 800424e:	4621      	mov	r1, r4
 8004250:	4628      	mov	r0, r5
 8004252:	f000 fcaf 	bl	8004bb4 <_sbrk_r>
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	d103      	bne.n	8004262 <sbrk_aligned+0x26>
 800425a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800425e:	4620      	mov	r0, r4
 8004260:	bd70      	pop	{r4, r5, r6, pc}
 8004262:	1cc4      	adds	r4, r0, #3
 8004264:	f024 0403 	bic.w	r4, r4, #3
 8004268:	42a0      	cmp	r0, r4
 800426a:	d0f8      	beq.n	800425e <sbrk_aligned+0x22>
 800426c:	1a21      	subs	r1, r4, r0
 800426e:	4628      	mov	r0, r5
 8004270:	f000 fca0 	bl	8004bb4 <_sbrk_r>
 8004274:	3001      	adds	r0, #1
 8004276:	d1f2      	bne.n	800425e <sbrk_aligned+0x22>
 8004278:	e7ef      	b.n	800425a <sbrk_aligned+0x1e>
 800427a:	bf00      	nop
 800427c:	200002b0 	.word	0x200002b0

08004280 <_malloc_r>:
 8004280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004284:	1ccd      	adds	r5, r1, #3
 8004286:	f025 0503 	bic.w	r5, r5, #3
 800428a:	3508      	adds	r5, #8
 800428c:	2d0c      	cmp	r5, #12
 800428e:	bf38      	it	cc
 8004290:	250c      	movcc	r5, #12
 8004292:	2d00      	cmp	r5, #0
 8004294:	4606      	mov	r6, r0
 8004296:	db01      	blt.n	800429c <_malloc_r+0x1c>
 8004298:	42a9      	cmp	r1, r5
 800429a:	d904      	bls.n	80042a6 <_malloc_r+0x26>
 800429c:	230c      	movs	r3, #12
 800429e:	6033      	str	r3, [r6, #0]
 80042a0:	2000      	movs	r0, #0
 80042a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800437c <_malloc_r+0xfc>
 80042aa:	f000 f869 	bl	8004380 <__malloc_lock>
 80042ae:	f8d8 3000 	ldr.w	r3, [r8]
 80042b2:	461c      	mov	r4, r3
 80042b4:	bb44      	cbnz	r4, 8004308 <_malloc_r+0x88>
 80042b6:	4629      	mov	r1, r5
 80042b8:	4630      	mov	r0, r6
 80042ba:	f7ff ffbf 	bl	800423c <sbrk_aligned>
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	4604      	mov	r4, r0
 80042c2:	d158      	bne.n	8004376 <_malloc_r+0xf6>
 80042c4:	f8d8 4000 	ldr.w	r4, [r8]
 80042c8:	4627      	mov	r7, r4
 80042ca:	2f00      	cmp	r7, #0
 80042cc:	d143      	bne.n	8004356 <_malloc_r+0xd6>
 80042ce:	2c00      	cmp	r4, #0
 80042d0:	d04b      	beq.n	800436a <_malloc_r+0xea>
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	4639      	mov	r1, r7
 80042d6:	4630      	mov	r0, r6
 80042d8:	eb04 0903 	add.w	r9, r4, r3
 80042dc:	f000 fc6a 	bl	8004bb4 <_sbrk_r>
 80042e0:	4581      	cmp	r9, r0
 80042e2:	d142      	bne.n	800436a <_malloc_r+0xea>
 80042e4:	6821      	ldr	r1, [r4, #0]
 80042e6:	1a6d      	subs	r5, r5, r1
 80042e8:	4629      	mov	r1, r5
 80042ea:	4630      	mov	r0, r6
 80042ec:	f7ff ffa6 	bl	800423c <sbrk_aligned>
 80042f0:	3001      	adds	r0, #1
 80042f2:	d03a      	beq.n	800436a <_malloc_r+0xea>
 80042f4:	6823      	ldr	r3, [r4, #0]
 80042f6:	442b      	add	r3, r5
 80042f8:	6023      	str	r3, [r4, #0]
 80042fa:	f8d8 3000 	ldr.w	r3, [r8]
 80042fe:	685a      	ldr	r2, [r3, #4]
 8004300:	bb62      	cbnz	r2, 800435c <_malloc_r+0xdc>
 8004302:	f8c8 7000 	str.w	r7, [r8]
 8004306:	e00f      	b.n	8004328 <_malloc_r+0xa8>
 8004308:	6822      	ldr	r2, [r4, #0]
 800430a:	1b52      	subs	r2, r2, r5
 800430c:	d420      	bmi.n	8004350 <_malloc_r+0xd0>
 800430e:	2a0b      	cmp	r2, #11
 8004310:	d917      	bls.n	8004342 <_malloc_r+0xc2>
 8004312:	1961      	adds	r1, r4, r5
 8004314:	42a3      	cmp	r3, r4
 8004316:	6025      	str	r5, [r4, #0]
 8004318:	bf18      	it	ne
 800431a:	6059      	strne	r1, [r3, #4]
 800431c:	6863      	ldr	r3, [r4, #4]
 800431e:	bf08      	it	eq
 8004320:	f8c8 1000 	streq.w	r1, [r8]
 8004324:	5162      	str	r2, [r4, r5]
 8004326:	604b      	str	r3, [r1, #4]
 8004328:	4630      	mov	r0, r6
 800432a:	f000 f82f 	bl	800438c <__malloc_unlock>
 800432e:	f104 000b 	add.w	r0, r4, #11
 8004332:	1d23      	adds	r3, r4, #4
 8004334:	f020 0007 	bic.w	r0, r0, #7
 8004338:	1ac2      	subs	r2, r0, r3
 800433a:	bf1c      	itt	ne
 800433c:	1a1b      	subne	r3, r3, r0
 800433e:	50a3      	strne	r3, [r4, r2]
 8004340:	e7af      	b.n	80042a2 <_malloc_r+0x22>
 8004342:	6862      	ldr	r2, [r4, #4]
 8004344:	42a3      	cmp	r3, r4
 8004346:	bf0c      	ite	eq
 8004348:	f8c8 2000 	streq.w	r2, [r8]
 800434c:	605a      	strne	r2, [r3, #4]
 800434e:	e7eb      	b.n	8004328 <_malloc_r+0xa8>
 8004350:	4623      	mov	r3, r4
 8004352:	6864      	ldr	r4, [r4, #4]
 8004354:	e7ae      	b.n	80042b4 <_malloc_r+0x34>
 8004356:	463c      	mov	r4, r7
 8004358:	687f      	ldr	r7, [r7, #4]
 800435a:	e7b6      	b.n	80042ca <_malloc_r+0x4a>
 800435c:	461a      	mov	r2, r3
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	42a3      	cmp	r3, r4
 8004362:	d1fb      	bne.n	800435c <_malloc_r+0xdc>
 8004364:	2300      	movs	r3, #0
 8004366:	6053      	str	r3, [r2, #4]
 8004368:	e7de      	b.n	8004328 <_malloc_r+0xa8>
 800436a:	230c      	movs	r3, #12
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	4630      	mov	r0, r6
 8004370:	f000 f80c 	bl	800438c <__malloc_unlock>
 8004374:	e794      	b.n	80042a0 <_malloc_r+0x20>
 8004376:	6005      	str	r5, [r0, #0]
 8004378:	e7d6      	b.n	8004328 <_malloc_r+0xa8>
 800437a:	bf00      	nop
 800437c:	200002b4 	.word	0x200002b4

08004380 <__malloc_lock>:
 8004380:	4801      	ldr	r0, [pc, #4]	@ (8004388 <__malloc_lock+0x8>)
 8004382:	f7ff bf0e 	b.w	80041a2 <__retarget_lock_acquire_recursive>
 8004386:	bf00      	nop
 8004388:	200002ac 	.word	0x200002ac

0800438c <__malloc_unlock>:
 800438c:	4801      	ldr	r0, [pc, #4]	@ (8004394 <__malloc_unlock+0x8>)
 800438e:	f7ff bf09 	b.w	80041a4 <__retarget_lock_release_recursive>
 8004392:	bf00      	nop
 8004394:	200002ac 	.word	0x200002ac

08004398 <__sfputc_r>:
 8004398:	6893      	ldr	r3, [r2, #8]
 800439a:	3b01      	subs	r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	b410      	push	{r4}
 80043a0:	6093      	str	r3, [r2, #8]
 80043a2:	da08      	bge.n	80043b6 <__sfputc_r+0x1e>
 80043a4:	6994      	ldr	r4, [r2, #24]
 80043a6:	42a3      	cmp	r3, r4
 80043a8:	db01      	blt.n	80043ae <__sfputc_r+0x16>
 80043aa:	290a      	cmp	r1, #10
 80043ac:	d103      	bne.n	80043b6 <__sfputc_r+0x1e>
 80043ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043b2:	f000 bb6b 	b.w	8004a8c <__swbuf_r>
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	1c58      	adds	r0, r3, #1
 80043ba:	6010      	str	r0, [r2, #0]
 80043bc:	7019      	strb	r1, [r3, #0]
 80043be:	4608      	mov	r0, r1
 80043c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <__sfputs_r>:
 80043c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c8:	4606      	mov	r6, r0
 80043ca:	460f      	mov	r7, r1
 80043cc:	4614      	mov	r4, r2
 80043ce:	18d5      	adds	r5, r2, r3
 80043d0:	42ac      	cmp	r4, r5
 80043d2:	d101      	bne.n	80043d8 <__sfputs_r+0x12>
 80043d4:	2000      	movs	r0, #0
 80043d6:	e007      	b.n	80043e8 <__sfputs_r+0x22>
 80043d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043dc:	463a      	mov	r2, r7
 80043de:	4630      	mov	r0, r6
 80043e0:	f7ff ffda 	bl	8004398 <__sfputc_r>
 80043e4:	1c43      	adds	r3, r0, #1
 80043e6:	d1f3      	bne.n	80043d0 <__sfputs_r+0xa>
 80043e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080043ec <_vfiprintf_r>:
 80043ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043f0:	460d      	mov	r5, r1
 80043f2:	b09d      	sub	sp, #116	@ 0x74
 80043f4:	4614      	mov	r4, r2
 80043f6:	4698      	mov	r8, r3
 80043f8:	4606      	mov	r6, r0
 80043fa:	b118      	cbz	r0, 8004404 <_vfiprintf_r+0x18>
 80043fc:	6a03      	ldr	r3, [r0, #32]
 80043fe:	b90b      	cbnz	r3, 8004404 <_vfiprintf_r+0x18>
 8004400:	f7ff fdca 	bl	8003f98 <__sinit>
 8004404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004406:	07d9      	lsls	r1, r3, #31
 8004408:	d405      	bmi.n	8004416 <_vfiprintf_r+0x2a>
 800440a:	89ab      	ldrh	r3, [r5, #12]
 800440c:	059a      	lsls	r2, r3, #22
 800440e:	d402      	bmi.n	8004416 <_vfiprintf_r+0x2a>
 8004410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004412:	f7ff fec6 	bl	80041a2 <__retarget_lock_acquire_recursive>
 8004416:	89ab      	ldrh	r3, [r5, #12]
 8004418:	071b      	lsls	r3, r3, #28
 800441a:	d501      	bpl.n	8004420 <_vfiprintf_r+0x34>
 800441c:	692b      	ldr	r3, [r5, #16]
 800441e:	b99b      	cbnz	r3, 8004448 <_vfiprintf_r+0x5c>
 8004420:	4629      	mov	r1, r5
 8004422:	4630      	mov	r0, r6
 8004424:	f000 fb70 	bl	8004b08 <__swsetup_r>
 8004428:	b170      	cbz	r0, 8004448 <_vfiprintf_r+0x5c>
 800442a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800442c:	07dc      	lsls	r4, r3, #31
 800442e:	d504      	bpl.n	800443a <_vfiprintf_r+0x4e>
 8004430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004434:	b01d      	add	sp, #116	@ 0x74
 8004436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800443a:	89ab      	ldrh	r3, [r5, #12]
 800443c:	0598      	lsls	r0, r3, #22
 800443e:	d4f7      	bmi.n	8004430 <_vfiprintf_r+0x44>
 8004440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004442:	f7ff feaf 	bl	80041a4 <__retarget_lock_release_recursive>
 8004446:	e7f3      	b.n	8004430 <_vfiprintf_r+0x44>
 8004448:	2300      	movs	r3, #0
 800444a:	9309      	str	r3, [sp, #36]	@ 0x24
 800444c:	2320      	movs	r3, #32
 800444e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004452:	f8cd 800c 	str.w	r8, [sp, #12]
 8004456:	2330      	movs	r3, #48	@ 0x30
 8004458:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004608 <_vfiprintf_r+0x21c>
 800445c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004460:	f04f 0901 	mov.w	r9, #1
 8004464:	4623      	mov	r3, r4
 8004466:	469a      	mov	sl, r3
 8004468:	f813 2b01 	ldrb.w	r2, [r3], #1
 800446c:	b10a      	cbz	r2, 8004472 <_vfiprintf_r+0x86>
 800446e:	2a25      	cmp	r2, #37	@ 0x25
 8004470:	d1f9      	bne.n	8004466 <_vfiprintf_r+0x7a>
 8004472:	ebba 0b04 	subs.w	fp, sl, r4
 8004476:	d00b      	beq.n	8004490 <_vfiprintf_r+0xa4>
 8004478:	465b      	mov	r3, fp
 800447a:	4622      	mov	r2, r4
 800447c:	4629      	mov	r1, r5
 800447e:	4630      	mov	r0, r6
 8004480:	f7ff ffa1 	bl	80043c6 <__sfputs_r>
 8004484:	3001      	adds	r0, #1
 8004486:	f000 80a7 	beq.w	80045d8 <_vfiprintf_r+0x1ec>
 800448a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800448c:	445a      	add	r2, fp
 800448e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004490:	f89a 3000 	ldrb.w	r3, [sl]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 809f 	beq.w	80045d8 <_vfiprintf_r+0x1ec>
 800449a:	2300      	movs	r3, #0
 800449c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044a4:	f10a 0a01 	add.w	sl, sl, #1
 80044a8:	9304      	str	r3, [sp, #16]
 80044aa:	9307      	str	r3, [sp, #28]
 80044ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80044b0:	931a      	str	r3, [sp, #104]	@ 0x68
 80044b2:	4654      	mov	r4, sl
 80044b4:	2205      	movs	r2, #5
 80044b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044ba:	4853      	ldr	r0, [pc, #332]	@ (8004608 <_vfiprintf_r+0x21c>)
 80044bc:	f7fb fe90 	bl	80001e0 <memchr>
 80044c0:	9a04      	ldr	r2, [sp, #16]
 80044c2:	b9d8      	cbnz	r0, 80044fc <_vfiprintf_r+0x110>
 80044c4:	06d1      	lsls	r1, r2, #27
 80044c6:	bf44      	itt	mi
 80044c8:	2320      	movmi	r3, #32
 80044ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044ce:	0713      	lsls	r3, r2, #28
 80044d0:	bf44      	itt	mi
 80044d2:	232b      	movmi	r3, #43	@ 0x2b
 80044d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80044d8:	f89a 3000 	ldrb.w	r3, [sl]
 80044dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80044de:	d015      	beq.n	800450c <_vfiprintf_r+0x120>
 80044e0:	9a07      	ldr	r2, [sp, #28]
 80044e2:	4654      	mov	r4, sl
 80044e4:	2000      	movs	r0, #0
 80044e6:	f04f 0c0a 	mov.w	ip, #10
 80044ea:	4621      	mov	r1, r4
 80044ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044f0:	3b30      	subs	r3, #48	@ 0x30
 80044f2:	2b09      	cmp	r3, #9
 80044f4:	d94b      	bls.n	800458e <_vfiprintf_r+0x1a2>
 80044f6:	b1b0      	cbz	r0, 8004526 <_vfiprintf_r+0x13a>
 80044f8:	9207      	str	r2, [sp, #28]
 80044fa:	e014      	b.n	8004526 <_vfiprintf_r+0x13a>
 80044fc:	eba0 0308 	sub.w	r3, r0, r8
 8004500:	fa09 f303 	lsl.w	r3, r9, r3
 8004504:	4313      	orrs	r3, r2
 8004506:	9304      	str	r3, [sp, #16]
 8004508:	46a2      	mov	sl, r4
 800450a:	e7d2      	b.n	80044b2 <_vfiprintf_r+0xc6>
 800450c:	9b03      	ldr	r3, [sp, #12]
 800450e:	1d19      	adds	r1, r3, #4
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	9103      	str	r1, [sp, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	bfbb      	ittet	lt
 8004518:	425b      	neglt	r3, r3
 800451a:	f042 0202 	orrlt.w	r2, r2, #2
 800451e:	9307      	strge	r3, [sp, #28]
 8004520:	9307      	strlt	r3, [sp, #28]
 8004522:	bfb8      	it	lt
 8004524:	9204      	strlt	r2, [sp, #16]
 8004526:	7823      	ldrb	r3, [r4, #0]
 8004528:	2b2e      	cmp	r3, #46	@ 0x2e
 800452a:	d10a      	bne.n	8004542 <_vfiprintf_r+0x156>
 800452c:	7863      	ldrb	r3, [r4, #1]
 800452e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004530:	d132      	bne.n	8004598 <_vfiprintf_r+0x1ac>
 8004532:	9b03      	ldr	r3, [sp, #12]
 8004534:	1d1a      	adds	r2, r3, #4
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	9203      	str	r2, [sp, #12]
 800453a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800453e:	3402      	adds	r4, #2
 8004540:	9305      	str	r3, [sp, #20]
 8004542:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004618 <_vfiprintf_r+0x22c>
 8004546:	7821      	ldrb	r1, [r4, #0]
 8004548:	2203      	movs	r2, #3
 800454a:	4650      	mov	r0, sl
 800454c:	f7fb fe48 	bl	80001e0 <memchr>
 8004550:	b138      	cbz	r0, 8004562 <_vfiprintf_r+0x176>
 8004552:	9b04      	ldr	r3, [sp, #16]
 8004554:	eba0 000a 	sub.w	r0, r0, sl
 8004558:	2240      	movs	r2, #64	@ 0x40
 800455a:	4082      	lsls	r2, r0
 800455c:	4313      	orrs	r3, r2
 800455e:	3401      	adds	r4, #1
 8004560:	9304      	str	r3, [sp, #16]
 8004562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004566:	4829      	ldr	r0, [pc, #164]	@ (800460c <_vfiprintf_r+0x220>)
 8004568:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800456c:	2206      	movs	r2, #6
 800456e:	f7fb fe37 	bl	80001e0 <memchr>
 8004572:	2800      	cmp	r0, #0
 8004574:	d03f      	beq.n	80045f6 <_vfiprintf_r+0x20a>
 8004576:	4b26      	ldr	r3, [pc, #152]	@ (8004610 <_vfiprintf_r+0x224>)
 8004578:	bb1b      	cbnz	r3, 80045c2 <_vfiprintf_r+0x1d6>
 800457a:	9b03      	ldr	r3, [sp, #12]
 800457c:	3307      	adds	r3, #7
 800457e:	f023 0307 	bic.w	r3, r3, #7
 8004582:	3308      	adds	r3, #8
 8004584:	9303      	str	r3, [sp, #12]
 8004586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004588:	443b      	add	r3, r7
 800458a:	9309      	str	r3, [sp, #36]	@ 0x24
 800458c:	e76a      	b.n	8004464 <_vfiprintf_r+0x78>
 800458e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004592:	460c      	mov	r4, r1
 8004594:	2001      	movs	r0, #1
 8004596:	e7a8      	b.n	80044ea <_vfiprintf_r+0xfe>
 8004598:	2300      	movs	r3, #0
 800459a:	3401      	adds	r4, #1
 800459c:	9305      	str	r3, [sp, #20]
 800459e:	4619      	mov	r1, r3
 80045a0:	f04f 0c0a 	mov.w	ip, #10
 80045a4:	4620      	mov	r0, r4
 80045a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045aa:	3a30      	subs	r2, #48	@ 0x30
 80045ac:	2a09      	cmp	r2, #9
 80045ae:	d903      	bls.n	80045b8 <_vfiprintf_r+0x1cc>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0c6      	beq.n	8004542 <_vfiprintf_r+0x156>
 80045b4:	9105      	str	r1, [sp, #20]
 80045b6:	e7c4      	b.n	8004542 <_vfiprintf_r+0x156>
 80045b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80045bc:	4604      	mov	r4, r0
 80045be:	2301      	movs	r3, #1
 80045c0:	e7f0      	b.n	80045a4 <_vfiprintf_r+0x1b8>
 80045c2:	ab03      	add	r3, sp, #12
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	462a      	mov	r2, r5
 80045c8:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <_vfiprintf_r+0x228>)
 80045ca:	a904      	add	r1, sp, #16
 80045cc:	4630      	mov	r0, r6
 80045ce:	f3af 8000 	nop.w
 80045d2:	4607      	mov	r7, r0
 80045d4:	1c78      	adds	r0, r7, #1
 80045d6:	d1d6      	bne.n	8004586 <_vfiprintf_r+0x19a>
 80045d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80045da:	07d9      	lsls	r1, r3, #31
 80045dc:	d405      	bmi.n	80045ea <_vfiprintf_r+0x1fe>
 80045de:	89ab      	ldrh	r3, [r5, #12]
 80045e0:	059a      	lsls	r2, r3, #22
 80045e2:	d402      	bmi.n	80045ea <_vfiprintf_r+0x1fe>
 80045e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80045e6:	f7ff fddd 	bl	80041a4 <__retarget_lock_release_recursive>
 80045ea:	89ab      	ldrh	r3, [r5, #12]
 80045ec:	065b      	lsls	r3, r3, #25
 80045ee:	f53f af1f 	bmi.w	8004430 <_vfiprintf_r+0x44>
 80045f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80045f4:	e71e      	b.n	8004434 <_vfiprintf_r+0x48>
 80045f6:	ab03      	add	r3, sp, #12
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	462a      	mov	r2, r5
 80045fc:	4b05      	ldr	r3, [pc, #20]	@ (8004614 <_vfiprintf_r+0x228>)
 80045fe:	a904      	add	r1, sp, #16
 8004600:	4630      	mov	r0, r6
 8004602:	f000 f879 	bl	80046f8 <_printf_i>
 8004606:	e7e4      	b.n	80045d2 <_vfiprintf_r+0x1e6>
 8004608:	08004d20 	.word	0x08004d20
 800460c:	08004d2a 	.word	0x08004d2a
 8004610:	00000000 	.word	0x00000000
 8004614:	080043c7 	.word	0x080043c7
 8004618:	08004d26 	.word	0x08004d26

0800461c <_printf_common>:
 800461c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004620:	4616      	mov	r6, r2
 8004622:	4698      	mov	r8, r3
 8004624:	688a      	ldr	r2, [r1, #8]
 8004626:	690b      	ldr	r3, [r1, #16]
 8004628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800462c:	4293      	cmp	r3, r2
 800462e:	bfb8      	it	lt
 8004630:	4613      	movlt	r3, r2
 8004632:	6033      	str	r3, [r6, #0]
 8004634:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004638:	4607      	mov	r7, r0
 800463a:	460c      	mov	r4, r1
 800463c:	b10a      	cbz	r2, 8004642 <_printf_common+0x26>
 800463e:	3301      	adds	r3, #1
 8004640:	6033      	str	r3, [r6, #0]
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	0699      	lsls	r1, r3, #26
 8004646:	bf42      	ittt	mi
 8004648:	6833      	ldrmi	r3, [r6, #0]
 800464a:	3302      	addmi	r3, #2
 800464c:	6033      	strmi	r3, [r6, #0]
 800464e:	6825      	ldr	r5, [r4, #0]
 8004650:	f015 0506 	ands.w	r5, r5, #6
 8004654:	d106      	bne.n	8004664 <_printf_common+0x48>
 8004656:	f104 0a19 	add.w	sl, r4, #25
 800465a:	68e3      	ldr	r3, [r4, #12]
 800465c:	6832      	ldr	r2, [r6, #0]
 800465e:	1a9b      	subs	r3, r3, r2
 8004660:	42ab      	cmp	r3, r5
 8004662:	dc26      	bgt.n	80046b2 <_printf_common+0x96>
 8004664:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	3b00      	subs	r3, #0
 800466c:	bf18      	it	ne
 800466e:	2301      	movne	r3, #1
 8004670:	0692      	lsls	r2, r2, #26
 8004672:	d42b      	bmi.n	80046cc <_printf_common+0xb0>
 8004674:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004678:	4641      	mov	r1, r8
 800467a:	4638      	mov	r0, r7
 800467c:	47c8      	blx	r9
 800467e:	3001      	adds	r0, #1
 8004680:	d01e      	beq.n	80046c0 <_printf_common+0xa4>
 8004682:	6823      	ldr	r3, [r4, #0]
 8004684:	6922      	ldr	r2, [r4, #16]
 8004686:	f003 0306 	and.w	r3, r3, #6
 800468a:	2b04      	cmp	r3, #4
 800468c:	bf02      	ittt	eq
 800468e:	68e5      	ldreq	r5, [r4, #12]
 8004690:	6833      	ldreq	r3, [r6, #0]
 8004692:	1aed      	subeq	r5, r5, r3
 8004694:	68a3      	ldr	r3, [r4, #8]
 8004696:	bf0c      	ite	eq
 8004698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800469c:	2500      	movne	r5, #0
 800469e:	4293      	cmp	r3, r2
 80046a0:	bfc4      	itt	gt
 80046a2:	1a9b      	subgt	r3, r3, r2
 80046a4:	18ed      	addgt	r5, r5, r3
 80046a6:	2600      	movs	r6, #0
 80046a8:	341a      	adds	r4, #26
 80046aa:	42b5      	cmp	r5, r6
 80046ac:	d11a      	bne.n	80046e4 <_printf_common+0xc8>
 80046ae:	2000      	movs	r0, #0
 80046b0:	e008      	b.n	80046c4 <_printf_common+0xa8>
 80046b2:	2301      	movs	r3, #1
 80046b4:	4652      	mov	r2, sl
 80046b6:	4641      	mov	r1, r8
 80046b8:	4638      	mov	r0, r7
 80046ba:	47c8      	blx	r9
 80046bc:	3001      	adds	r0, #1
 80046be:	d103      	bne.n	80046c8 <_printf_common+0xac>
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046c8:	3501      	adds	r5, #1
 80046ca:	e7c6      	b.n	800465a <_printf_common+0x3e>
 80046cc:	18e1      	adds	r1, r4, r3
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	2030      	movs	r0, #48	@ 0x30
 80046d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80046d6:	4422      	add	r2, r4
 80046d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80046dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80046e0:	3302      	adds	r3, #2
 80046e2:	e7c7      	b.n	8004674 <_printf_common+0x58>
 80046e4:	2301      	movs	r3, #1
 80046e6:	4622      	mov	r2, r4
 80046e8:	4641      	mov	r1, r8
 80046ea:	4638      	mov	r0, r7
 80046ec:	47c8      	blx	r9
 80046ee:	3001      	adds	r0, #1
 80046f0:	d0e6      	beq.n	80046c0 <_printf_common+0xa4>
 80046f2:	3601      	adds	r6, #1
 80046f4:	e7d9      	b.n	80046aa <_printf_common+0x8e>
	...

080046f8 <_printf_i>:
 80046f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046fc:	7e0f      	ldrb	r7, [r1, #24]
 80046fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004700:	2f78      	cmp	r7, #120	@ 0x78
 8004702:	4691      	mov	r9, r2
 8004704:	4680      	mov	r8, r0
 8004706:	460c      	mov	r4, r1
 8004708:	469a      	mov	sl, r3
 800470a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800470e:	d807      	bhi.n	8004720 <_printf_i+0x28>
 8004710:	2f62      	cmp	r7, #98	@ 0x62
 8004712:	d80a      	bhi.n	800472a <_printf_i+0x32>
 8004714:	2f00      	cmp	r7, #0
 8004716:	f000 80d1 	beq.w	80048bc <_printf_i+0x1c4>
 800471a:	2f58      	cmp	r7, #88	@ 0x58
 800471c:	f000 80b8 	beq.w	8004890 <_printf_i+0x198>
 8004720:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004724:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004728:	e03a      	b.n	80047a0 <_printf_i+0xa8>
 800472a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800472e:	2b15      	cmp	r3, #21
 8004730:	d8f6      	bhi.n	8004720 <_printf_i+0x28>
 8004732:	a101      	add	r1, pc, #4	@ (adr r1, 8004738 <_printf_i+0x40>)
 8004734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004738:	08004791 	.word	0x08004791
 800473c:	080047a5 	.word	0x080047a5
 8004740:	08004721 	.word	0x08004721
 8004744:	08004721 	.word	0x08004721
 8004748:	08004721 	.word	0x08004721
 800474c:	08004721 	.word	0x08004721
 8004750:	080047a5 	.word	0x080047a5
 8004754:	08004721 	.word	0x08004721
 8004758:	08004721 	.word	0x08004721
 800475c:	08004721 	.word	0x08004721
 8004760:	08004721 	.word	0x08004721
 8004764:	080048a3 	.word	0x080048a3
 8004768:	080047cf 	.word	0x080047cf
 800476c:	0800485d 	.word	0x0800485d
 8004770:	08004721 	.word	0x08004721
 8004774:	08004721 	.word	0x08004721
 8004778:	080048c5 	.word	0x080048c5
 800477c:	08004721 	.word	0x08004721
 8004780:	080047cf 	.word	0x080047cf
 8004784:	08004721 	.word	0x08004721
 8004788:	08004721 	.word	0x08004721
 800478c:	08004865 	.word	0x08004865
 8004790:	6833      	ldr	r3, [r6, #0]
 8004792:	1d1a      	adds	r2, r3, #4
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6032      	str	r2, [r6, #0]
 8004798:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800479c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80047a0:	2301      	movs	r3, #1
 80047a2:	e09c      	b.n	80048de <_printf_i+0x1e6>
 80047a4:	6833      	ldr	r3, [r6, #0]
 80047a6:	6820      	ldr	r0, [r4, #0]
 80047a8:	1d19      	adds	r1, r3, #4
 80047aa:	6031      	str	r1, [r6, #0]
 80047ac:	0606      	lsls	r6, r0, #24
 80047ae:	d501      	bpl.n	80047b4 <_printf_i+0xbc>
 80047b0:	681d      	ldr	r5, [r3, #0]
 80047b2:	e003      	b.n	80047bc <_printf_i+0xc4>
 80047b4:	0645      	lsls	r5, r0, #25
 80047b6:	d5fb      	bpl.n	80047b0 <_printf_i+0xb8>
 80047b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80047bc:	2d00      	cmp	r5, #0
 80047be:	da03      	bge.n	80047c8 <_printf_i+0xd0>
 80047c0:	232d      	movs	r3, #45	@ 0x2d
 80047c2:	426d      	negs	r5, r5
 80047c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047c8:	4858      	ldr	r0, [pc, #352]	@ (800492c <_printf_i+0x234>)
 80047ca:	230a      	movs	r3, #10
 80047cc:	e011      	b.n	80047f2 <_printf_i+0xfa>
 80047ce:	6821      	ldr	r1, [r4, #0]
 80047d0:	6833      	ldr	r3, [r6, #0]
 80047d2:	0608      	lsls	r0, r1, #24
 80047d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80047d8:	d402      	bmi.n	80047e0 <_printf_i+0xe8>
 80047da:	0649      	lsls	r1, r1, #25
 80047dc:	bf48      	it	mi
 80047de:	b2ad      	uxthmi	r5, r5
 80047e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80047e2:	4852      	ldr	r0, [pc, #328]	@ (800492c <_printf_i+0x234>)
 80047e4:	6033      	str	r3, [r6, #0]
 80047e6:	bf14      	ite	ne
 80047e8:	230a      	movne	r3, #10
 80047ea:	2308      	moveq	r3, #8
 80047ec:	2100      	movs	r1, #0
 80047ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80047f2:	6866      	ldr	r6, [r4, #4]
 80047f4:	60a6      	str	r6, [r4, #8]
 80047f6:	2e00      	cmp	r6, #0
 80047f8:	db05      	blt.n	8004806 <_printf_i+0x10e>
 80047fa:	6821      	ldr	r1, [r4, #0]
 80047fc:	432e      	orrs	r6, r5
 80047fe:	f021 0104 	bic.w	r1, r1, #4
 8004802:	6021      	str	r1, [r4, #0]
 8004804:	d04b      	beq.n	800489e <_printf_i+0x1a6>
 8004806:	4616      	mov	r6, r2
 8004808:	fbb5 f1f3 	udiv	r1, r5, r3
 800480c:	fb03 5711 	mls	r7, r3, r1, r5
 8004810:	5dc7      	ldrb	r7, [r0, r7]
 8004812:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004816:	462f      	mov	r7, r5
 8004818:	42bb      	cmp	r3, r7
 800481a:	460d      	mov	r5, r1
 800481c:	d9f4      	bls.n	8004808 <_printf_i+0x110>
 800481e:	2b08      	cmp	r3, #8
 8004820:	d10b      	bne.n	800483a <_printf_i+0x142>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	07df      	lsls	r7, r3, #31
 8004826:	d508      	bpl.n	800483a <_printf_i+0x142>
 8004828:	6923      	ldr	r3, [r4, #16]
 800482a:	6861      	ldr	r1, [r4, #4]
 800482c:	4299      	cmp	r1, r3
 800482e:	bfde      	ittt	le
 8004830:	2330      	movle	r3, #48	@ 0x30
 8004832:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004836:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800483a:	1b92      	subs	r2, r2, r6
 800483c:	6122      	str	r2, [r4, #16]
 800483e:	f8cd a000 	str.w	sl, [sp]
 8004842:	464b      	mov	r3, r9
 8004844:	aa03      	add	r2, sp, #12
 8004846:	4621      	mov	r1, r4
 8004848:	4640      	mov	r0, r8
 800484a:	f7ff fee7 	bl	800461c <_printf_common>
 800484e:	3001      	adds	r0, #1
 8004850:	d14a      	bne.n	80048e8 <_printf_i+0x1f0>
 8004852:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004856:	b004      	add	sp, #16
 8004858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	f043 0320 	orr.w	r3, r3, #32
 8004862:	6023      	str	r3, [r4, #0]
 8004864:	4832      	ldr	r0, [pc, #200]	@ (8004930 <_printf_i+0x238>)
 8004866:	2778      	movs	r7, #120	@ 0x78
 8004868:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	6831      	ldr	r1, [r6, #0]
 8004870:	061f      	lsls	r7, r3, #24
 8004872:	f851 5b04 	ldr.w	r5, [r1], #4
 8004876:	d402      	bmi.n	800487e <_printf_i+0x186>
 8004878:	065f      	lsls	r7, r3, #25
 800487a:	bf48      	it	mi
 800487c:	b2ad      	uxthmi	r5, r5
 800487e:	6031      	str	r1, [r6, #0]
 8004880:	07d9      	lsls	r1, r3, #31
 8004882:	bf44      	itt	mi
 8004884:	f043 0320 	orrmi.w	r3, r3, #32
 8004888:	6023      	strmi	r3, [r4, #0]
 800488a:	b11d      	cbz	r5, 8004894 <_printf_i+0x19c>
 800488c:	2310      	movs	r3, #16
 800488e:	e7ad      	b.n	80047ec <_printf_i+0xf4>
 8004890:	4826      	ldr	r0, [pc, #152]	@ (800492c <_printf_i+0x234>)
 8004892:	e7e9      	b.n	8004868 <_printf_i+0x170>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	f023 0320 	bic.w	r3, r3, #32
 800489a:	6023      	str	r3, [r4, #0]
 800489c:	e7f6      	b.n	800488c <_printf_i+0x194>
 800489e:	4616      	mov	r6, r2
 80048a0:	e7bd      	b.n	800481e <_printf_i+0x126>
 80048a2:	6833      	ldr	r3, [r6, #0]
 80048a4:	6825      	ldr	r5, [r4, #0]
 80048a6:	6961      	ldr	r1, [r4, #20]
 80048a8:	1d18      	adds	r0, r3, #4
 80048aa:	6030      	str	r0, [r6, #0]
 80048ac:	062e      	lsls	r6, r5, #24
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	d501      	bpl.n	80048b6 <_printf_i+0x1be>
 80048b2:	6019      	str	r1, [r3, #0]
 80048b4:	e002      	b.n	80048bc <_printf_i+0x1c4>
 80048b6:	0668      	lsls	r0, r5, #25
 80048b8:	d5fb      	bpl.n	80048b2 <_printf_i+0x1ba>
 80048ba:	8019      	strh	r1, [r3, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	6123      	str	r3, [r4, #16]
 80048c0:	4616      	mov	r6, r2
 80048c2:	e7bc      	b.n	800483e <_printf_i+0x146>
 80048c4:	6833      	ldr	r3, [r6, #0]
 80048c6:	1d1a      	adds	r2, r3, #4
 80048c8:	6032      	str	r2, [r6, #0]
 80048ca:	681e      	ldr	r6, [r3, #0]
 80048cc:	6862      	ldr	r2, [r4, #4]
 80048ce:	2100      	movs	r1, #0
 80048d0:	4630      	mov	r0, r6
 80048d2:	f7fb fc85 	bl	80001e0 <memchr>
 80048d6:	b108      	cbz	r0, 80048dc <_printf_i+0x1e4>
 80048d8:	1b80      	subs	r0, r0, r6
 80048da:	6060      	str	r0, [r4, #4]
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	6123      	str	r3, [r4, #16]
 80048e0:	2300      	movs	r3, #0
 80048e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048e6:	e7aa      	b.n	800483e <_printf_i+0x146>
 80048e8:	6923      	ldr	r3, [r4, #16]
 80048ea:	4632      	mov	r2, r6
 80048ec:	4649      	mov	r1, r9
 80048ee:	4640      	mov	r0, r8
 80048f0:	47d0      	blx	sl
 80048f2:	3001      	adds	r0, #1
 80048f4:	d0ad      	beq.n	8004852 <_printf_i+0x15a>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	079b      	lsls	r3, r3, #30
 80048fa:	d413      	bmi.n	8004924 <_printf_i+0x22c>
 80048fc:	68e0      	ldr	r0, [r4, #12]
 80048fe:	9b03      	ldr	r3, [sp, #12]
 8004900:	4298      	cmp	r0, r3
 8004902:	bfb8      	it	lt
 8004904:	4618      	movlt	r0, r3
 8004906:	e7a6      	b.n	8004856 <_printf_i+0x15e>
 8004908:	2301      	movs	r3, #1
 800490a:	4632      	mov	r2, r6
 800490c:	4649      	mov	r1, r9
 800490e:	4640      	mov	r0, r8
 8004910:	47d0      	blx	sl
 8004912:	3001      	adds	r0, #1
 8004914:	d09d      	beq.n	8004852 <_printf_i+0x15a>
 8004916:	3501      	adds	r5, #1
 8004918:	68e3      	ldr	r3, [r4, #12]
 800491a:	9903      	ldr	r1, [sp, #12]
 800491c:	1a5b      	subs	r3, r3, r1
 800491e:	42ab      	cmp	r3, r5
 8004920:	dcf2      	bgt.n	8004908 <_printf_i+0x210>
 8004922:	e7eb      	b.n	80048fc <_printf_i+0x204>
 8004924:	2500      	movs	r5, #0
 8004926:	f104 0619 	add.w	r6, r4, #25
 800492a:	e7f5      	b.n	8004918 <_printf_i+0x220>
 800492c:	08004d31 	.word	0x08004d31
 8004930:	08004d42 	.word	0x08004d42

08004934 <__sflush_r>:
 8004934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800493c:	0716      	lsls	r6, r2, #28
 800493e:	4605      	mov	r5, r0
 8004940:	460c      	mov	r4, r1
 8004942:	d454      	bmi.n	80049ee <__sflush_r+0xba>
 8004944:	684b      	ldr	r3, [r1, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	dc02      	bgt.n	8004950 <__sflush_r+0x1c>
 800494a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	dd48      	ble.n	80049e2 <__sflush_r+0xae>
 8004950:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004952:	2e00      	cmp	r6, #0
 8004954:	d045      	beq.n	80049e2 <__sflush_r+0xae>
 8004956:	2300      	movs	r3, #0
 8004958:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800495c:	682f      	ldr	r7, [r5, #0]
 800495e:	6a21      	ldr	r1, [r4, #32]
 8004960:	602b      	str	r3, [r5, #0]
 8004962:	d030      	beq.n	80049c6 <__sflush_r+0x92>
 8004964:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	0759      	lsls	r1, r3, #29
 800496a:	d505      	bpl.n	8004978 <__sflush_r+0x44>
 800496c:	6863      	ldr	r3, [r4, #4]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004972:	b10b      	cbz	r3, 8004978 <__sflush_r+0x44>
 8004974:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004976:	1ad2      	subs	r2, r2, r3
 8004978:	2300      	movs	r3, #0
 800497a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800497c:	6a21      	ldr	r1, [r4, #32]
 800497e:	4628      	mov	r0, r5
 8004980:	47b0      	blx	r6
 8004982:	1c43      	adds	r3, r0, #1
 8004984:	89a3      	ldrh	r3, [r4, #12]
 8004986:	d106      	bne.n	8004996 <__sflush_r+0x62>
 8004988:	6829      	ldr	r1, [r5, #0]
 800498a:	291d      	cmp	r1, #29
 800498c:	d82b      	bhi.n	80049e6 <__sflush_r+0xb2>
 800498e:	4a2a      	ldr	r2, [pc, #168]	@ (8004a38 <__sflush_r+0x104>)
 8004990:	40ca      	lsrs	r2, r1
 8004992:	07d6      	lsls	r6, r2, #31
 8004994:	d527      	bpl.n	80049e6 <__sflush_r+0xb2>
 8004996:	2200      	movs	r2, #0
 8004998:	6062      	str	r2, [r4, #4]
 800499a:	04d9      	lsls	r1, r3, #19
 800499c:	6922      	ldr	r2, [r4, #16]
 800499e:	6022      	str	r2, [r4, #0]
 80049a0:	d504      	bpl.n	80049ac <__sflush_r+0x78>
 80049a2:	1c42      	adds	r2, r0, #1
 80049a4:	d101      	bne.n	80049aa <__sflush_r+0x76>
 80049a6:	682b      	ldr	r3, [r5, #0]
 80049a8:	b903      	cbnz	r3, 80049ac <__sflush_r+0x78>
 80049aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80049ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80049ae:	602f      	str	r7, [r5, #0]
 80049b0:	b1b9      	cbz	r1, 80049e2 <__sflush_r+0xae>
 80049b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80049b6:	4299      	cmp	r1, r3
 80049b8:	d002      	beq.n	80049c0 <__sflush_r+0x8c>
 80049ba:	4628      	mov	r0, r5
 80049bc:	f7ff fbf4 	bl	80041a8 <_free_r>
 80049c0:	2300      	movs	r3, #0
 80049c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80049c4:	e00d      	b.n	80049e2 <__sflush_r+0xae>
 80049c6:	2301      	movs	r3, #1
 80049c8:	4628      	mov	r0, r5
 80049ca:	47b0      	blx	r6
 80049cc:	4602      	mov	r2, r0
 80049ce:	1c50      	adds	r0, r2, #1
 80049d0:	d1c9      	bne.n	8004966 <__sflush_r+0x32>
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0c6      	beq.n	8004966 <__sflush_r+0x32>
 80049d8:	2b1d      	cmp	r3, #29
 80049da:	d001      	beq.n	80049e0 <__sflush_r+0xac>
 80049dc:	2b16      	cmp	r3, #22
 80049de:	d11e      	bne.n	8004a1e <__sflush_r+0xea>
 80049e0:	602f      	str	r7, [r5, #0]
 80049e2:	2000      	movs	r0, #0
 80049e4:	e022      	b.n	8004a2c <__sflush_r+0xf8>
 80049e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049ea:	b21b      	sxth	r3, r3
 80049ec:	e01b      	b.n	8004a26 <__sflush_r+0xf2>
 80049ee:	690f      	ldr	r7, [r1, #16]
 80049f0:	2f00      	cmp	r7, #0
 80049f2:	d0f6      	beq.n	80049e2 <__sflush_r+0xae>
 80049f4:	0793      	lsls	r3, r2, #30
 80049f6:	680e      	ldr	r6, [r1, #0]
 80049f8:	bf08      	it	eq
 80049fa:	694b      	ldreq	r3, [r1, #20]
 80049fc:	600f      	str	r7, [r1, #0]
 80049fe:	bf18      	it	ne
 8004a00:	2300      	movne	r3, #0
 8004a02:	eba6 0807 	sub.w	r8, r6, r7
 8004a06:	608b      	str	r3, [r1, #8]
 8004a08:	f1b8 0f00 	cmp.w	r8, #0
 8004a0c:	dde9      	ble.n	80049e2 <__sflush_r+0xae>
 8004a0e:	6a21      	ldr	r1, [r4, #32]
 8004a10:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004a12:	4643      	mov	r3, r8
 8004a14:	463a      	mov	r2, r7
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b0      	blx	r6
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	dc08      	bgt.n	8004a30 <__sflush_r+0xfc>
 8004a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a26:	81a3      	strh	r3, [r4, #12]
 8004a28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a30:	4407      	add	r7, r0
 8004a32:	eba8 0800 	sub.w	r8, r8, r0
 8004a36:	e7e7      	b.n	8004a08 <__sflush_r+0xd4>
 8004a38:	20400001 	.word	0x20400001

08004a3c <_fflush_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	690b      	ldr	r3, [r1, #16]
 8004a40:	4605      	mov	r5, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	b913      	cbnz	r3, 8004a4c <_fflush_r+0x10>
 8004a46:	2500      	movs	r5, #0
 8004a48:	4628      	mov	r0, r5
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	b118      	cbz	r0, 8004a56 <_fflush_r+0x1a>
 8004a4e:	6a03      	ldr	r3, [r0, #32]
 8004a50:	b90b      	cbnz	r3, 8004a56 <_fflush_r+0x1a>
 8004a52:	f7ff faa1 	bl	8003f98 <__sinit>
 8004a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0f3      	beq.n	8004a46 <_fflush_r+0xa>
 8004a5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004a60:	07d0      	lsls	r0, r2, #31
 8004a62:	d404      	bmi.n	8004a6e <_fflush_r+0x32>
 8004a64:	0599      	lsls	r1, r3, #22
 8004a66:	d402      	bmi.n	8004a6e <_fflush_r+0x32>
 8004a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a6a:	f7ff fb9a 	bl	80041a2 <__retarget_lock_acquire_recursive>
 8004a6e:	4628      	mov	r0, r5
 8004a70:	4621      	mov	r1, r4
 8004a72:	f7ff ff5f 	bl	8004934 <__sflush_r>
 8004a76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004a78:	07da      	lsls	r2, r3, #31
 8004a7a:	4605      	mov	r5, r0
 8004a7c:	d4e4      	bmi.n	8004a48 <_fflush_r+0xc>
 8004a7e:	89a3      	ldrh	r3, [r4, #12]
 8004a80:	059b      	lsls	r3, r3, #22
 8004a82:	d4e1      	bmi.n	8004a48 <_fflush_r+0xc>
 8004a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a86:	f7ff fb8d 	bl	80041a4 <__retarget_lock_release_recursive>
 8004a8a:	e7dd      	b.n	8004a48 <_fflush_r+0xc>

08004a8c <__swbuf_r>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	460e      	mov	r6, r1
 8004a90:	4614      	mov	r4, r2
 8004a92:	4605      	mov	r5, r0
 8004a94:	b118      	cbz	r0, 8004a9e <__swbuf_r+0x12>
 8004a96:	6a03      	ldr	r3, [r0, #32]
 8004a98:	b90b      	cbnz	r3, 8004a9e <__swbuf_r+0x12>
 8004a9a:	f7ff fa7d 	bl	8003f98 <__sinit>
 8004a9e:	69a3      	ldr	r3, [r4, #24]
 8004aa0:	60a3      	str	r3, [r4, #8]
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	071a      	lsls	r2, r3, #28
 8004aa6:	d501      	bpl.n	8004aac <__swbuf_r+0x20>
 8004aa8:	6923      	ldr	r3, [r4, #16]
 8004aaa:	b943      	cbnz	r3, 8004abe <__swbuf_r+0x32>
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f82a 	bl	8004b08 <__swsetup_r>
 8004ab4:	b118      	cbz	r0, 8004abe <__swbuf_r+0x32>
 8004ab6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004aba:	4638      	mov	r0, r7
 8004abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004abe:	6823      	ldr	r3, [r4, #0]
 8004ac0:	6922      	ldr	r2, [r4, #16]
 8004ac2:	1a98      	subs	r0, r3, r2
 8004ac4:	6963      	ldr	r3, [r4, #20]
 8004ac6:	b2f6      	uxtb	r6, r6
 8004ac8:	4283      	cmp	r3, r0
 8004aca:	4637      	mov	r7, r6
 8004acc:	dc05      	bgt.n	8004ada <__swbuf_r+0x4e>
 8004ace:	4621      	mov	r1, r4
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f7ff ffb3 	bl	8004a3c <_fflush_r>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d1ed      	bne.n	8004ab6 <__swbuf_r+0x2a>
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	3b01      	subs	r3, #1
 8004ade:	60a3      	str	r3, [r4, #8]
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	6022      	str	r2, [r4, #0]
 8004ae6:	701e      	strb	r6, [r3, #0]
 8004ae8:	6962      	ldr	r2, [r4, #20]
 8004aea:	1c43      	adds	r3, r0, #1
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d004      	beq.n	8004afa <__swbuf_r+0x6e>
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	07db      	lsls	r3, r3, #31
 8004af4:	d5e1      	bpl.n	8004aba <__swbuf_r+0x2e>
 8004af6:	2e0a      	cmp	r6, #10
 8004af8:	d1df      	bne.n	8004aba <__swbuf_r+0x2e>
 8004afa:	4621      	mov	r1, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	f7ff ff9d 	bl	8004a3c <_fflush_r>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d0d9      	beq.n	8004aba <__swbuf_r+0x2e>
 8004b06:	e7d6      	b.n	8004ab6 <__swbuf_r+0x2a>

08004b08 <__swsetup_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	4b29      	ldr	r3, [pc, #164]	@ (8004bb0 <__swsetup_r+0xa8>)
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	460c      	mov	r4, r1
 8004b12:	b118      	cbz	r0, 8004b1c <__swsetup_r+0x14>
 8004b14:	6a03      	ldr	r3, [r0, #32]
 8004b16:	b90b      	cbnz	r3, 8004b1c <__swsetup_r+0x14>
 8004b18:	f7ff fa3e 	bl	8003f98 <__sinit>
 8004b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b20:	0719      	lsls	r1, r3, #28
 8004b22:	d422      	bmi.n	8004b6a <__swsetup_r+0x62>
 8004b24:	06da      	lsls	r2, r3, #27
 8004b26:	d407      	bmi.n	8004b38 <__swsetup_r+0x30>
 8004b28:	2209      	movs	r2, #9
 8004b2a:	602a      	str	r2, [r5, #0]
 8004b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b36:	e033      	b.n	8004ba0 <__swsetup_r+0x98>
 8004b38:	0758      	lsls	r0, r3, #29
 8004b3a:	d512      	bpl.n	8004b62 <__swsetup_r+0x5a>
 8004b3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b3e:	b141      	cbz	r1, 8004b52 <__swsetup_r+0x4a>
 8004b40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004b44:	4299      	cmp	r1, r3
 8004b46:	d002      	beq.n	8004b4e <__swsetup_r+0x46>
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f7ff fb2d 	bl	80041a8 <_free_r>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6363      	str	r3, [r4, #52]	@ 0x34
 8004b52:	89a3      	ldrh	r3, [r4, #12]
 8004b54:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004b58:	81a3      	strh	r3, [r4, #12]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	6063      	str	r3, [r4, #4]
 8004b5e:	6923      	ldr	r3, [r4, #16]
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	89a3      	ldrh	r3, [r4, #12]
 8004b64:	f043 0308 	orr.w	r3, r3, #8
 8004b68:	81a3      	strh	r3, [r4, #12]
 8004b6a:	6923      	ldr	r3, [r4, #16]
 8004b6c:	b94b      	cbnz	r3, 8004b82 <__swsetup_r+0x7a>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b78:	d003      	beq.n	8004b82 <__swsetup_r+0x7a>
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	4628      	mov	r0, r5
 8004b7e:	f000 f84f 	bl	8004c20 <__smakebuf_r>
 8004b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b86:	f013 0201 	ands.w	r2, r3, #1
 8004b8a:	d00a      	beq.n	8004ba2 <__swsetup_r+0x9a>
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	60a2      	str	r2, [r4, #8]
 8004b90:	6962      	ldr	r2, [r4, #20]
 8004b92:	4252      	negs	r2, r2
 8004b94:	61a2      	str	r2, [r4, #24]
 8004b96:	6922      	ldr	r2, [r4, #16]
 8004b98:	b942      	cbnz	r2, 8004bac <__swsetup_r+0xa4>
 8004b9a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b9e:	d1c5      	bne.n	8004b2c <__swsetup_r+0x24>
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
 8004ba2:	0799      	lsls	r1, r3, #30
 8004ba4:	bf58      	it	pl
 8004ba6:	6962      	ldrpl	r2, [r4, #20]
 8004ba8:	60a2      	str	r2, [r4, #8]
 8004baa:	e7f4      	b.n	8004b96 <__swsetup_r+0x8e>
 8004bac:	2000      	movs	r0, #0
 8004bae:	e7f7      	b.n	8004ba0 <__swsetup_r+0x98>
 8004bb0:	20000018 	.word	0x20000018

08004bb4 <_sbrk_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d06      	ldr	r5, [pc, #24]	@ (8004bd0 <_sbrk_r+0x1c>)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fb ff78 	bl	8000ab4 <_sbrk>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_sbrk_r+0x1a>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_sbrk_r+0x1a>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	200002a8 	.word	0x200002a8

08004bd4 <__swhatbuf_r>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bdc:	2900      	cmp	r1, #0
 8004bde:	b096      	sub	sp, #88	@ 0x58
 8004be0:	4615      	mov	r5, r2
 8004be2:	461e      	mov	r6, r3
 8004be4:	da0d      	bge.n	8004c02 <__swhatbuf_r+0x2e>
 8004be6:	89a3      	ldrh	r3, [r4, #12]
 8004be8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004bec:	f04f 0100 	mov.w	r1, #0
 8004bf0:	bf14      	ite	ne
 8004bf2:	2340      	movne	r3, #64	@ 0x40
 8004bf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	6031      	str	r1, [r6, #0]
 8004bfc:	602b      	str	r3, [r5, #0]
 8004bfe:	b016      	add	sp, #88	@ 0x58
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
 8004c02:	466a      	mov	r2, sp
 8004c04:	f000 f848 	bl	8004c98 <_fstat_r>
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	dbec      	blt.n	8004be6 <__swhatbuf_r+0x12>
 8004c0c:	9901      	ldr	r1, [sp, #4]
 8004c0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c16:	4259      	negs	r1, r3
 8004c18:	4159      	adcs	r1, r3
 8004c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c1e:	e7eb      	b.n	8004bf8 <__swhatbuf_r+0x24>

08004c20 <__smakebuf_r>:
 8004c20:	898b      	ldrh	r3, [r1, #12]
 8004c22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c24:	079d      	lsls	r5, r3, #30
 8004c26:	4606      	mov	r6, r0
 8004c28:	460c      	mov	r4, r1
 8004c2a:	d507      	bpl.n	8004c3c <__smakebuf_r+0x1c>
 8004c2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c30:	6023      	str	r3, [r4, #0]
 8004c32:	6123      	str	r3, [r4, #16]
 8004c34:	2301      	movs	r3, #1
 8004c36:	6163      	str	r3, [r4, #20]
 8004c38:	b003      	add	sp, #12
 8004c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3c:	ab01      	add	r3, sp, #4
 8004c3e:	466a      	mov	r2, sp
 8004c40:	f7ff ffc8 	bl	8004bd4 <__swhatbuf_r>
 8004c44:	9f00      	ldr	r7, [sp, #0]
 8004c46:	4605      	mov	r5, r0
 8004c48:	4639      	mov	r1, r7
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	f7ff fb18 	bl	8004280 <_malloc_r>
 8004c50:	b948      	cbnz	r0, 8004c66 <__smakebuf_r+0x46>
 8004c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c56:	059a      	lsls	r2, r3, #22
 8004c58:	d4ee      	bmi.n	8004c38 <__smakebuf_r+0x18>
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	f043 0302 	orr.w	r3, r3, #2
 8004c62:	81a3      	strh	r3, [r4, #12]
 8004c64:	e7e2      	b.n	8004c2c <__smakebuf_r+0xc>
 8004c66:	89a3      	ldrh	r3, [r4, #12]
 8004c68:	6020      	str	r0, [r4, #0]
 8004c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c6e:	81a3      	strh	r3, [r4, #12]
 8004c70:	9b01      	ldr	r3, [sp, #4]
 8004c72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004c76:	b15b      	cbz	r3, 8004c90 <__smakebuf_r+0x70>
 8004c78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f000 f81d 	bl	8004cbc <_isatty_r>
 8004c82:	b128      	cbz	r0, 8004c90 <__smakebuf_r+0x70>
 8004c84:	89a3      	ldrh	r3, [r4, #12]
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	81a3      	strh	r3, [r4, #12]
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	431d      	orrs	r5, r3
 8004c94:	81a5      	strh	r5, [r4, #12]
 8004c96:	e7cf      	b.n	8004c38 <__smakebuf_r+0x18>

08004c98 <_fstat_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d07      	ldr	r5, [pc, #28]	@ (8004cb8 <_fstat_r+0x20>)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	4608      	mov	r0, r1
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	602b      	str	r3, [r5, #0]
 8004ca6:	f7fb fedc 	bl	8000a62 <_fstat>
 8004caa:	1c43      	adds	r3, r0, #1
 8004cac:	d102      	bne.n	8004cb4 <_fstat_r+0x1c>
 8004cae:	682b      	ldr	r3, [r5, #0]
 8004cb0:	b103      	cbz	r3, 8004cb4 <_fstat_r+0x1c>
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	bd38      	pop	{r3, r4, r5, pc}
 8004cb6:	bf00      	nop
 8004cb8:	200002a8 	.word	0x200002a8

08004cbc <_isatty_r>:
 8004cbc:	b538      	push	{r3, r4, r5, lr}
 8004cbe:	4d06      	ldr	r5, [pc, #24]	@ (8004cd8 <_isatty_r+0x1c>)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	4608      	mov	r0, r1
 8004cc6:	602b      	str	r3, [r5, #0]
 8004cc8:	f7fb fedb 	bl	8000a82 <_isatty>
 8004ccc:	1c43      	adds	r3, r0, #1
 8004cce:	d102      	bne.n	8004cd6 <_isatty_r+0x1a>
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	b103      	cbz	r3, 8004cd6 <_isatty_r+0x1a>
 8004cd4:	6023      	str	r3, [r4, #0]
 8004cd6:	bd38      	pop	{r3, r4, r5, pc}
 8004cd8:	200002a8 	.word	0x200002a8

08004cdc <_init>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	bf00      	nop
 8004ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ce2:	bc08      	pop	{r3}
 8004ce4:	469e      	mov	lr, r3
 8004ce6:	4770      	bx	lr

08004ce8 <_fini>:
 8004ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cea:	bf00      	nop
 8004cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cee:	bc08      	pop	{r3}
 8004cf0:	469e      	mov	lr, r3
 8004cf2:	4770      	bx	lr
