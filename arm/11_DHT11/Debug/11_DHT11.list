
11_DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08004260  08004260  00005260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004334  08004334  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004334  08004334  00005334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800433c  0800433c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800433c  0800433c  0000533c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004340  08004340  00005340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004344  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  20000068  080043ac  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080043ac  00006270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d288  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234e  00000000  00000000  00013320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00015670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000941  00000000  00000000  00016280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b14  00000000  00000000  00016bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e604  00000000  00000000  0002e6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fd15  00000000  00000000  0003ccd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc9ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003884  00000000  00000000  000cca34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d02b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004248 	.word	0x08004248

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004248 	.word	0x08004248

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <delay_us>:
#include "delay_us.h"



void delay_us(uint16_t us)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim11,0);
 80005b6:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <delay_us+0x30>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2200      	movs	r2, #0
 80005bc:	625a      	str	r2, [r3, #36]	@ 0x24
  while((__HAL_TIM_GET_COUNTER(&htim11))<us);
 80005be:	bf00      	nop
 80005c0:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <delay_us+0x30>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80005c6:	88fb      	ldrh	r3, [r7, #6]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d3f9      	bcc.n	80005c0 <delay_us+0x14>
}
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000090 	.word	0x20000090

080005e0 <dht11Init>:
#include "dht11.h"


//DHT11 초기화
void dht11Init(DHT11 *dht, GPIO_TypeDef *port, uint16_t pin)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	4613      	mov	r3, r2
 80005ec:	80fb      	strh	r3, [r7, #6]
  //struct's port, pin setting
  dht->port = port;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	68ba      	ldr	r2, [r7, #8]
 80005f2:	601a      	str	r2, [r3, #0]
  dht->pin = pin;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	88fa      	ldrh	r2, [r7, #6]
 80005f8:	809a      	strh	r2, [r3, #4]

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <dht11GpioMode>:

void dht11GpioMode(DHT11 *dht, uint8_t mode)
{
 8000606:	b580      	push	{r7, lr}
 8000608:	b088      	sub	sp, #32
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
 800060e:	460b      	mov	r3, r1
 8000610:	70fb      	strb	r3, [r7, #3]
  GPIO_InitTypeDef GPIO_InitStruct = {0};       //gpioc struct define and initialize
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]


  if(mode == OUTPUT)                            //output mode setting
 8000622:	78fb      	ldrb	r3, [r7, #3]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d111      	bne.n	800064c <dht11GpioMode+0x46>
  {
    /*Configure GPIO pin : PC4 */
     GPIO_InitStruct.Pin = dht->pin;              //change pin number for struct's member
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	889b      	ldrh	r3, [r3, #4]
 800062c:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	2301      	movs	r3, #1
 8000630:	613b      	str	r3, [r7, #16]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
     HAL_GPIO_Init(dht->port, &GPIO_InitStruct);  //change port for struct's member
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f107 020c 	add.w	r2, r7, #12
 8000642:	4611      	mov	r1, r2
 8000644:	4618      	mov	r0, r3
 8000646:	f000 feb5 	bl	80013b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;      //test check
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
  }

}
 800064a:	e013      	b.n	8000674 <dht11GpioMode+0x6e>
  else if(mode == INPUT)                          //input mode setting
 800064c:	78fb      	ldrb	r3, [r7, #3]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d110      	bne.n	8000674 <dht11GpioMode+0x6e>
    GPIO_InitStruct.Pin = dht->pin;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	889b      	ldrh	r3, [r3, #4]
 8000656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;      //test check
 8000660:	2303      	movs	r3, #3
 8000662:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f107 020c 	add.w	r2, r7, #12
 800066c:	4611      	mov	r1, r2
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fea0 	bl	80013b4 <HAL_GPIO_Init>
}
 8000674:	bf00      	nop
 8000676:	3720      	adds	r7, #32
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <dht11Read>:


//dht11 data read
uint8_t dht11Read(DHT11 *dht)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b090      	sub	sp, #64	@ 0x40
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  bool ret = true;
 8000684:	2301      	movs	r3, #1
 8000686:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  uint16_t timeTick = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	867b      	strh	r3, [r7, #50]	@ 0x32
  uint8_t pulse[40] = {0};            //40bit data save array
 800068e:	f107 0308 	add.w	r3, r7, #8
 8000692:	2228      	movs	r2, #40	@ 0x28
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 f854 	bl	8003744 <memset>

  //temperature, humidity value
  uint8_t humValue1 = 0, humValue2 = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80006a2:	2300      	movs	r3, #0
 80006a4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  uint8_t tempValue1 = 0, tempValue2 = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80006ae:	2300      	movs	r3, #0
 80006b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  uint8_t parityValue = 0;                  //checksum bit
 80006b4:	2300      	movs	r3, #0
 80006b6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

  HAL_TIM_Base_Start(&htim11);
 80006ba:	48a4      	ldr	r0, [pc, #656]	@ (800094c <dht11Read+0x2d0>)
 80006bc:	f001 fd18 	bl	80020f0 <HAL_TIM_Base_Start>

  //signal transfer
  dht11GpioMode(dht, OUTPUT);           //output setting
 80006c0:	2101      	movs	r1, #1
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ff9f 	bl	8000606 <dht11GpioMode>

  HAL_GPIO_WritePin(dht->port, dht->pin, 0);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	6818      	ldr	r0, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	889b      	ldrh	r3, [r3, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	f001 f80a 	bl	80016ec <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80006d8:	2014      	movs	r0, #20
 80006da:	f000 fca3 	bl	8001024 <HAL_Delay>
  HAL_GPIO_WritePin(dht->port, dht->pin, 1);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	889b      	ldrh	r3, [r3, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	4619      	mov	r1, r3
 80006ea:	f000 ffff 	bl	80016ec <HAL_GPIO_WritePin>
  delay_us(30);
 80006ee:	201e      	movs	r0, #30
 80006f0:	f7ff ff5c 	bl	80005ac <delay_us>

  dht11GpioMode(dht, INPUT);            //input setting
 80006f4:	2100      	movs	r1, #0
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f7ff ff85 	bl	8000606 <dht11GpioMode>

  //dht11 response wait
  __HAL_TIM_SET_COUNTER(&htim11,0);   //counter initialize
 80006fc:	4b93      	ldr	r3, [pc, #588]	@ (800094c <dht11Read+0x2d0>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2200      	movs	r2, #0
 8000702:	625a      	str	r2, [r3, #36]	@ 0x24

  while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET)    //low signal wait
 8000704:	e008      	b.n	8000718 <dht11Read+0x9c>
  {
    if(__HAL_TIM_GET_COUNTER(&htim11)>100)                          //data sheet 80us is very tight
 8000706:	4b91      	ldr	r3, [pc, #580]	@ (800094c <dht11Read+0x2d0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800070c:	2b64      	cmp	r3, #100	@ 0x64
 800070e:	d903      	bls.n	8000718 <dht11Read+0x9c>
    {
      printf("low signal time out\r\n");
 8000710:	488f      	ldr	r0, [pc, #572]	@ (8000950 <dht11Read+0x2d4>)
 8000712:	f002 ff37 	bl	8003584 <puts>
      break;
 8000716:	e00a      	b.n	800072e <dht11Read+0xb2>
  while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET)    //low signal wait
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	4619      	mov	r1, r3
 8000722:	4610      	mov	r0, r2
 8000724:	f000 ffca 	bl	80016bc <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0eb      	beq.n	8000706 <dht11Read+0x8a>
    }
  }

  __HAL_TIM_SET_COUNTER(&htim11,0);   //counter initialize
 800072e:	4b87      	ldr	r3, [pc, #540]	@ (800094c <dht11Read+0x2d0>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24

  while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)    //high signal wait
 8000736:	e008      	b.n	800074a <dht11Read+0xce>
  {
    if(__HAL_TIM_GET_COUNTER(&htim11)>100)                          //data sheet 80us is very tight
 8000738:	4b84      	ldr	r3, [pc, #528]	@ (800094c <dht11Read+0x2d0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	2b64      	cmp	r3, #100	@ 0x64
 8000740:	d903      	bls.n	800074a <dht11Read+0xce>
    {
      printf("high signal time out\r\n");
 8000742:	4884      	ldr	r0, [pc, #528]	@ (8000954 <dht11Read+0x2d8>)
 8000744:	f002 ff1e 	bl	8003584 <puts>
      break;
 8000748:	e00a      	b.n	8000760 <dht11Read+0xe4>
  while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)    //high signal wait
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	889b      	ldrh	r3, [r3, #4]
 8000752:	4619      	mov	r1, r3
 8000754:	4610      	mov	r0, r2
 8000756:	f000 ffb1 	bl	80016bc <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b01      	cmp	r3, #1
 800075e:	d0eb      	beq.n	8000738 <dht11Read+0xbc>
    }
  }


  //data receive
  for(uint8_t i=0;i<40;i++)       //40bit loop
 8000760:	2300      	movs	r3, #0
 8000762:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8000766:	e03f      	b.n	80007e8 <dht11Read+0x16c>
  {
    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET);   //50us wait
 8000768:	bf00      	nop
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	889b      	ldrh	r3, [r3, #4]
 8000772:	4619      	mov	r1, r3
 8000774:	4610      	mov	r0, r2
 8000776:	f000 ffa1 	bl	80016bc <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f4      	beq.n	800076a <dht11Read+0xee>

    __HAL_TIM_SET_COUNTER(&htim11,0);
 8000780:	4b72      	ldr	r3, [pc, #456]	@ (800094c <dht11Read+0x2d0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	@ 0x24

    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 8000788:	e01e      	b.n	80007c8 <dht11Read+0x14c>
    {
      timeTick = __HAL_TIM_GET_COUNTER(&htim11);        //high signal verify
 800078a:	4b70      	ldr	r3, [pc, #448]	@ (800094c <dht11Read+0x2d0>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000790:	867b      	strh	r3, [r7, #50]	@ 0x32

      //signal length check 0 or 1
      if(timeTick >20 && timeTick <30)
 8000792:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8000794:	2b14      	cmp	r3, #20
 8000796:	d90a      	bls.n	80007ae <dht11Read+0x132>
 8000798:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800079a:	2b1d      	cmp	r3, #29
 800079c:	d807      	bhi.n	80007ae <dht11Read+0x132>
      {
        pulse[i] = 0;
 800079e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80007a2:	3340      	adds	r3, #64	@ 0x40
 80007a4:	443b      	add	r3, r7
 80007a6:	2200      	movs	r2, #0
 80007a8:	f803 2c38 	strb.w	r2, [r3, #-56]
 80007ac:	e00c      	b.n	80007c8 <dht11Read+0x14c>
      }
      else if(timeTick > 65 && timeTick <85)
 80007ae:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80007b0:	2b41      	cmp	r3, #65	@ 0x41
 80007b2:	d909      	bls.n	80007c8 <dht11Read+0x14c>
 80007b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80007b6:	2b54      	cmp	r3, #84	@ 0x54
 80007b8:	d806      	bhi.n	80007c8 <dht11Read+0x14c>
      {
        pulse[i] = 1;
 80007ba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80007be:	3340      	adds	r3, #64	@ 0x40
 80007c0:	443b      	add	r3, r7
 80007c2:	2201      	movs	r2, #1
 80007c4:	f803 2c38 	strb.w	r2, [r3, #-56]
    while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	889b      	ldrh	r3, [r3, #4]
 80007d0:	4619      	mov	r1, r3
 80007d2:	4610      	mov	r0, r2
 80007d4:	f000 ff72 	bl	80016bc <HAL_GPIO_ReadPin>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d0d5      	beq.n	800078a <dht11Read+0x10e>
  for(uint8_t i=0;i<40;i++)       //40bit loop
 80007de:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80007e2:	3301      	adds	r3, #1
 80007e4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80007e8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80007ec:	2b27      	cmp	r3, #39	@ 0x27
 80007ee:	d9bb      	bls.n	8000768 <dht11Read+0xec>
      }
    }
  }

  HAL_TIM_Base_Stop(&htim11);
 80007f0:	4856      	ldr	r0, [pc, #344]	@ (800094c <dht11Read+0x2d0>)
 80007f2:	f001 fcd7 	bl	80021a4 <HAL_TIM_Base_Stop>

  //temperature, humidity data processing
  for(uint8_t i=0;i<8;i++){
 80007f6:	2300      	movs	r3, #0
 80007f8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 80007fc:	e011      	b.n	8000822 <dht11Read+0x1a6>
    humValue1 = (humValue1 << 1) + pulse[i];      //humidity upper 8bit
 80007fe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	b2da      	uxtb	r2, r3
 8000806:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800080a:	3340      	adds	r3, #64	@ 0x40
 800080c:	443b      	add	r3, r7
 800080e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000812:	4413      	add	r3, r2
 8000814:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  for(uint8_t i=0;i<8;i++){
 8000818:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800081c:	3301      	adds	r3, #1
 800081e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8000822:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000826:	2b07      	cmp	r3, #7
 8000828:	d9e9      	bls.n	80007fe <dht11Read+0x182>
  }

  //길어서 모냥 바꾼거 뿐
  for(uint8_t i=8;i<16;i++){humValue2 = (humValue2 << 1) + pulse[i];}
 800082a:	2308      	movs	r3, #8
 800082c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000830:	e011      	b.n	8000856 <dht11Read+0x1da>
 8000832:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	b2da      	uxtb	r2, r3
 800083a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800083e:	3340      	adds	r3, #64	@ 0x40
 8000840:	443b      	add	r3, r7
 8000842:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8000846:	4413      	add	r3, r2
 8000848:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 800084c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000850:	3301      	adds	r3, #1
 8000852:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000856:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800085a:	2b0f      	cmp	r3, #15
 800085c:	d9e9      	bls.n	8000832 <dht11Read+0x1b6>
  for(uint8_t i=16;i<24;i++){tempValue1 = (tempValue1 << 1) + pulse[i];}
 800085e:	2310      	movs	r3, #16
 8000860:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8000864:	e011      	b.n	800088a <dht11Read+0x20e>
 8000866:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000872:	3340      	adds	r3, #64	@ 0x40
 8000874:	443b      	add	r3, r7
 8000876:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 800087a:	4413      	add	r3, r2
 800087c:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 8000880:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000884:	3301      	adds	r3, #1
 8000886:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800088a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800088e:	2b17      	cmp	r3, #23
 8000890:	d9e9      	bls.n	8000866 <dht11Read+0x1ea>
  for(uint8_t i=24;i<32;i++){tempValue2 = (tempValue2 << 1) + pulse[i];}
 8000892:	2318      	movs	r3, #24
 8000894:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8000898:	e011      	b.n	80008be <dht11Read+0x242>
 800089a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80008a6:	3340      	adds	r3, #64	@ 0x40
 80008a8:	443b      	add	r3, r7
 80008aa:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80008ae:	4413      	add	r3, r2
 80008b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
 80008b4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80008b8:	3301      	adds	r3, #1
 80008ba:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 80008be:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80008c2:	2b1f      	cmp	r3, #31
 80008c4:	d9e9      	bls.n	800089a <dht11Read+0x21e>

  for(uint8_t i=32;i<40;i++){parityValue = (parityValue <<1) + pulse[i];}
 80008c6:	2320      	movs	r3, #32
 80008c8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80008cc:	e011      	b.n	80008f2 <dht11Read+0x276>
 80008ce:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008da:	3340      	adds	r3, #64	@ 0x40
 80008dc:	443b      	add	r3, r7
 80008de:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 80008e2:	4413      	add	r3, r2
 80008e4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 80008e8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008ec:	3301      	adds	r3, #1
 80008ee:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 80008f2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80008f6:	2b27      	cmp	r3, #39	@ 0x27
 80008f8:	d9e9      	bls.n	80008ce <dht11Read+0x252>


  //our struct's member value insert
  dht->temperature = tempValue1;        //temperature save
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8000900:	719a      	strb	r2, [r3, #6]
  dht->humidity = humValue1;            //humidity save
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8000908:	71da      	strb	r2, [r3, #7]

  //data check sum verifying
  uint8_t checksum = humValue1 + humValue2 + tempValue1 + tempValue2;
 800090a:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800090e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8000912:	4413      	add	r3, r2
 8000914:	b2da      	uxtb	r2, r3
 8000916:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800091a:	4413      	add	r3, r2
 800091c:	b2da      	uxtb	r2, r3
 800091e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8000922:	4413      	add	r3, r2
 8000924:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  if(checksum != parityValue)
 8000928:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800092c:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8000930:	429a      	cmp	r2, r3
 8000932:	d005      	beq.n	8000940 <dht11Read+0x2c4>
  {
    printf("check sum error\r\n");
 8000934:	4808      	ldr	r0, [pc, #32]	@ (8000958 <dht11Read+0x2dc>)
 8000936:	f002 fe25 	bl	8003584 <puts>
    ret = false;
 800093a:	2300      	movs	r3, #0
 800093c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return ret;
 8000940:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8000944:	4618      	mov	r0, r3
 8000946:	3740      	adds	r7, #64	@ 0x40
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000090 	.word	0x20000090
 8000950:	08004260 	.word	0x08004260
 8000954:	08004278 	.word	0x08004278
 8000958:	08004290 	.word	0x08004290

0800095c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <MX_GPIO_Init+0x98>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a1e      	ldr	r2, [pc, #120]	@ (80009f4 <MX_GPIO_Init+0x98>)
 800097c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <MX_GPIO_Init+0x98>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <MX_GPIO_Init+0x98>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <MX_GPIO_Init+0x98>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <MX_GPIO_Init+0x98>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	603b      	str	r3, [r7, #0]
 80009ae:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <MX_GPIO_Init+0x98>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a10      	ldr	r2, [pc, #64]	@ (80009f4 <MX_GPIO_Init+0x98>)
 80009b4:	f043 0304 	orr.w	r3, r3, #4
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b0e      	ldr	r3, [pc, #56]	@ (80009f4 <MX_GPIO_Init+0x98>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0304 	and.w	r3, r3, #4
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2110      	movs	r1, #16
 80009ca:	480b      	ldr	r0, [pc, #44]	@ (80009f8 <MX_GPIO_Init+0x9c>)
 80009cc:	f000 fe8e 	bl	80016ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80009d0:	2310      	movs	r3, #16
 80009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	4804      	ldr	r0, [pc, #16]	@ (80009f8 <MX_GPIO_Init+0x9c>)
 80009e8:	f000 fce4 	bl	80013b4 <HAL_GPIO_Init>

}
 80009ec:	bf00      	nop
 80009ee:	3720      	adds	r7, #32
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020800 	.word	0x40020800

080009fc <_write>:

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

int _write(int file, unsigned char* p, int len)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	60b9      	str	r1, [r7, #8]
 8000a06:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_UART_Transmit(&huart2, p, len, 100);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	2364      	movs	r3, #100	@ 0x64
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	4807      	ldr	r0, [pc, #28]	@ (8000a30 <_write+0x34>)
 8000a12:	f001 fcc5 	bl	80023a0 <HAL_UART_Transmit>
 8000a16:	4603      	mov	r3, r0
 8000a18:	75fb      	strb	r3, [r7, #23]
    return (status == HAL_OK ? len : 0);
 8000a1a:	7dfb      	ldrb	r3, [r7, #23]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d101      	bne.n	8000a24 <_write+0x28>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	e000      	b.n	8000a26 <_write+0x2a>
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000d8 	.word	0x200000d8

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a38:	f000 fa82 	bl	8000f40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3c:	f000 f82c 	bl	8000a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a40:	f7ff ff8c 	bl	800095c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a44:	f000 f9d8 	bl	8000df8 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000a48:	f000 f990 	bl	8000d6c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  dht11Init(&dht, GPIOC, GPIO_PIN_4);
 8000a4c:	2210      	movs	r2, #16
 8000a4e:	490e      	ldr	r1, [pc, #56]	@ (8000a88 <main+0x54>)
 8000a50:	480e      	ldr	r0, [pc, #56]	@ (8000a8c <main+0x58>)
 8000a52:	f7ff fdc5 	bl	80005e0 <dht11Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //dht11 데이터 읽기
	  if(dht11Read(&dht))
 8000a56:	480d      	ldr	r0, [pc, #52]	@ (8000a8c <main+0x58>)
 8000a58:	f7ff fe10 	bl	800067c <dht11Read>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d009      	beq.n	8000a76 <main+0x42>
	  {
		  printf("temperature : %d C, Humidity : %d %% \r\n",dht.temperature, dht.humidity);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <main+0x58>)
 8000a64:	799b      	ldrb	r3, [r3, #6]
 8000a66:	4619      	mov	r1, r3
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <main+0x58>)
 8000a6a:	79db      	ldrb	r3, [r3, #7]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	4808      	ldr	r0, [pc, #32]	@ (8000a90 <main+0x5c>)
 8000a70:	f002 fd20 	bl	80034b4 <iprintf>
 8000a74:	e002      	b.n	8000a7c <main+0x48>
	  }
	  else
	  {
		  printf("Failed read data from DHT11\n");
 8000a76:	4807      	ldr	r0, [pc, #28]	@ (8000a94 <main+0x60>)
 8000a78:	f002 fd84 	bl	8003584 <puts>
	  }
	  HAL_Delay(2000);
 8000a7c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a80:	f000 fad0 	bl	8001024 <HAL_Delay>
	  if(dht11Read(&dht))
 8000a84:	e7e7      	b.n	8000a56 <main+0x22>
 8000a86:	bf00      	nop
 8000a88:	40020800 	.word	0x40020800
 8000a8c:	20000084 	.word	0x20000084
 8000a90:	080042a4 	.word	0x080042a4
 8000a94:	080042cc 	.word	0x080042cc

08000a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b094      	sub	sp, #80	@ 0x50
 8000a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	2230      	movs	r2, #48	@ 0x30
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f002 fe4c 	bl	8003744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <SystemClock_Config+0xc8>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	4a26      	ldr	r2, [pc, #152]	@ (8000b60 <SystemClock_Config+0xc8>)
 8000ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000acc:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <SystemClock_Config+0xc8>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <SystemClock_Config+0xcc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a20      	ldr	r2, [pc, #128]	@ (8000b64 <SystemClock_Config+0xcc>)
 8000ae2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <SystemClock_Config+0xcc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000af4:	2301      	movs	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afe:	2302      	movs	r3, #2
 8000b00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b08:	2304      	movs	r3, #4
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000b0c:	2364      	movs	r3, #100	@ 0x64
 8000b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fdff 	bl	8001720 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b28:	f000 f81e 	bl	8000b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b30:	2302      	movs	r3, #2
 8000b32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	2103      	movs	r1, #3
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 f861 	bl	8001c10 <HAL_RCC_ClockConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b54:	f000 f808 	bl	8000b68 <Error_Handler>
  }
}
 8000b58:	bf00      	nop
 8000b5a:	3750      	adds	r7, #80	@ 0x50
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b6c:	b672      	cpsid	i
}
 8000b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <Error_Handler+0x8>

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b82:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	4a08      	ldr	r2, [pc, #32]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40023800 	.word	0x40023800

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1a:	f000 f9e3 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c28:	4802      	ldr	r0, [pc, #8]	@ (8000c34 <USART2_IRQHandler+0x10>)
 8000c2a:	f001 fc45 	bl	80024b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200000d8 	.word	0x200000d8

08000c38 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
 8000c48:	e00a      	b.n	8000c60 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	4601      	mov	r1, r0
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	b2ca      	uxtb	r2, r1
 8000c58:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	dbf0      	blt.n	8000c4a <_read+0x12>
  }

  return len;
 8000c68:	687b      	ldr	r3, [r7, #4]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c9a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c9c:	2300      	movs	r3, #0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_isatty>:

int _isatty(int file)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3714      	adds	r7, #20
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce4:	4a14      	ldr	r2, [pc, #80]	@ (8000d38 <_sbrk+0x5c>)
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <_sbrk+0x60>)
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf0:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <_sbrk+0x64>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d102      	bne.n	8000cfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf8:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <_sbrk+0x64>)
 8000cfa:	4a12      	ldr	r2, [pc, #72]	@ (8000d44 <_sbrk+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfe:	4b10      	ldr	r3, [pc, #64]	@ (8000d40 <_sbrk+0x64>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d207      	bcs.n	8000d1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d0c:	f002 fd68 	bl	80037e0 <__errno>
 8000d10:	4603      	mov	r3, r0
 8000d12:	220c      	movs	r2, #12
 8000d14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d1a:	e009      	b.n	8000d30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <_sbrk+0x64>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d22:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <_sbrk+0x64>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	4a05      	ldr	r2, [pc, #20]	@ (8000d40 <_sbrk+0x64>)
 8000d2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2e:	68fb      	ldr	r3, [r7, #12]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3718      	adds	r7, #24
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20020000 	.word	0x20020000
 8000d3c:	00000400 	.word	0x00000400
 8000d40:	2000008c 	.word	0x2000008c
 8000d44:	20000270 	.word	0x20000270

08000d48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000d70:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_TIM11_Init+0x40>)
 8000d72:	4a0f      	ldr	r2, [pc, #60]	@ (8000db0 <MX_TIM11_Init+0x44>)
 8000d74:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8000d76:	4b0d      	ldr	r3, [pc, #52]	@ (8000dac <MX_TIM11_Init+0x40>)
 8000d78:	2263      	movs	r2, #99	@ 0x63
 8000d7a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <MX_TIM11_Init+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <MX_TIM11_Init+0x40>)
 8000d84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d88:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <MX_TIM11_Init+0x40>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_TIM11_Init+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_TIM11_Init+0x40>)
 8000d98:	f001 f95a 	bl	8002050 <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000da2:	f7ff fee1 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000090 	.word	0x20000090
 8000db0:	40014800 	.word	0x40014800

08000db4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d10d      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_TIM_Base_MspInit+0x40>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	4a09      	ldr	r2, [pc, #36]	@ (8000df4 <HAL_TIM_Base_MspInit+0x40>)
 8000dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <HAL_TIM_Base_MspInit+0x40>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dda:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40014800 	.word	0x40014800
 8000df4:	40023800 	.word	0x40023800

08000df8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	@ (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	4a12      	ldr	r2, [pc, #72]	@ (8000e48 <MX_USART2_UART_Init+0x50>)
 8000e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	@ (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	220c      	movs	r2, #12
 8000e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	@ (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	@ (8000e44 <MX_USART2_UART_Init+0x4c>)
 8000e30:	f001 fa66 	bl	8002300 <HAL_UART_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e3a:	f7ff fe95 	bl	8000b68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200000d8 	.word	0x200000d8
 8000e48:	40004400 	.word	0x40004400

08000e4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	@ 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee0 <HAL_UART_MspInit+0x94>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d133      	bne.n	8000ed6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e76:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4a14      	ldr	r2, [pc, #80]	@ (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <HAL_UART_MspInit+0x98>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ea6:	230c      	movs	r3, #12
 8000ea8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4809      	ldr	r0, [pc, #36]	@ (8000ee8 <HAL_UART_MspInit+0x9c>)
 8000ec2:	f000 fa77 	bl	80013b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2026      	movs	r0, #38	@ 0x26
 8000ecc:	f000 f9a9 	bl	8001222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ed0:	2026      	movs	r0, #38	@ 0x26
 8000ed2:	f000 f9c2 	bl	800125a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	@ 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000eec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ef0:	f7ff ff2a 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef4:	480c      	ldr	r0, [pc, #48]	@ (8000f28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef6:	490d      	ldr	r1, [pc, #52]	@ (8000f2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000efa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000efc:	e002      	b.n	8000f04 <LoopCopyDataInit>

08000efe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f02:	3304      	adds	r3, #4

08000f04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f08:	d3f9      	bcc.n	8000efe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f10:	e001      	b.n	8000f16 <LoopFillZerobss>

08000f12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f14:	3204      	adds	r2, #4

08000f16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f18:	d3fb      	bcc.n	8000f12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f1a:	f002 fc67 	bl	80037ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1e:	f7ff fd89 	bl	8000a34 <main>
  bx  lr    
 8000f22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f2c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f30:	08004344 	.word	0x08004344
  ldr r2, =_sbss
 8000f34:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f38:	20000270 	.word	0x20000270

08000f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f3c:	e7fe      	b.n	8000f3c <ADC_IRQHandler>
	...

08000f40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <HAL_Init+0x40>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <HAL_Init+0x40>)
 8000f4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <HAL_Init+0x40>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0a      	ldr	r2, [pc, #40]	@ (8000f80 <HAL_Init+0x40>)
 8000f56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5c:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a07      	ldr	r2, [pc, #28]	@ (8000f80 <HAL_Init+0x40>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f68:	2003      	movs	r0, #3
 8000f6a:	f000 f94f 	bl	800120c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6e:	200f      	movs	r0, #15
 8000f70:	f000 f808 	bl	8000f84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f74:	f7ff fdfe 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023c00 	.word	0x40023c00

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f8c:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <HAL_InitTick+0x54>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b12      	ldr	r3, [pc, #72]	@ (8000fdc <HAL_InitTick+0x58>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f967 	bl	8001276 <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fc0:	f000 f92f 	bl	8001222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <HAL_InitTick+0x5c>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000008 	.word	0x20000008
 8001008:	20000120 	.word	0x20000120

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000120 	.word	0x20000120

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	@ (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000008 	.word	0x20000008

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4907      	ldr	r1, [pc, #28]	@ (8001108 <__NVIC_EnableIRQ+0x38>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100

0800110c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	6039      	str	r1, [r7, #0]
 8001116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111c:	2b00      	cmp	r3, #0
 800111e:	db0a      	blt.n	8001136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	b2da      	uxtb	r2, r3
 8001124:	490c      	ldr	r1, [pc, #48]	@ (8001158 <__NVIC_SetPriority+0x4c>)
 8001126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800112a:	0112      	lsls	r2, r2, #4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	440b      	add	r3, r1
 8001130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001134:	e00a      	b.n	800114c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4908      	ldr	r1, [pc, #32]	@ (800115c <__NVIC_SetPriority+0x50>)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	3b04      	subs	r3, #4
 8001144:	0112      	lsls	r2, r2, #4
 8001146:	b2d2      	uxtb	r2, r2
 8001148:	440b      	add	r3, r1
 800114a:	761a      	strb	r2, [r3, #24]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001160:	b480      	push	{r7}
 8001162:	b089      	sub	sp, #36	@ 0x24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2b04      	cmp	r3, #4
 800117c:	bf28      	it	cs
 800117e:	2304      	movcs	r3, #4
 8001180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	3304      	adds	r3, #4
 8001186:	2b06      	cmp	r3, #6
 8001188:	d902      	bls.n	8001190 <NVIC_EncodePriority+0x30>
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3b03      	subs	r3, #3
 800118e:	e000      	b.n	8001192 <NVIC_EncodePriority+0x32>
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43da      	mvns	r2, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	401a      	ands	r2, r3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa01 f303 	lsl.w	r3, r1, r3
 80011b2:	43d9      	mvns	r1, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	4313      	orrs	r3, r2
         );
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	@ 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011d8:	d301      	bcc.n	80011de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011da:	2301      	movs	r3, #1
 80011dc:	e00f      	b.n	80011fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <SysTick_Config+0x40>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e6:	210f      	movs	r1, #15
 80011e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011ec:	f7ff ff8e 	bl	800110c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	@ (8001208 <SysTick_Config+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <SysTick_Config+0x40>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ff29 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001222:	b580      	push	{r7, lr}
 8001224:	b086      	sub	sp, #24
 8001226:	af00      	add	r7, sp, #0
 8001228:	4603      	mov	r3, r0
 800122a:	60b9      	str	r1, [r7, #8]
 800122c:	607a      	str	r2, [r7, #4]
 800122e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001234:	f7ff ff3e 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68b9      	ldr	r1, [r7, #8]
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	f7ff ff8e 	bl	8001160 <NVIC_EncodePriority>
 8001244:	4602      	mov	r2, r0
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff5d 	bl	800110c <__NVIC_SetPriority>
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff31 	bl	80010d0 <__NVIC_EnableIRQ>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffa2 	bl	80011c8 <SysTick_Config>
 8001284:	4603      	mov	r3, r0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b084      	sub	sp, #16
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800129c:	f7ff feb6 	bl	800100c <HAL_GetTick>
 80012a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d008      	beq.n	80012c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2280      	movs	r2, #128	@ 0x80
 80012b2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e052      	b.n	8001366 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f022 0216 	bic.w	r2, r2, #22
 80012ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	695a      	ldr	r2, [r3, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <HAL_DMA_Abort+0x62>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d007      	beq.n	8001300 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f022 0208 	bic.w	r2, r2, #8
 80012fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001310:	e013      	b.n	800133a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001312:	f7ff fe7b 	bl	800100c <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b05      	cmp	r3, #5
 800131e:	d90c      	bls.n	800133a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2220      	movs	r2, #32
 8001324:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e015      	b.n	8001366 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1e4      	bne.n	8001312 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800134c:	223f      	movs	r2, #63	@ 0x3f
 800134e:	409a      	lsls	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d004      	beq.n	800138c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2280      	movs	r2, #128	@ 0x80
 8001386:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e00c      	b.n	80013a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2205      	movs	r2, #5
 8001390:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	e159      	b.n	8001684 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8148 	bne.w	800167e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d005      	beq.n	8001406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001402:	2b02      	cmp	r3, #2
 8001404:	d130      	bne.n	8001468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143c:	2201      	movs	r2, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	f003 0201 	and.w	r2, r3, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b03      	cmp	r3, #3
 8001472:	d017      	beq.n	80014a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d123      	bne.n	80014f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	08da      	lsrs	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3208      	adds	r2, #8
 80014f2:	69b9      	ldr	r1, [r7, #24]
 80014f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0203 	and.w	r2, r3, #3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80a2 	beq.w	800167e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b57      	ldr	r3, [pc, #348]	@ (800169c <HAL_GPIO_Init+0x2e8>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	4a56      	ldr	r2, [pc, #344]	@ (800169c <HAL_GPIO_Init+0x2e8>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001548:	6453      	str	r3, [r2, #68]	@ 0x44
 800154a:	4b54      	ldr	r3, [pc, #336]	@ (800169c <HAL_GPIO_Init+0x2e8>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001556:	4a52      	ldr	r2, [pc, #328]	@ (80016a0 <HAL_GPIO_Init+0x2ec>)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a49      	ldr	r2, [pc, #292]	@ (80016a4 <HAL_GPIO_Init+0x2f0>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d019      	beq.n	80015b6 <HAL_GPIO_Init+0x202>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a48      	ldr	r2, [pc, #288]	@ (80016a8 <HAL_GPIO_Init+0x2f4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_GPIO_Init+0x1fe>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a47      	ldr	r2, [pc, #284]	@ (80016ac <HAL_GPIO_Init+0x2f8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d00d      	beq.n	80015ae <HAL_GPIO_Init+0x1fa>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a46      	ldr	r2, [pc, #280]	@ (80016b0 <HAL_GPIO_Init+0x2fc>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d007      	beq.n	80015aa <HAL_GPIO_Init+0x1f6>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a45      	ldr	r2, [pc, #276]	@ (80016b4 <HAL_GPIO_Init+0x300>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d101      	bne.n	80015a6 <HAL_GPIO_Init+0x1f2>
 80015a2:	2304      	movs	r3, #4
 80015a4:	e008      	b.n	80015b8 <HAL_GPIO_Init+0x204>
 80015a6:	2307      	movs	r3, #7
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x204>
 80015aa:	2303      	movs	r3, #3
 80015ac:	e004      	b.n	80015b8 <HAL_GPIO_Init+0x204>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e002      	b.n	80015b8 <HAL_GPIO_Init+0x204>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_GPIO_Init+0x204>
 80015b6:	2300      	movs	r3, #0
 80015b8:	69fa      	ldr	r2, [r7, #28]
 80015ba:	f002 0203 	and.w	r2, r2, #3
 80015be:	0092      	lsls	r2, r2, #2
 80015c0:	4093      	lsls	r3, r2
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015c8:	4935      	ldr	r1, [pc, #212]	@ (80016a0 <HAL_GPIO_Init+0x2ec>)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	089b      	lsrs	r3, r3, #2
 80015ce:	3302      	adds	r3, #2
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015d6:	4b38      	ldr	r3, [pc, #224]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015fa:	4a2f      	ldr	r2, [pc, #188]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001600:	4b2d      	ldr	r3, [pc, #180]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001624:	4a24      	ldr	r2, [pc, #144]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800162a:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	43db      	mvns	r3, r3
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	4013      	ands	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800164e:	4a1a      	ldr	r2, [pc, #104]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	43db      	mvns	r3, r3
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	4013      	ands	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001678:	4a0f      	ldr	r2, [pc, #60]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3301      	adds	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b0f      	cmp	r3, #15
 8001688:	f67f aea2 	bls.w	80013d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40013800 	.word	0x40013800
 80016a4:	40020000 	.word	0x40020000
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40013c00 	.word	0x40013c00

080016bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e001      	b.n	80016de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001708:	e003      	b.n	8001712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800170a:	887b      	ldrh	r3, [r7, #2]
 800170c:	041a      	lsls	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	619a      	str	r2, [r3, #24]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
	...

08001720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e267      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d075      	beq.n	800182a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800173e:	4b88      	ldr	r3, [pc, #544]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b04      	cmp	r3, #4
 8001748:	d00c      	beq.n	8001764 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174a:	4b85      	ldr	r3, [pc, #532]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001752:	2b08      	cmp	r3, #8
 8001754:	d112      	bne.n	800177c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001756:	4b82      	ldr	r3, [pc, #520]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001762:	d10b      	bne.n	800177c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	4b7e      	ldr	r3, [pc, #504]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d05b      	beq.n	8001828 <HAL_RCC_OscConfig+0x108>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d157      	bne.n	8001828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e242      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001784:	d106      	bne.n	8001794 <HAL_RCC_OscConfig+0x74>
 8001786:	4b76      	ldr	r3, [pc, #472]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a75      	ldr	r2, [pc, #468]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xb0>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x98>
 800179e:	4b70      	ldr	r3, [pc, #448]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a6f      	ldr	r2, [pc, #444]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a6c      	ldr	r2, [pc, #432]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xb0>
 80017b8:	4b69      	ldr	r3, [pc, #420]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a68      	ldr	r2, [pc, #416]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b66      	ldr	r3, [pc, #408]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a65      	ldr	r2, [pc, #404]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d8:	f7ff fc18 	bl	800100c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fc14 	bl	800100c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	@ 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e207      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xc0>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fc04 	bl	800100c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff fc00 	bl	800100c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	@ 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1f3      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b51      	ldr	r3, [pc, #324]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0xe8>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d063      	beq.n	80018fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001836:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00b      	beq.n	800185a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001842:	4b47      	ldr	r3, [pc, #284]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800184a:	2b08      	cmp	r3, #8
 800184c:	d11c      	bne.n	8001888 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800184e:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d116      	bne.n	8001888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_RCC_OscConfig+0x152>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e1c7      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001872:	4b3b      	ldr	r3, [pc, #236]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	4937      	ldr	r1, [pc, #220]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001886:	e03a      	b.n	80018fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	4b34      	ldr	r3, [pc, #208]	@ (8001964 <HAL_RCC_OscConfig+0x244>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff fbb9 	bl	800100c <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fbb5 	bl	800100c <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1a8      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018bc:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4925      	ldr	r1, [pc, #148]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	600b      	str	r3, [r1, #0]
 80018d0:	e015      	b.n	80018fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <HAL_RCC_OscConfig+0x244>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff fb98 	bl	800100c <HAL_GetTick>
 80018dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e0:	f7ff fb94 	bl	800100c <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e187      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	2b00      	cmp	r3, #0
 8001908:	d036      	beq.n	8001978 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d016      	beq.n	8001940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_RCC_OscConfig+0x248>)
 8001914:	2201      	movs	r2, #1
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff fb78 	bl	800100c <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff fb74 	bl	800100c <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e167      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_OscConfig+0x240>)
 8001934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x200>
 800193e:	e01b      	b.n	8001978 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001940:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <HAL_RCC_OscConfig+0x248>)
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001946:	f7ff fb61 	bl	800100c <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	e00e      	b.n	800196c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff fb5d 	bl	800100c <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d907      	bls.n	800196c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e150      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
 8001960:	40023800 	.word	0x40023800
 8001964:	42470000 	.word	0x42470000
 8001968:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	4b88      	ldr	r3, [pc, #544]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 800196e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ea      	bne.n	800194e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8097 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198a:	4b81      	ldr	r3, [pc, #516]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10f      	bne.n	80019b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	4a7c      	ldr	r2, [pc, #496]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019a6:	4b7a      	ldr	r3, [pc, #488]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b77      	ldr	r3, [pc, #476]	@ (8001b94 <HAL_RCC_OscConfig+0x474>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b74      	ldr	r3, [pc, #464]	@ (8001b94 <HAL_RCC_OscConfig+0x474>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a73      	ldr	r2, [pc, #460]	@ (8001b94 <HAL_RCC_OscConfig+0x474>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7ff fb1d 	bl	800100c <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7ff fb19 	bl	800100c <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e10c      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001b94 <HAL_RCC_OscConfig+0x474>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x2ea>
 80019fc:	4b64      	ldr	r3, [pc, #400]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a00:	4a63      	ldr	r2, [pc, #396]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a08:	e01c      	b.n	8001a44 <HAL_RCC_OscConfig+0x324>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x30c>
 8001a12:	4b5f      	ldr	r3, [pc, #380]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a16:	4a5e      	ldr	r2, [pc, #376]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a22:	4a5b      	ldr	r2, [pc, #364]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0x324>
 8001a2c:	4b58      	ldr	r3, [pc, #352]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a30:	4a57      	ldr	r2, [pc, #348]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a38:	4b55      	ldr	r3, [pc, #340]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3c:	4a54      	ldr	r2, [pc, #336]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a3e:	f023 0304 	bic.w	r3, r3, #4
 8001a42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d015      	beq.n	8001a78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fade 	bl	800100c <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a52:	e00a      	b.n	8001a6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a54:	f7ff fada 	bl	800100c <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e0cb      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	4b49      	ldr	r3, [pc, #292]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0ee      	beq.n	8001a54 <HAL_RCC_OscConfig+0x334>
 8001a76:	e014      	b.n	8001aa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a78:	f7ff fac8 	bl	800100c <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7e:	e00a      	b.n	8001a96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a80:	f7ff fac4 	bl	800100c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e0b5      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	4b3e      	ldr	r3, [pc, #248]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1ee      	bne.n	8001a80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aa2:	7dfb      	ldrb	r3, [r7, #23]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa8:	4b39      	ldr	r3, [pc, #228]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aac:	4a38      	ldr	r2, [pc, #224]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ab2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a1 	beq.w	8001c00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001abe:	4b34      	ldr	r3, [pc, #208]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d05c      	beq.n	8001b84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d141      	bne.n	8001b56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b31      	ldr	r3, [pc, #196]	@ (8001b98 <HAL_RCC_OscConfig+0x478>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fa98 	bl	800100c <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff fa94 	bl	800100c <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e087      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0c:	019b      	lsls	r3, r3, #6
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b14:	085b      	lsrs	r3, r3, #1
 8001b16:	3b01      	subs	r3, #1
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b20:	061b      	lsls	r3, r3, #24
 8001b22:	491b      	ldr	r1, [pc, #108]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b28:	4b1b      	ldr	r3, [pc, #108]	@ (8001b98 <HAL_RCC_OscConfig+0x478>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fa6d 	bl	800100c <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff fa69 	bl	800100c <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e05c      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x416>
 8001b54:	e054      	b.n	8001c00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <HAL_RCC_OscConfig+0x478>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fa56 	bl	800100c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff fa52 	bl	800100c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e045      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b76:	4b06      	ldr	r3, [pc, #24]	@ (8001b90 <HAL_RCC_OscConfig+0x470>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x444>
 8001b82:	e03d      	b.n	8001c00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	699b      	ldr	r3, [r3, #24]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d107      	bne.n	8001b9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e038      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40007000 	.word	0x40007000
 8001b98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c0c <HAL_RCC_OscConfig+0x4ec>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d028      	beq.n	8001bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d121      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d11a      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bcc:	4013      	ands	r3, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d111      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be2:	085b      	lsrs	r3, r3, #1
 8001be4:	3b01      	subs	r3, #1
 8001be6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023800 	.word	0x40023800

08001c10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0cc      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c24:	4b68      	ldr	r3, [pc, #416]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0307 	and.w	r3, r3, #7
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d90c      	bls.n	8001c4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b65      	ldr	r3, [pc, #404]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b63      	ldr	r3, [pc, #396]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e0b8      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d020      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c64:	4b59      	ldr	r3, [pc, #356]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a58      	ldr	r2, [pc, #352]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001c6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0308 	and.w	r3, r3, #8
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c7c:	4b53      	ldr	r3, [pc, #332]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a52      	ldr	r2, [pc, #328]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001c86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c88:	4b50      	ldr	r3, [pc, #320]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	494d      	ldr	r1, [pc, #308]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d044      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d107      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cae:	4b47      	ldr	r3, [pc, #284]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d119      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e07f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d107      	bne.n	8001cde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cce:	4b3f      	ldr	r3, [pc, #252]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d109      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e06f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cde:	4b3b      	ldr	r3, [pc, #236]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e067      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cee:	4b37      	ldr	r3, [pc, #220]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f023 0203 	bic.w	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4934      	ldr	r1, [pc, #208]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d00:	f7ff f984 	bl	800100c <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d08:	f7ff f980 	bl	800100c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e04f      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 020c 	and.w	r2, r3, #12
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d1eb      	bne.n	8001d08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d30:	4b25      	ldr	r3, [pc, #148]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	683a      	ldr	r2, [r7, #0]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d20c      	bcs.n	8001d58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d3e:	4b22      	ldr	r3, [pc, #136]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d46:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d001      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e032      	b.n	8001dbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	4916      	ldr	r1, [pc, #88]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d009      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d82:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	490e      	ldr	r1, [pc, #56]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d96:	f000 f821 	bl	8001ddc <HAL_RCC_GetSysClockFreq>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dcc <HAL_RCC_ClockConfig+0x1bc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	490a      	ldr	r1, [pc, #40]	@ (8001dd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001da8:	5ccb      	ldrb	r3, [r1, r3]
 8001daa:	fa22 f303 	lsr.w	r3, r2, r3
 8001dae:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001db2:	4b09      	ldr	r3, [pc, #36]	@ (8001dd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f8e4 	bl	8000f84 <HAL_InitTick>

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023c00 	.word	0x40023c00
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	080042e8 	.word	0x080042e8
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	20000004 	.word	0x20000004

08001ddc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001de0:	b094      	sub	sp, #80	@ 0x50
 8001de2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001df4:	4b79      	ldr	r3, [pc, #484]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b08      	cmp	r3, #8
 8001dfe:	d00d      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0x40>
 8001e00:	2b08      	cmp	r3, #8
 8001e02:	f200 80e1 	bhi.w	8001fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x34>
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e0e:	e0db      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e10:	4b73      	ldr	r3, [pc, #460]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e14:	e0db      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e16:	4b73      	ldr	r3, [pc, #460]	@ (8001fe4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001e18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e1a:	e0d8      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e26:	4b6d      	ldr	r3, [pc, #436]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d063      	beq.n	8001efa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e32:	4b6a      	ldr	r3, [pc, #424]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	099b      	lsrs	r3, r3, #6
 8001e38:	2200      	movs	r2, #0
 8001e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001e3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001e4e:	4622      	mov	r2, r4
 8001e50:	462b      	mov	r3, r5
 8001e52:	f04f 0000 	mov.w	r0, #0
 8001e56:	f04f 0100 	mov.w	r1, #0
 8001e5a:	0159      	lsls	r1, r3, #5
 8001e5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e60:	0150      	lsls	r0, r2, #5
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4621      	mov	r1, r4
 8001e68:	1a51      	subs	r1, r2, r1
 8001e6a:	6139      	str	r1, [r7, #16]
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	f04f 0200 	mov.w	r2, #0
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e80:	4659      	mov	r1, fp
 8001e82:	018b      	lsls	r3, r1, #6
 8001e84:	4651      	mov	r1, sl
 8001e86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e8a:	4651      	mov	r1, sl
 8001e8c:	018a      	lsls	r2, r1, #6
 8001e8e:	4651      	mov	r1, sl
 8001e90:	ebb2 0801 	subs.w	r8, r2, r1
 8001e94:	4659      	mov	r1, fp
 8001e96:	eb63 0901 	sbc.w	r9, r3, r1
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	f04f 0300 	mov.w	r3, #0
 8001ea2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ea6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001eaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001eae:	4690      	mov	r8, r2
 8001eb0:	4699      	mov	r9, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	eb18 0303 	adds.w	r3, r8, r3
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	462b      	mov	r3, r5
 8001ebc:	eb49 0303 	adc.w	r3, r9, r3
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	f04f 0200 	mov.w	r2, #0
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ece:	4629      	mov	r1, r5
 8001ed0:	024b      	lsls	r3, r1, #9
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ed8:	4621      	mov	r1, r4
 8001eda:	024a      	lsls	r2, r1, #9
 8001edc:	4610      	mov	r0, r2
 8001ede:	4619      	mov	r1, r3
 8001ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ee6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ee8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001eec:	f7fe f9c8 	bl	8000280 <__aeabi_uldivmod>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ef8:	e058      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001efa:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	099b      	lsrs	r3, r3, #6
 8001f00:	2200      	movs	r2, #0
 8001f02:	4618      	mov	r0, r3
 8001f04:	4611      	mov	r1, r2
 8001f06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001f0a:	623b      	str	r3, [r7, #32]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001f14:	4642      	mov	r2, r8
 8001f16:	464b      	mov	r3, r9
 8001f18:	f04f 0000 	mov.w	r0, #0
 8001f1c:	f04f 0100 	mov.w	r1, #0
 8001f20:	0159      	lsls	r1, r3, #5
 8001f22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f26:	0150      	lsls	r0, r2, #5
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4641      	mov	r1, r8
 8001f2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f32:	4649      	mov	r1, r9
 8001f34:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f38:	f04f 0200 	mov.w	r2, #0
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001f44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001f48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001f4c:	ebb2 040a 	subs.w	r4, r2, sl
 8001f50:	eb63 050b 	sbc.w	r5, r3, fp
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	00eb      	lsls	r3, r5, #3
 8001f5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f62:	00e2      	lsls	r2, r4, #3
 8001f64:	4614      	mov	r4, r2
 8001f66:	461d      	mov	r5, r3
 8001f68:	4643      	mov	r3, r8
 8001f6a:	18e3      	adds	r3, r4, r3
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	464b      	mov	r3, r9
 8001f70:	eb45 0303 	adc.w	r3, r5, r3
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	f04f 0200 	mov.w	r2, #0
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f82:	4629      	mov	r1, r5
 8001f84:	028b      	lsls	r3, r1, #10
 8001f86:	4621      	mov	r1, r4
 8001f88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	028a      	lsls	r2, r1, #10
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f96:	2200      	movs	r2, #0
 8001f98:	61bb      	str	r3, [r7, #24]
 8001f9a:	61fa      	str	r2, [r7, #28]
 8001f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fa0:	f7fe f96e 	bl	8000280 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4613      	mov	r3, r2
 8001faa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001fac:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	0c1b      	lsrs	r3, r3, #16
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001fbc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fc6:	e002      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3750      	adds	r7, #80	@ 0x50
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fda:	bf00      	nop
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	007a1200 	.word	0x007a1200

08001fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fec:	4b03      	ldr	r3, [pc, #12]	@ (8001ffc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fee:	681b      	ldr	r3, [r3, #0]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	20000000 	.word	0x20000000

08002000 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002004:	f7ff fff0 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002008:	4602      	mov	r2, r0
 800200a:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_RCC_GetPCLK1Freq+0x20>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	0a9b      	lsrs	r3, r3, #10
 8002010:	f003 0307 	and.w	r3, r3, #7
 8002014:	4903      	ldr	r1, [pc, #12]	@ (8002024 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800201c:	4618      	mov	r0, r3
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	080042f8 	.word	0x080042f8

08002028 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800202c:	f7ff ffdc 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b05      	ldr	r3, [pc, #20]	@ (8002048 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	0b5b      	lsrs	r3, r3, #13
 8002038:	f003 0307 	and.w	r3, r3, #7
 800203c:	4903      	ldr	r1, [pc, #12]	@ (800204c <HAL_RCC_GetPCLK2Freq+0x24>)
 800203e:	5ccb      	ldrb	r3, [r1, r3]
 8002040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002044:	4618      	mov	r0, r3
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	080042f8 	.word	0x080042f8

08002050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e041      	b.n	80020e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fe9c 	bl	8000db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3304      	adds	r3, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4610      	mov	r0, r2
 8002090:	f000 f8b0 	bl	80021f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d001      	beq.n	8002108 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e03c      	b.n	8002182 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2202      	movs	r2, #2
 800210c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a1e      	ldr	r2, [pc, #120]	@ (8002190 <HAL_TIM_Base_Start+0xa0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d018      	beq.n	800214c <HAL_TIM_Base_Start+0x5c>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002122:	d013      	beq.n	800214c <HAL_TIM_Base_Start+0x5c>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1a      	ldr	r2, [pc, #104]	@ (8002194 <HAL_TIM_Base_Start+0xa4>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00e      	beq.n	800214c <HAL_TIM_Base_Start+0x5c>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a19      	ldr	r2, [pc, #100]	@ (8002198 <HAL_TIM_Base_Start+0xa8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d009      	beq.n	800214c <HAL_TIM_Base_Start+0x5c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a17      	ldr	r2, [pc, #92]	@ (800219c <HAL_TIM_Base_Start+0xac>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d004      	beq.n	800214c <HAL_TIM_Base_Start+0x5c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a16      	ldr	r2, [pc, #88]	@ (80021a0 <HAL_TIM_Base_Start+0xb0>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d111      	bne.n	8002170 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b06      	cmp	r3, #6
 800215c:	d010      	beq.n	8002180 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f042 0201 	orr.w	r2, r2, #1
 800216c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800216e:	e007      	b.n	8002180 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40010000 	.word	0x40010000
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800
 800219c:	40000c00 	.word	0x40000c00
 80021a0:	40014000 	.word	0x40014000

080021a4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6a1a      	ldr	r2, [r3, #32]
 80021b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10f      	bne.n	80021dc <HAL_TIM_Base_Stop+0x38>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6a1a      	ldr	r2, [r3, #32]
 80021c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d107      	bne.n	80021dc <HAL_TIM_Base_Stop+0x38>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0201 	bic.w	r2, r2, #1
 80021da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a37      	ldr	r2, [pc, #220]	@ (80022e4 <TIM_Base_SetConfig+0xf0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00f      	beq.n	800222c <TIM_Base_SetConfig+0x38>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002212:	d00b      	beq.n	800222c <TIM_Base_SetConfig+0x38>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a34      	ldr	r2, [pc, #208]	@ (80022e8 <TIM_Base_SetConfig+0xf4>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d007      	beq.n	800222c <TIM_Base_SetConfig+0x38>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a33      	ldr	r2, [pc, #204]	@ (80022ec <TIM_Base_SetConfig+0xf8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d003      	beq.n	800222c <TIM_Base_SetConfig+0x38>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a32      	ldr	r2, [pc, #200]	@ (80022f0 <TIM_Base_SetConfig+0xfc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d108      	bne.n	800223e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a28      	ldr	r2, [pc, #160]	@ (80022e4 <TIM_Base_SetConfig+0xf0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d01b      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800224c:	d017      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a25      	ldr	r2, [pc, #148]	@ (80022e8 <TIM_Base_SetConfig+0xf4>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d013      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a24      	ldr	r2, [pc, #144]	@ (80022ec <TIM_Base_SetConfig+0xf8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d00f      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a23      	ldr	r2, [pc, #140]	@ (80022f0 <TIM_Base_SetConfig+0xfc>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d00b      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a22      	ldr	r2, [pc, #136]	@ (80022f4 <TIM_Base_SetConfig+0x100>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d007      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a21      	ldr	r2, [pc, #132]	@ (80022f8 <TIM_Base_SetConfig+0x104>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d003      	beq.n	800227e <TIM_Base_SetConfig+0x8a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a20      	ldr	r2, [pc, #128]	@ (80022fc <TIM_Base_SetConfig+0x108>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d108      	bne.n	8002290 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a0c      	ldr	r2, [pc, #48]	@ (80022e4 <TIM_Base_SetConfig+0xf0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d103      	bne.n	80022be <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f043 0204 	orr.w	r2, r3, #4
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	601a      	str	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40010000 	.word	0x40010000
 80022e8:	40000400 	.word	0x40000400
 80022ec:	40000800 	.word	0x40000800
 80022f0:	40000c00 	.word	0x40000c00
 80022f4:	40014000 	.word	0x40014000
 80022f8:	40014400 	.word	0x40014400
 80022fc:	40014800 	.word	0x40014800

08002300 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e042      	b.n	8002398 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002318:	b2db      	uxtb	r3, r3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d106      	bne.n	800232c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7fe fd90 	bl	8000e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	@ 0x24
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002342:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fd7f 	bl	8002e48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	691a      	ldr	r2, [r3, #16]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002358:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002368:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002378:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2220      	movs	r2, #32
 800238c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2200      	movs	r2, #0
 8002394:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08a      	sub	sp, #40	@ 0x28
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	603b      	str	r3, [r7, #0]
 80023ac:	4613      	mov	r3, r2
 80023ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b20      	cmp	r3, #32
 80023be:	d175      	bne.n	80024ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_UART_Transmit+0x2c>
 80023c6:	88fb      	ldrh	r3, [r7, #6]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e06e      	b.n	80024ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2221      	movs	r2, #33	@ 0x21
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023de:	f7fe fe15 	bl	800100c <HAL_GetTick>
 80023e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023f8:	d108      	bne.n	800240c <HAL_UART_Transmit+0x6c>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d104      	bne.n	800240c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	e003      	b.n	8002414 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002414:	e02e      	b.n	8002474 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2200      	movs	r2, #0
 800241e:	2180      	movs	r1, #128	@ 0x80
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 fb1d 	bl	8002a60 <UART_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e03a      	b.n	80024ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10b      	bne.n	8002456 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	881b      	ldrh	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800244c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	3302      	adds	r3, #2
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	e007      	b.n	8002466 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	3301      	adds	r3, #1
 8002464:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002478:	b29b      	uxth	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1cb      	bne.n	8002416 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2200      	movs	r2, #0
 8002486:	2140      	movs	r1, #64	@ 0x40
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fae9 	bl	8002a60 <UART_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e006      	b.n	80024ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2220      	movs	r2, #32
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e000      	b.n	80024ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
	...

080024b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0ba      	sub	sp, #232	@ 0xe8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80024f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10f      	bne.n	800251e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002502:	f003 0320 	and.w	r3, r3, #32
 8002506:	2b00      	cmp	r3, #0
 8002508:	d009      	beq.n	800251e <HAL_UART_IRQHandler+0x66>
 800250a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800250e:	f003 0320 	and.w	r3, r3, #32
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fbd7 	bl	8002cca <UART_Receive_IT>
      return;
 800251c:	e273      	b.n	8002a06 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800251e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002522:	2b00      	cmp	r3, #0
 8002524:	f000 80de 	beq.w	80026e4 <HAL_UART_IRQHandler+0x22c>
 8002528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d106      	bne.n	8002542 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002538:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80d1 	beq.w	80026e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_UART_IRQHandler+0xae>
 800254e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002552:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f043 0201 	orr.w	r2, r3, #1
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_UART_IRQHandler+0xd2>
 8002572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d005      	beq.n	800258a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002582:	f043 0202 	orr.w	r2, r3, #2
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800258a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_UART_IRQHandler+0xf6>
 8002596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a6:	f043 0204 	orr.w	r2, r3, #4
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80025ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d011      	beq.n	80025de <HAL_UART_IRQHandler+0x126>
 80025ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d105      	bne.n	80025d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d6:	f043 0208 	orr.w	r2, r3, #8
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 820a 	beq.w	80029fc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025ec:	f003 0320 	and.w	r3, r3, #32
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_UART_IRQHandler+0x14e>
 80025f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fb62 	bl	8002cca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002610:	2b40      	cmp	r3, #64	@ 0x40
 8002612:	bf0c      	ite	eq
 8002614:	2301      	moveq	r3, #1
 8002616:	2300      	movne	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	f003 0308 	and.w	r3, r3, #8
 8002626:	2b00      	cmp	r3, #0
 8002628:	d103      	bne.n	8002632 <HAL_UART_IRQHandler+0x17a>
 800262a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800262e:	2b00      	cmp	r3, #0
 8002630:	d04f      	beq.n	80026d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 fa6d 	bl	8002b12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002642:	2b40      	cmp	r3, #64	@ 0x40
 8002644:	d141      	bne.n	80026ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	3314      	adds	r3, #20
 800264c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002650:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002654:	e853 3f00 	ldrex	r3, [r3]
 8002658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800265c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002660:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002664:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	3314      	adds	r3, #20
 800266e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002672:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002676:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800267a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800267e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002682:	e841 2300 	strex	r3, r2, [r1]
 8002686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800268a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1d9      	bne.n	8002646 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d013      	beq.n	80026c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269e:	4a8a      	ldr	r2, [pc, #552]	@ (80028c8 <HAL_UART_IRQHandler+0x410>)
 80026a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fe61 	bl	800136e <HAL_DMA_Abort_IT>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d016      	beq.n	80026e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026bc:	4610      	mov	r0, r2
 80026be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c0:	e00e      	b.n	80026e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f9b6 	bl	8002a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c8:	e00a      	b.n	80026e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f9b2 	bl	8002a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d0:	e006      	b.n	80026e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f9ae 	bl	8002a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80026de:	e18d      	b.n	80029fc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026e0:	bf00      	nop
    return;
 80026e2:	e18b      	b.n	80029fc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	f040 8167 	bne.w	80029bc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8160 	beq.w	80029bc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80026fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002700:	f003 0310 	and.w	r3, r3, #16
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 8159 	beq.w	80029bc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800270a:	2300      	movs	r3, #0
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272a:	2b40      	cmp	r3, #64	@ 0x40
 800272c:	f040 80ce 	bne.w	80028cc <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800273c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80a9 	beq.w	8002898 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800274a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800274e:	429a      	cmp	r2, r3
 8002750:	f080 80a2 	bcs.w	8002898 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800275a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002766:	f000 8088 	beq.w	800287a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	330c      	adds	r3, #12
 8002770:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002778:	e853 3f00 	ldrex	r3, [r3]
 800277c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002780:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002788:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	330c      	adds	r3, #12
 8002792:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002796:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800279a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80027a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027a6:	e841 2300 	strex	r3, r2, [r1]
 80027aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80027ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1d9      	bne.n	800276a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80027c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80027c8:	f023 0301 	bic.w	r3, r3, #1
 80027cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3314      	adds	r3, #20
 80027d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80027de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80027e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80027e6:	e841 2300 	strex	r3, r2, [r1]
 80027ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80027ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1e1      	bne.n	80027b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	3314      	adds	r3, #20
 80027f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027fc:	e853 3f00 	ldrex	r3, [r3]
 8002800:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	3314      	adds	r3, #20
 8002812:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002816:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002818:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800281c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800281e:	e841 2300 	strex	r3, r2, [r1]
 8002822:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002824:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e3      	bne.n	80027f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2220      	movs	r2, #32
 800282e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002842:	e853 3f00 	ldrex	r3, [r3]
 8002846:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800284a:	f023 0310 	bic.w	r3, r3, #16
 800284e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	330c      	adds	r3, #12
 8002858:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800285c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800285e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002860:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002862:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002864:	e841 2300 	strex	r3, r2, [r1]
 8002868:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800286a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e3      	bne.n	8002838 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fd0a 	bl	800128e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002888:	b29b      	uxth	r3, r3
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	b29b      	uxth	r3, r3
 800288e:	4619      	mov	r1, r3
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f8d9 	bl	8002a48 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002896:	e0b3      	b.n	8002a00 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800289c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028a0:	429a      	cmp	r2, r3
 80028a2:	f040 80ad 	bne.w	8002a00 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028aa:	69db      	ldr	r3, [r3, #28]
 80028ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b0:	f040 80a6 	bne.w	8002a00 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028be:	4619      	mov	r1, r3
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f8c1 	bl	8002a48 <HAL_UARTEx_RxEventCallback>
      return;
 80028c6:	e09b      	b.n	8002a00 <HAL_UART_IRQHandler+0x548>
 80028c8:	08002bd9 	.word	0x08002bd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 808e 	beq.w	8002a04 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80028e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8089 	beq.w	8002a04 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	330c      	adds	r3, #12
 80028f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028fc:	e853 3f00 	ldrex	r3, [r3]
 8002900:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002908:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	330c      	adds	r3, #12
 8002912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002916:	647a      	str	r2, [r7, #68]	@ 0x44
 8002918:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800291a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800291c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800291e:	e841 2300 	strex	r3, r2, [r1]
 8002922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1e3      	bne.n	80028f2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3314      	adds	r3, #20
 8002930:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	e853 3f00 	ldrex	r3, [r3]
 8002938:	623b      	str	r3, [r7, #32]
   return(result);
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3314      	adds	r3, #20
 800294a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800294e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002950:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e3      	bne.n	800292a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	e853 3f00 	ldrex	r3, [r3]
 800297e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0310 	bic.w	r3, r3, #16
 8002986:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	330c      	adds	r3, #12
 8002990:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002994:	61fa      	str	r2, [r7, #28]
 8002996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	69b9      	ldr	r1, [r7, #24]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	e841 2300 	strex	r3, r2, [r1]
 80029a0:	617b      	str	r3, [r7, #20]
   return(result);
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e3      	bne.n	8002970 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f847 	bl	8002a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029ba:	e023      	b.n	8002a04 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d009      	beq.n	80029dc <HAL_UART_IRQHandler+0x524>
 80029c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f910 	bl	8002bfa <UART_Transmit_IT>
    return;
 80029da:	e014      	b.n	8002a06 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00e      	beq.n	8002a06 <HAL_UART_IRQHandler+0x54e>
 80029e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 f950 	bl	8002c9a <UART_EndTransmit_IT>
    return;
 80029fa:	e004      	b.n	8002a06 <HAL_UART_IRQHandler+0x54e>
    return;
 80029fc:	bf00      	nop
 80029fe:	e002      	b.n	8002a06 <HAL_UART_IRQHandler+0x54e>
      return;
 8002a00:	bf00      	nop
 8002a02:	e000      	b.n	8002a06 <HAL_UART_IRQHandler+0x54e>
      return;
 8002a04:	bf00      	nop
  }
}
 8002a06:	37e8      	adds	r7, #232	@ 0xe8
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a70:	e03b      	b.n	8002aea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a78:	d037      	beq.n	8002aea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7a:	f7fe fac7 	bl	800100c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	6a3a      	ldr	r2, [r7, #32]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e03a      	b.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d023      	beq.n	8002aea <UART_WaitOnFlagUntilTimeout+0x8a>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	2b80      	cmp	r3, #128	@ 0x80
 8002aa6:	d020      	beq.n	8002aea <UART_WaitOnFlagUntilTimeout+0x8a>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	2b40      	cmp	r3, #64	@ 0x40
 8002aac:	d01d      	beq.n	8002aea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d116      	bne.n	8002aea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	617b      	str	r3, [r7, #20]
 8002ad0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 f81d 	bl	8002b12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2208      	movs	r2, #8
 8002adc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e00f      	b.n	8002b0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	4013      	ands	r3, r2
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	bf0c      	ite	eq
 8002afa:	2301      	moveq	r3, #1
 8002afc:	2300      	movne	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	461a      	mov	r2, r3
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d0b4      	beq.n	8002a72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b095      	sub	sp, #84	@ 0x54
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	330c      	adds	r3, #12
 8002b20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b24:	e853 3f00 	ldrex	r3, [r3]
 8002b28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	330c      	adds	r3, #12
 8002b38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b42:	e841 2300 	strex	r3, r2, [r1]
 8002b46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1e5      	bne.n	8002b1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3314      	adds	r3, #20
 8002b54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f023 0301 	bic.w	r3, r3, #1
 8002b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b76:	e841 2300 	strex	r3, r2, [r1]
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1e5      	bne.n	8002b4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d119      	bne.n	8002bbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	e853 3f00 	ldrex	r3, [r3]
 8002b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	f023 0310 	bic.w	r3, r3, #16
 8002ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	330c      	adds	r3, #12
 8002ba8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002baa:	61ba      	str	r2, [r7, #24]
 8002bac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bae:	6979      	ldr	r1, [r7, #20]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	e841 2300 	strex	r3, r2, [r1]
 8002bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1e5      	bne.n	8002b8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002bcc:	bf00      	nop
 8002bce:	3754      	adds	r7, #84	@ 0x54
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7ff ff21 	bl	8002a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b21      	cmp	r3, #33	@ 0x21
 8002c0c:	d13e      	bne.n	8002c8c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c16:	d114      	bne.n	8002c42 <UART_Transmit_IT+0x48>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d110      	bne.n	8002c42 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c34:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	1c9a      	adds	r2, r3, #2
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	621a      	str	r2, [r3, #32]
 8002c40:	e008      	b.n	8002c54 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	1c59      	adds	r1, r3, #1
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6211      	str	r1, [r2, #32]
 8002c4c:	781a      	ldrb	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4619      	mov	r1, r3
 8002c62:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10f      	bne.n	8002c88 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	e000      	b.n	8002c8e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002c8c:	2302      	movs	r3, #2
  }
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fea6 	bl	8002a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b08c      	sub	sp, #48	@ 0x30
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b22      	cmp	r3, #34	@ 0x22
 8002ce4:	f040 80aa 	bne.w	8002e3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cf0:	d115      	bne.n	8002d1e <UART_Receive_IT+0x54>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d111      	bne.n	8002d1e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d16:	1c9a      	adds	r2, r3, #2
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d1c:	e024      	b.n	8002d68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d2c:	d007      	beq.n	8002d3e <UART_Receive_IT+0x74>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <UART_Receive_IT+0x82>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d106      	bne.n	8002d4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e008      	b.n	8002d5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	4619      	mov	r1, r3
 8002d76:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d15d      	bne.n	8002e38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0220 	bic.w	r2, r2, #32
 8002d8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695a      	ldr	r2, [r3, #20]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2220      	movs	r2, #32
 8002db0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d135      	bne.n	8002e2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f023 0310 	bic.w	r3, r3, #16
 8002dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de8:	623a      	str	r2, [r7, #32]
 8002dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	69f9      	ldr	r1, [r7, #28]
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e5      	bne.n	8002dc8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	2b10      	cmp	r3, #16
 8002e08:	d10a      	bne.n	8002e20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e24:	4619      	mov	r1, r3
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff fe0e 	bl	8002a48 <HAL_UARTEx_RxEventCallback>
 8002e2c:	e002      	b.n	8002e34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fdf6 	bl	8002a20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e002      	b.n	8002e3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3730      	adds	r7, #48	@ 0x30
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e4c:	b0c0      	sub	sp, #256	@ 0x100
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e64:	68d9      	ldr	r1, [r3, #12]
 8002e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	ea40 0301 	orr.w	r3, r0, r1
 8002e70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ea0:	f021 010c 	bic.w	r1, r1, #12
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec2:	6999      	ldr	r1, [r3, #24]
 8002ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	ea40 0301 	orr.w	r3, r0, r1
 8002ece:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b8f      	ldr	r3, [pc, #572]	@ (8003114 <UART_SetConfig+0x2cc>)
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d005      	beq.n	8002ee8 <UART_SetConfig+0xa0>
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	4b8d      	ldr	r3, [pc, #564]	@ (8003118 <UART_SetConfig+0x2d0>)
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d104      	bne.n	8002ef2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ee8:	f7ff f89e 	bl	8002028 <HAL_RCC_GetPCLK2Freq>
 8002eec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ef0:	e003      	b.n	8002efa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ef2:	f7ff f885 	bl	8002000 <HAL_RCC_GetPCLK1Freq>
 8002ef6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f04:	f040 810c 	bne.w	8003120 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	462b      	mov	r3, r5
 8002f1e:	1891      	adds	r1, r2, r2
 8002f20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002f22:	415b      	adcs	r3, r3
 8002f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	eb12 0801 	adds.w	r8, r2, r1
 8002f30:	4629      	mov	r1, r5
 8002f32:	eb43 0901 	adc.w	r9, r3, r1
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f4a:	4690      	mov	r8, r2
 8002f4c:	4699      	mov	r9, r3
 8002f4e:	4623      	mov	r3, r4
 8002f50:	eb18 0303 	adds.w	r3, r8, r3
 8002f54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f58:	462b      	mov	r3, r5
 8002f5a:	eb49 0303 	adc.w	r3, r9, r3
 8002f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f76:	460b      	mov	r3, r1
 8002f78:	18db      	adds	r3, r3, r3
 8002f7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	eb42 0303 	adc.w	r3, r2, r3
 8002f82:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f8c:	f7fd f978 	bl	8000280 <__aeabi_uldivmod>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4b61      	ldr	r3, [pc, #388]	@ (800311c <UART_SetConfig+0x2d4>)
 8002f96:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	011c      	lsls	r4, r3, #4
 8002f9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fa8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002fac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002fb0:	4642      	mov	r2, r8
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	1891      	adds	r1, r2, r2
 8002fb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002fb8:	415b      	adcs	r3, r3
 8002fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002fc0:	4641      	mov	r1, r8
 8002fc2:	eb12 0a01 	adds.w	sl, r2, r1
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	eb43 0b01 	adc.w	fp, r3, r1
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002fdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fe0:	4692      	mov	sl, r2
 8002fe2:	469b      	mov	fp, r3
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	eb1a 0303 	adds.w	r3, sl, r3
 8002fea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002fee:	464b      	mov	r3, r9
 8002ff0:	eb4b 0303 	adc.w	r3, fp, r3
 8002ff4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003004:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003008:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800300c:	460b      	mov	r3, r1
 800300e:	18db      	adds	r3, r3, r3
 8003010:	643b      	str	r3, [r7, #64]	@ 0x40
 8003012:	4613      	mov	r3, r2
 8003014:	eb42 0303 	adc.w	r3, r2, r3
 8003018:	647b      	str	r3, [r7, #68]	@ 0x44
 800301a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800301e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003022:	f7fd f92d 	bl	8000280 <__aeabi_uldivmod>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4611      	mov	r1, r2
 800302c:	4b3b      	ldr	r3, [pc, #236]	@ (800311c <UART_SetConfig+0x2d4>)
 800302e:	fba3 2301 	umull	r2, r3, r3, r1
 8003032:	095b      	lsrs	r3, r3, #5
 8003034:	2264      	movs	r2, #100	@ 0x64
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	1acb      	subs	r3, r1, r3
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003042:	4b36      	ldr	r3, [pc, #216]	@ (800311c <UART_SetConfig+0x2d4>)
 8003044:	fba3 2302 	umull	r2, r3, r3, r2
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003050:	441c      	add	r4, r3
 8003052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003056:	2200      	movs	r2, #0
 8003058:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800305c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003060:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003064:	4642      	mov	r2, r8
 8003066:	464b      	mov	r3, r9
 8003068:	1891      	adds	r1, r2, r2
 800306a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800306c:	415b      	adcs	r3, r3
 800306e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003070:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003074:	4641      	mov	r1, r8
 8003076:	1851      	adds	r1, r2, r1
 8003078:	6339      	str	r1, [r7, #48]	@ 0x30
 800307a:	4649      	mov	r1, r9
 800307c:	414b      	adcs	r3, r1
 800307e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800308c:	4659      	mov	r1, fp
 800308e:	00cb      	lsls	r3, r1, #3
 8003090:	4651      	mov	r1, sl
 8003092:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003096:	4651      	mov	r1, sl
 8003098:	00ca      	lsls	r2, r1, #3
 800309a:	4610      	mov	r0, r2
 800309c:	4619      	mov	r1, r3
 800309e:	4603      	mov	r3, r0
 80030a0:	4642      	mov	r2, r8
 80030a2:	189b      	adds	r3, r3, r2
 80030a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030a8:	464b      	mov	r3, r9
 80030aa:	460a      	mov	r2, r1
 80030ac:	eb42 0303 	adc.w	r3, r2, r3
 80030b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80030b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80030c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80030c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80030c8:	460b      	mov	r3, r1
 80030ca:	18db      	adds	r3, r3, r3
 80030cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030ce:	4613      	mov	r3, r2
 80030d0:	eb42 0303 	adc.w	r3, r2, r3
 80030d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80030de:	f7fd f8cf 	bl	8000280 <__aeabi_uldivmod>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <UART_SetConfig+0x2d4>)
 80030e8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	2164      	movs	r1, #100	@ 0x64
 80030f0:	fb01 f303 	mul.w	r3, r1, r3
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	3332      	adds	r3, #50	@ 0x32
 80030fa:	4a08      	ldr	r2, [pc, #32]	@ (800311c <UART_SetConfig+0x2d4>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	f003 0207 	and.w	r2, r3, #7
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4422      	add	r2, r4
 800310e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003110:	e106      	b.n	8003320 <UART_SetConfig+0x4d8>
 8003112:	bf00      	nop
 8003114:	40011000 	.word	0x40011000
 8003118:	40011400 	.word	0x40011400
 800311c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003124:	2200      	movs	r2, #0
 8003126:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800312a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800312e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003132:	4642      	mov	r2, r8
 8003134:	464b      	mov	r3, r9
 8003136:	1891      	adds	r1, r2, r2
 8003138:	6239      	str	r1, [r7, #32]
 800313a:	415b      	adcs	r3, r3
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
 800313e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003142:	4641      	mov	r1, r8
 8003144:	1854      	adds	r4, r2, r1
 8003146:	4649      	mov	r1, r9
 8003148:	eb43 0501 	adc.w	r5, r3, r1
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	00eb      	lsls	r3, r5, #3
 8003156:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800315a:	00e2      	lsls	r2, r4, #3
 800315c:	4614      	mov	r4, r2
 800315e:	461d      	mov	r5, r3
 8003160:	4643      	mov	r3, r8
 8003162:	18e3      	adds	r3, r4, r3
 8003164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003168:	464b      	mov	r3, r9
 800316a:	eb45 0303 	adc.w	r3, r5, r3
 800316e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800317e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800318e:	4629      	mov	r1, r5
 8003190:	008b      	lsls	r3, r1, #2
 8003192:	4621      	mov	r1, r4
 8003194:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003198:	4621      	mov	r1, r4
 800319a:	008a      	lsls	r2, r1, #2
 800319c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80031a0:	f7fd f86e 	bl	8000280 <__aeabi_uldivmod>
 80031a4:	4602      	mov	r2, r0
 80031a6:	460b      	mov	r3, r1
 80031a8:	4b60      	ldr	r3, [pc, #384]	@ (800332c <UART_SetConfig+0x4e4>)
 80031aa:	fba3 2302 	umull	r2, r3, r3, r2
 80031ae:	095b      	lsrs	r3, r3, #5
 80031b0:	011c      	lsls	r4, r3, #4
 80031b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	1891      	adds	r1, r2, r2
 80031ca:	61b9      	str	r1, [r7, #24]
 80031cc:	415b      	adcs	r3, r3
 80031ce:	61fb      	str	r3, [r7, #28]
 80031d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031d4:	4641      	mov	r1, r8
 80031d6:	1851      	adds	r1, r2, r1
 80031d8:	6139      	str	r1, [r7, #16]
 80031da:	4649      	mov	r1, r9
 80031dc:	414b      	adcs	r3, r1
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031ec:	4659      	mov	r1, fp
 80031ee:	00cb      	lsls	r3, r1, #3
 80031f0:	4651      	mov	r1, sl
 80031f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031f6:	4651      	mov	r1, sl
 80031f8:	00ca      	lsls	r2, r1, #3
 80031fa:	4610      	mov	r0, r2
 80031fc:	4619      	mov	r1, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	4642      	mov	r2, r8
 8003202:	189b      	adds	r3, r3, r2
 8003204:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003208:	464b      	mov	r3, r9
 800320a:	460a      	mov	r2, r1
 800320c:	eb42 0303 	adc.w	r3, r2, r3
 8003210:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800321e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003220:	f04f 0200 	mov.w	r2, #0
 8003224:	f04f 0300 	mov.w	r3, #0
 8003228:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800322c:	4649      	mov	r1, r9
 800322e:	008b      	lsls	r3, r1, #2
 8003230:	4641      	mov	r1, r8
 8003232:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003236:	4641      	mov	r1, r8
 8003238:	008a      	lsls	r2, r1, #2
 800323a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800323e:	f7fd f81f 	bl	8000280 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4611      	mov	r1, r2
 8003248:	4b38      	ldr	r3, [pc, #224]	@ (800332c <UART_SetConfig+0x4e4>)
 800324a:	fba3 2301 	umull	r2, r3, r3, r1
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2264      	movs	r2, #100	@ 0x64
 8003252:	fb02 f303 	mul.w	r3, r2, r3
 8003256:	1acb      	subs	r3, r1, r3
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	3332      	adds	r3, #50	@ 0x32
 800325c:	4a33      	ldr	r2, [pc, #204]	@ (800332c <UART_SetConfig+0x4e4>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003268:	441c      	add	r4, r3
 800326a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800326e:	2200      	movs	r2, #0
 8003270:	673b      	str	r3, [r7, #112]	@ 0x70
 8003272:	677a      	str	r2, [r7, #116]	@ 0x74
 8003274:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003278:	4642      	mov	r2, r8
 800327a:	464b      	mov	r3, r9
 800327c:	1891      	adds	r1, r2, r2
 800327e:	60b9      	str	r1, [r7, #8]
 8003280:	415b      	adcs	r3, r3
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003288:	4641      	mov	r1, r8
 800328a:	1851      	adds	r1, r2, r1
 800328c:	6039      	str	r1, [r7, #0]
 800328e:	4649      	mov	r1, r9
 8003290:	414b      	adcs	r3, r1
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032a0:	4659      	mov	r1, fp
 80032a2:	00cb      	lsls	r3, r1, #3
 80032a4:	4651      	mov	r1, sl
 80032a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032aa:	4651      	mov	r1, sl
 80032ac:	00ca      	lsls	r2, r1, #3
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	4603      	mov	r3, r0
 80032b4:	4642      	mov	r2, r8
 80032b6:	189b      	adds	r3, r3, r2
 80032b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80032ba:	464b      	mov	r3, r9
 80032bc:	460a      	mov	r2, r1
 80032be:	eb42 0303 	adc.w	r3, r2, r3
 80032c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80032c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80032d0:	f04f 0200 	mov.w	r2, #0
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80032dc:	4649      	mov	r1, r9
 80032de:	008b      	lsls	r3, r1, #2
 80032e0:	4641      	mov	r1, r8
 80032e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032e6:	4641      	mov	r1, r8
 80032e8:	008a      	lsls	r2, r1, #2
 80032ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80032ee:	f7fc ffc7 	bl	8000280 <__aeabi_uldivmod>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4b0d      	ldr	r3, [pc, #52]	@ (800332c <UART_SetConfig+0x4e4>)
 80032f8:	fba3 1302 	umull	r1, r3, r3, r2
 80032fc:	095b      	lsrs	r3, r3, #5
 80032fe:	2164      	movs	r1, #100	@ 0x64
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	3332      	adds	r3, #50	@ 0x32
 800330a:	4a08      	ldr	r2, [pc, #32]	@ (800332c <UART_SetConfig+0x4e4>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	f003 020f 	and.w	r2, r3, #15
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4422      	add	r2, r4
 800331e:	609a      	str	r2, [r3, #8]
}
 8003320:	bf00      	nop
 8003322:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003326:	46bd      	mov	sp, r7
 8003328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800332c:	51eb851f 	.word	0x51eb851f

08003330 <std>:
 8003330:	2300      	movs	r3, #0
 8003332:	b510      	push	{r4, lr}
 8003334:	4604      	mov	r4, r0
 8003336:	e9c0 3300 	strd	r3, r3, [r0]
 800333a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800333e:	6083      	str	r3, [r0, #8]
 8003340:	8181      	strh	r1, [r0, #12]
 8003342:	6643      	str	r3, [r0, #100]	@ 0x64
 8003344:	81c2      	strh	r2, [r0, #14]
 8003346:	6183      	str	r3, [r0, #24]
 8003348:	4619      	mov	r1, r3
 800334a:	2208      	movs	r2, #8
 800334c:	305c      	adds	r0, #92	@ 0x5c
 800334e:	f000 f9f9 	bl	8003744 <memset>
 8003352:	4b0d      	ldr	r3, [pc, #52]	@ (8003388 <std+0x58>)
 8003354:	6263      	str	r3, [r4, #36]	@ 0x24
 8003356:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <std+0x5c>)
 8003358:	62a3      	str	r3, [r4, #40]	@ 0x28
 800335a:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <std+0x60>)
 800335c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800335e:	4b0d      	ldr	r3, [pc, #52]	@ (8003394 <std+0x64>)
 8003360:	6323      	str	r3, [r4, #48]	@ 0x30
 8003362:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <std+0x68>)
 8003364:	6224      	str	r4, [r4, #32]
 8003366:	429c      	cmp	r4, r3
 8003368:	d006      	beq.n	8003378 <std+0x48>
 800336a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800336e:	4294      	cmp	r4, r2
 8003370:	d002      	beq.n	8003378 <std+0x48>
 8003372:	33d0      	adds	r3, #208	@ 0xd0
 8003374:	429c      	cmp	r4, r3
 8003376:	d105      	bne.n	8003384 <std+0x54>
 8003378:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800337c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003380:	f000 ba58 	b.w	8003834 <__retarget_lock_init_recursive>
 8003384:	bd10      	pop	{r4, pc}
 8003386:	bf00      	nop
 8003388:	08003595 	.word	0x08003595
 800338c:	080035b7 	.word	0x080035b7
 8003390:	080035ef 	.word	0x080035ef
 8003394:	08003613 	.word	0x08003613
 8003398:	20000124 	.word	0x20000124

0800339c <stdio_exit_handler>:
 800339c:	4a02      	ldr	r2, [pc, #8]	@ (80033a8 <stdio_exit_handler+0xc>)
 800339e:	4903      	ldr	r1, [pc, #12]	@ (80033ac <stdio_exit_handler+0x10>)
 80033a0:	4803      	ldr	r0, [pc, #12]	@ (80033b0 <stdio_exit_handler+0x14>)
 80033a2:	f000 b869 	b.w	8003478 <_fwalk_sglue>
 80033a6:	bf00      	nop
 80033a8:	2000000c 	.word	0x2000000c
 80033ac:	080040d1 	.word	0x080040d1
 80033b0:	2000001c 	.word	0x2000001c

080033b4 <cleanup_stdio>:
 80033b4:	6841      	ldr	r1, [r0, #4]
 80033b6:	4b0c      	ldr	r3, [pc, #48]	@ (80033e8 <cleanup_stdio+0x34>)
 80033b8:	4299      	cmp	r1, r3
 80033ba:	b510      	push	{r4, lr}
 80033bc:	4604      	mov	r4, r0
 80033be:	d001      	beq.n	80033c4 <cleanup_stdio+0x10>
 80033c0:	f000 fe86 	bl	80040d0 <_fflush_r>
 80033c4:	68a1      	ldr	r1, [r4, #8]
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <cleanup_stdio+0x38>)
 80033c8:	4299      	cmp	r1, r3
 80033ca:	d002      	beq.n	80033d2 <cleanup_stdio+0x1e>
 80033cc:	4620      	mov	r0, r4
 80033ce:	f000 fe7f 	bl	80040d0 <_fflush_r>
 80033d2:	68e1      	ldr	r1, [r4, #12]
 80033d4:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <cleanup_stdio+0x3c>)
 80033d6:	4299      	cmp	r1, r3
 80033d8:	d004      	beq.n	80033e4 <cleanup_stdio+0x30>
 80033da:	4620      	mov	r0, r4
 80033dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e0:	f000 be76 	b.w	80040d0 <_fflush_r>
 80033e4:	bd10      	pop	{r4, pc}
 80033e6:	bf00      	nop
 80033e8:	20000124 	.word	0x20000124
 80033ec:	2000018c 	.word	0x2000018c
 80033f0:	200001f4 	.word	0x200001f4

080033f4 <global_stdio_init.part.0>:
 80033f4:	b510      	push	{r4, lr}
 80033f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <global_stdio_init.part.0+0x30>)
 80033f8:	4c0b      	ldr	r4, [pc, #44]	@ (8003428 <global_stdio_init.part.0+0x34>)
 80033fa:	4a0c      	ldr	r2, [pc, #48]	@ (800342c <global_stdio_init.part.0+0x38>)
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	4620      	mov	r0, r4
 8003400:	2200      	movs	r2, #0
 8003402:	2104      	movs	r1, #4
 8003404:	f7ff ff94 	bl	8003330 <std>
 8003408:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800340c:	2201      	movs	r2, #1
 800340e:	2109      	movs	r1, #9
 8003410:	f7ff ff8e 	bl	8003330 <std>
 8003414:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003418:	2202      	movs	r2, #2
 800341a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800341e:	2112      	movs	r1, #18
 8003420:	f7ff bf86 	b.w	8003330 <std>
 8003424:	2000025c 	.word	0x2000025c
 8003428:	20000124 	.word	0x20000124
 800342c:	0800339d 	.word	0x0800339d

08003430 <__sfp_lock_acquire>:
 8003430:	4801      	ldr	r0, [pc, #4]	@ (8003438 <__sfp_lock_acquire+0x8>)
 8003432:	f000 ba00 	b.w	8003836 <__retarget_lock_acquire_recursive>
 8003436:	bf00      	nop
 8003438:	20000265 	.word	0x20000265

0800343c <__sfp_lock_release>:
 800343c:	4801      	ldr	r0, [pc, #4]	@ (8003444 <__sfp_lock_release+0x8>)
 800343e:	f000 b9fb 	b.w	8003838 <__retarget_lock_release_recursive>
 8003442:	bf00      	nop
 8003444:	20000265 	.word	0x20000265

08003448 <__sinit>:
 8003448:	b510      	push	{r4, lr}
 800344a:	4604      	mov	r4, r0
 800344c:	f7ff fff0 	bl	8003430 <__sfp_lock_acquire>
 8003450:	6a23      	ldr	r3, [r4, #32]
 8003452:	b11b      	cbz	r3, 800345c <__sinit+0x14>
 8003454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003458:	f7ff bff0 	b.w	800343c <__sfp_lock_release>
 800345c:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <__sinit+0x28>)
 800345e:	6223      	str	r3, [r4, #32]
 8003460:	4b04      	ldr	r3, [pc, #16]	@ (8003474 <__sinit+0x2c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f5      	bne.n	8003454 <__sinit+0xc>
 8003468:	f7ff ffc4 	bl	80033f4 <global_stdio_init.part.0>
 800346c:	e7f2      	b.n	8003454 <__sinit+0xc>
 800346e:	bf00      	nop
 8003470:	080033b5 	.word	0x080033b5
 8003474:	2000025c 	.word	0x2000025c

08003478 <_fwalk_sglue>:
 8003478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800347c:	4607      	mov	r7, r0
 800347e:	4688      	mov	r8, r1
 8003480:	4614      	mov	r4, r2
 8003482:	2600      	movs	r6, #0
 8003484:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003488:	f1b9 0901 	subs.w	r9, r9, #1
 800348c:	d505      	bpl.n	800349a <_fwalk_sglue+0x22>
 800348e:	6824      	ldr	r4, [r4, #0]
 8003490:	2c00      	cmp	r4, #0
 8003492:	d1f7      	bne.n	8003484 <_fwalk_sglue+0xc>
 8003494:	4630      	mov	r0, r6
 8003496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800349a:	89ab      	ldrh	r3, [r5, #12]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d907      	bls.n	80034b0 <_fwalk_sglue+0x38>
 80034a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80034a4:	3301      	adds	r3, #1
 80034a6:	d003      	beq.n	80034b0 <_fwalk_sglue+0x38>
 80034a8:	4629      	mov	r1, r5
 80034aa:	4638      	mov	r0, r7
 80034ac:	47c0      	blx	r8
 80034ae:	4306      	orrs	r6, r0
 80034b0:	3568      	adds	r5, #104	@ 0x68
 80034b2:	e7e9      	b.n	8003488 <_fwalk_sglue+0x10>

080034b4 <iprintf>:
 80034b4:	b40f      	push	{r0, r1, r2, r3}
 80034b6:	b507      	push	{r0, r1, r2, lr}
 80034b8:	4906      	ldr	r1, [pc, #24]	@ (80034d4 <iprintf+0x20>)
 80034ba:	ab04      	add	r3, sp, #16
 80034bc:	6808      	ldr	r0, [r1, #0]
 80034be:	f853 2b04 	ldr.w	r2, [r3], #4
 80034c2:	6881      	ldr	r1, [r0, #8]
 80034c4:	9301      	str	r3, [sp, #4]
 80034c6:	f000 fadb 	bl	8003a80 <_vfiprintf_r>
 80034ca:	b003      	add	sp, #12
 80034cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80034d0:	b004      	add	sp, #16
 80034d2:	4770      	bx	lr
 80034d4:	20000018 	.word	0x20000018

080034d8 <_puts_r>:
 80034d8:	6a03      	ldr	r3, [r0, #32]
 80034da:	b570      	push	{r4, r5, r6, lr}
 80034dc:	6884      	ldr	r4, [r0, #8]
 80034de:	4605      	mov	r5, r0
 80034e0:	460e      	mov	r6, r1
 80034e2:	b90b      	cbnz	r3, 80034e8 <_puts_r+0x10>
 80034e4:	f7ff ffb0 	bl	8003448 <__sinit>
 80034e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80034ea:	07db      	lsls	r3, r3, #31
 80034ec:	d405      	bmi.n	80034fa <_puts_r+0x22>
 80034ee:	89a3      	ldrh	r3, [r4, #12]
 80034f0:	0598      	lsls	r0, r3, #22
 80034f2:	d402      	bmi.n	80034fa <_puts_r+0x22>
 80034f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034f6:	f000 f99e 	bl	8003836 <__retarget_lock_acquire_recursive>
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	0719      	lsls	r1, r3, #28
 80034fe:	d502      	bpl.n	8003506 <_puts_r+0x2e>
 8003500:	6923      	ldr	r3, [r4, #16]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d135      	bne.n	8003572 <_puts_r+0x9a>
 8003506:	4621      	mov	r1, r4
 8003508:	4628      	mov	r0, r5
 800350a:	f000 f8c5 	bl	8003698 <__swsetup_r>
 800350e:	b380      	cbz	r0, 8003572 <_puts_r+0x9a>
 8003510:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003514:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003516:	07da      	lsls	r2, r3, #31
 8003518:	d405      	bmi.n	8003526 <_puts_r+0x4e>
 800351a:	89a3      	ldrh	r3, [r4, #12]
 800351c:	059b      	lsls	r3, r3, #22
 800351e:	d402      	bmi.n	8003526 <_puts_r+0x4e>
 8003520:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003522:	f000 f989 	bl	8003838 <__retarget_lock_release_recursive>
 8003526:	4628      	mov	r0, r5
 8003528:	bd70      	pop	{r4, r5, r6, pc}
 800352a:	2b00      	cmp	r3, #0
 800352c:	da04      	bge.n	8003538 <_puts_r+0x60>
 800352e:	69a2      	ldr	r2, [r4, #24]
 8003530:	429a      	cmp	r2, r3
 8003532:	dc17      	bgt.n	8003564 <_puts_r+0x8c>
 8003534:	290a      	cmp	r1, #10
 8003536:	d015      	beq.n	8003564 <_puts_r+0x8c>
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	1c5a      	adds	r2, r3, #1
 800353c:	6022      	str	r2, [r4, #0]
 800353e:	7019      	strb	r1, [r3, #0]
 8003540:	68a3      	ldr	r3, [r4, #8]
 8003542:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003546:	3b01      	subs	r3, #1
 8003548:	60a3      	str	r3, [r4, #8]
 800354a:	2900      	cmp	r1, #0
 800354c:	d1ed      	bne.n	800352a <_puts_r+0x52>
 800354e:	2b00      	cmp	r3, #0
 8003550:	da11      	bge.n	8003576 <_puts_r+0x9e>
 8003552:	4622      	mov	r2, r4
 8003554:	210a      	movs	r1, #10
 8003556:	4628      	mov	r0, r5
 8003558:	f000 f85f 	bl	800361a <__swbuf_r>
 800355c:	3001      	adds	r0, #1
 800355e:	d0d7      	beq.n	8003510 <_puts_r+0x38>
 8003560:	250a      	movs	r5, #10
 8003562:	e7d7      	b.n	8003514 <_puts_r+0x3c>
 8003564:	4622      	mov	r2, r4
 8003566:	4628      	mov	r0, r5
 8003568:	f000 f857 	bl	800361a <__swbuf_r>
 800356c:	3001      	adds	r0, #1
 800356e:	d1e7      	bne.n	8003540 <_puts_r+0x68>
 8003570:	e7ce      	b.n	8003510 <_puts_r+0x38>
 8003572:	3e01      	subs	r6, #1
 8003574:	e7e4      	b.n	8003540 <_puts_r+0x68>
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	6022      	str	r2, [r4, #0]
 800357c:	220a      	movs	r2, #10
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	e7ee      	b.n	8003560 <_puts_r+0x88>
	...

08003584 <puts>:
 8003584:	4b02      	ldr	r3, [pc, #8]	@ (8003590 <puts+0xc>)
 8003586:	4601      	mov	r1, r0
 8003588:	6818      	ldr	r0, [r3, #0]
 800358a:	f7ff bfa5 	b.w	80034d8 <_puts_r>
 800358e:	bf00      	nop
 8003590:	20000018 	.word	0x20000018

08003594 <__sread>:
 8003594:	b510      	push	{r4, lr}
 8003596:	460c      	mov	r4, r1
 8003598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800359c:	f000 f8fc 	bl	8003798 <_read_r>
 80035a0:	2800      	cmp	r0, #0
 80035a2:	bfab      	itete	ge
 80035a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80035a6:	89a3      	ldrhlt	r3, [r4, #12]
 80035a8:	181b      	addge	r3, r3, r0
 80035aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80035ae:	bfac      	ite	ge
 80035b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80035b2:	81a3      	strhlt	r3, [r4, #12]
 80035b4:	bd10      	pop	{r4, pc}

080035b6 <__swrite>:
 80035b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ba:	461f      	mov	r7, r3
 80035bc:	898b      	ldrh	r3, [r1, #12]
 80035be:	05db      	lsls	r3, r3, #23
 80035c0:	4605      	mov	r5, r0
 80035c2:	460c      	mov	r4, r1
 80035c4:	4616      	mov	r6, r2
 80035c6:	d505      	bpl.n	80035d4 <__swrite+0x1e>
 80035c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035cc:	2302      	movs	r3, #2
 80035ce:	2200      	movs	r2, #0
 80035d0:	f000 f8d0 	bl	8003774 <_lseek_r>
 80035d4:	89a3      	ldrh	r3, [r4, #12]
 80035d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035de:	81a3      	strh	r3, [r4, #12]
 80035e0:	4632      	mov	r2, r6
 80035e2:	463b      	mov	r3, r7
 80035e4:	4628      	mov	r0, r5
 80035e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ea:	f000 b8e7 	b.w	80037bc <_write_r>

080035ee <__sseek>:
 80035ee:	b510      	push	{r4, lr}
 80035f0:	460c      	mov	r4, r1
 80035f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f6:	f000 f8bd 	bl	8003774 <_lseek_r>
 80035fa:	1c43      	adds	r3, r0, #1
 80035fc:	89a3      	ldrh	r3, [r4, #12]
 80035fe:	bf15      	itete	ne
 8003600:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003602:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003606:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800360a:	81a3      	strheq	r3, [r4, #12]
 800360c:	bf18      	it	ne
 800360e:	81a3      	strhne	r3, [r4, #12]
 8003610:	bd10      	pop	{r4, pc}

08003612 <__sclose>:
 8003612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003616:	f000 b89d 	b.w	8003754 <_close_r>

0800361a <__swbuf_r>:
 800361a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361c:	460e      	mov	r6, r1
 800361e:	4614      	mov	r4, r2
 8003620:	4605      	mov	r5, r0
 8003622:	b118      	cbz	r0, 800362c <__swbuf_r+0x12>
 8003624:	6a03      	ldr	r3, [r0, #32]
 8003626:	b90b      	cbnz	r3, 800362c <__swbuf_r+0x12>
 8003628:	f7ff ff0e 	bl	8003448 <__sinit>
 800362c:	69a3      	ldr	r3, [r4, #24]
 800362e:	60a3      	str	r3, [r4, #8]
 8003630:	89a3      	ldrh	r3, [r4, #12]
 8003632:	071a      	lsls	r2, r3, #28
 8003634:	d501      	bpl.n	800363a <__swbuf_r+0x20>
 8003636:	6923      	ldr	r3, [r4, #16]
 8003638:	b943      	cbnz	r3, 800364c <__swbuf_r+0x32>
 800363a:	4621      	mov	r1, r4
 800363c:	4628      	mov	r0, r5
 800363e:	f000 f82b 	bl	8003698 <__swsetup_r>
 8003642:	b118      	cbz	r0, 800364c <__swbuf_r+0x32>
 8003644:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003648:	4638      	mov	r0, r7
 800364a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800364c:	6823      	ldr	r3, [r4, #0]
 800364e:	6922      	ldr	r2, [r4, #16]
 8003650:	1a98      	subs	r0, r3, r2
 8003652:	6963      	ldr	r3, [r4, #20]
 8003654:	b2f6      	uxtb	r6, r6
 8003656:	4283      	cmp	r3, r0
 8003658:	4637      	mov	r7, r6
 800365a:	dc05      	bgt.n	8003668 <__swbuf_r+0x4e>
 800365c:	4621      	mov	r1, r4
 800365e:	4628      	mov	r0, r5
 8003660:	f000 fd36 	bl	80040d0 <_fflush_r>
 8003664:	2800      	cmp	r0, #0
 8003666:	d1ed      	bne.n	8003644 <__swbuf_r+0x2a>
 8003668:	68a3      	ldr	r3, [r4, #8]
 800366a:	3b01      	subs	r3, #1
 800366c:	60a3      	str	r3, [r4, #8]
 800366e:	6823      	ldr	r3, [r4, #0]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	6022      	str	r2, [r4, #0]
 8003674:	701e      	strb	r6, [r3, #0]
 8003676:	6962      	ldr	r2, [r4, #20]
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	429a      	cmp	r2, r3
 800367c:	d004      	beq.n	8003688 <__swbuf_r+0x6e>
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	07db      	lsls	r3, r3, #31
 8003682:	d5e1      	bpl.n	8003648 <__swbuf_r+0x2e>
 8003684:	2e0a      	cmp	r6, #10
 8003686:	d1df      	bne.n	8003648 <__swbuf_r+0x2e>
 8003688:	4621      	mov	r1, r4
 800368a:	4628      	mov	r0, r5
 800368c:	f000 fd20 	bl	80040d0 <_fflush_r>
 8003690:	2800      	cmp	r0, #0
 8003692:	d0d9      	beq.n	8003648 <__swbuf_r+0x2e>
 8003694:	e7d6      	b.n	8003644 <__swbuf_r+0x2a>
	...

08003698 <__swsetup_r>:
 8003698:	b538      	push	{r3, r4, r5, lr}
 800369a:	4b29      	ldr	r3, [pc, #164]	@ (8003740 <__swsetup_r+0xa8>)
 800369c:	4605      	mov	r5, r0
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	460c      	mov	r4, r1
 80036a2:	b118      	cbz	r0, 80036ac <__swsetup_r+0x14>
 80036a4:	6a03      	ldr	r3, [r0, #32]
 80036a6:	b90b      	cbnz	r3, 80036ac <__swsetup_r+0x14>
 80036a8:	f7ff fece 	bl	8003448 <__sinit>
 80036ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036b0:	0719      	lsls	r1, r3, #28
 80036b2:	d422      	bmi.n	80036fa <__swsetup_r+0x62>
 80036b4:	06da      	lsls	r2, r3, #27
 80036b6:	d407      	bmi.n	80036c8 <__swsetup_r+0x30>
 80036b8:	2209      	movs	r2, #9
 80036ba:	602a      	str	r2, [r5, #0]
 80036bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036c0:	81a3      	strh	r3, [r4, #12]
 80036c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80036c6:	e033      	b.n	8003730 <__swsetup_r+0x98>
 80036c8:	0758      	lsls	r0, r3, #29
 80036ca:	d512      	bpl.n	80036f2 <__swsetup_r+0x5a>
 80036cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80036ce:	b141      	cbz	r1, 80036e2 <__swsetup_r+0x4a>
 80036d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80036d4:	4299      	cmp	r1, r3
 80036d6:	d002      	beq.n	80036de <__swsetup_r+0x46>
 80036d8:	4628      	mov	r0, r5
 80036da:	f000 f8af 	bl	800383c <_free_r>
 80036de:	2300      	movs	r3, #0
 80036e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80036e2:	89a3      	ldrh	r3, [r4, #12]
 80036e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80036e8:	81a3      	strh	r3, [r4, #12]
 80036ea:	2300      	movs	r3, #0
 80036ec:	6063      	str	r3, [r4, #4]
 80036ee:	6923      	ldr	r3, [r4, #16]
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	89a3      	ldrh	r3, [r4, #12]
 80036f4:	f043 0308 	orr.w	r3, r3, #8
 80036f8:	81a3      	strh	r3, [r4, #12]
 80036fa:	6923      	ldr	r3, [r4, #16]
 80036fc:	b94b      	cbnz	r3, 8003712 <__swsetup_r+0x7a>
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003704:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003708:	d003      	beq.n	8003712 <__swsetup_r+0x7a>
 800370a:	4621      	mov	r1, r4
 800370c:	4628      	mov	r0, r5
 800370e:	f000 fd2d 	bl	800416c <__smakebuf_r>
 8003712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003716:	f013 0201 	ands.w	r2, r3, #1
 800371a:	d00a      	beq.n	8003732 <__swsetup_r+0x9a>
 800371c:	2200      	movs	r2, #0
 800371e:	60a2      	str	r2, [r4, #8]
 8003720:	6962      	ldr	r2, [r4, #20]
 8003722:	4252      	negs	r2, r2
 8003724:	61a2      	str	r2, [r4, #24]
 8003726:	6922      	ldr	r2, [r4, #16]
 8003728:	b942      	cbnz	r2, 800373c <__swsetup_r+0xa4>
 800372a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800372e:	d1c5      	bne.n	80036bc <__swsetup_r+0x24>
 8003730:	bd38      	pop	{r3, r4, r5, pc}
 8003732:	0799      	lsls	r1, r3, #30
 8003734:	bf58      	it	pl
 8003736:	6962      	ldrpl	r2, [r4, #20]
 8003738:	60a2      	str	r2, [r4, #8]
 800373a:	e7f4      	b.n	8003726 <__swsetup_r+0x8e>
 800373c:	2000      	movs	r0, #0
 800373e:	e7f7      	b.n	8003730 <__swsetup_r+0x98>
 8003740:	20000018 	.word	0x20000018

08003744 <memset>:
 8003744:	4402      	add	r2, r0
 8003746:	4603      	mov	r3, r0
 8003748:	4293      	cmp	r3, r2
 800374a:	d100      	bne.n	800374e <memset+0xa>
 800374c:	4770      	bx	lr
 800374e:	f803 1b01 	strb.w	r1, [r3], #1
 8003752:	e7f9      	b.n	8003748 <memset+0x4>

08003754 <_close_r>:
 8003754:	b538      	push	{r3, r4, r5, lr}
 8003756:	4d06      	ldr	r5, [pc, #24]	@ (8003770 <_close_r+0x1c>)
 8003758:	2300      	movs	r3, #0
 800375a:	4604      	mov	r4, r0
 800375c:	4608      	mov	r0, r1
 800375e:	602b      	str	r3, [r5, #0]
 8003760:	f7fd fa87 	bl	8000c72 <_close>
 8003764:	1c43      	adds	r3, r0, #1
 8003766:	d102      	bne.n	800376e <_close_r+0x1a>
 8003768:	682b      	ldr	r3, [r5, #0]
 800376a:	b103      	cbz	r3, 800376e <_close_r+0x1a>
 800376c:	6023      	str	r3, [r4, #0]
 800376e:	bd38      	pop	{r3, r4, r5, pc}
 8003770:	20000260 	.word	0x20000260

08003774 <_lseek_r>:
 8003774:	b538      	push	{r3, r4, r5, lr}
 8003776:	4d07      	ldr	r5, [pc, #28]	@ (8003794 <_lseek_r+0x20>)
 8003778:	4604      	mov	r4, r0
 800377a:	4608      	mov	r0, r1
 800377c:	4611      	mov	r1, r2
 800377e:	2200      	movs	r2, #0
 8003780:	602a      	str	r2, [r5, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	f7fd fa9c 	bl	8000cc0 <_lseek>
 8003788:	1c43      	adds	r3, r0, #1
 800378a:	d102      	bne.n	8003792 <_lseek_r+0x1e>
 800378c:	682b      	ldr	r3, [r5, #0]
 800378e:	b103      	cbz	r3, 8003792 <_lseek_r+0x1e>
 8003790:	6023      	str	r3, [r4, #0]
 8003792:	bd38      	pop	{r3, r4, r5, pc}
 8003794:	20000260 	.word	0x20000260

08003798 <_read_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4d07      	ldr	r5, [pc, #28]	@ (80037b8 <_read_r+0x20>)
 800379c:	4604      	mov	r4, r0
 800379e:	4608      	mov	r0, r1
 80037a0:	4611      	mov	r1, r2
 80037a2:	2200      	movs	r2, #0
 80037a4:	602a      	str	r2, [r5, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f7fd fa46 	bl	8000c38 <_read>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_read_r+0x1e>
 80037b0:	682b      	ldr	r3, [r5, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_read_r+0x1e>
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	20000260 	.word	0x20000260

080037bc <_write_r>:
 80037bc:	b538      	push	{r3, r4, r5, lr}
 80037be:	4d07      	ldr	r5, [pc, #28]	@ (80037dc <_write_r+0x20>)
 80037c0:	4604      	mov	r4, r0
 80037c2:	4608      	mov	r0, r1
 80037c4:	4611      	mov	r1, r2
 80037c6:	2200      	movs	r2, #0
 80037c8:	602a      	str	r2, [r5, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f7fd f916 	bl	80009fc <_write>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d102      	bne.n	80037da <_write_r+0x1e>
 80037d4:	682b      	ldr	r3, [r5, #0]
 80037d6:	b103      	cbz	r3, 80037da <_write_r+0x1e>
 80037d8:	6023      	str	r3, [r4, #0]
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	20000260 	.word	0x20000260

080037e0 <__errno>:
 80037e0:	4b01      	ldr	r3, [pc, #4]	@ (80037e8 <__errno+0x8>)
 80037e2:	6818      	ldr	r0, [r3, #0]
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000018 	.word	0x20000018

080037ec <__libc_init_array>:
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	4d0d      	ldr	r5, [pc, #52]	@ (8003824 <__libc_init_array+0x38>)
 80037f0:	4c0d      	ldr	r4, [pc, #52]	@ (8003828 <__libc_init_array+0x3c>)
 80037f2:	1b64      	subs	r4, r4, r5
 80037f4:	10a4      	asrs	r4, r4, #2
 80037f6:	2600      	movs	r6, #0
 80037f8:	42a6      	cmp	r6, r4
 80037fa:	d109      	bne.n	8003810 <__libc_init_array+0x24>
 80037fc:	4d0b      	ldr	r5, [pc, #44]	@ (800382c <__libc_init_array+0x40>)
 80037fe:	4c0c      	ldr	r4, [pc, #48]	@ (8003830 <__libc_init_array+0x44>)
 8003800:	f000 fd22 	bl	8004248 <_init>
 8003804:	1b64      	subs	r4, r4, r5
 8003806:	10a4      	asrs	r4, r4, #2
 8003808:	2600      	movs	r6, #0
 800380a:	42a6      	cmp	r6, r4
 800380c:	d105      	bne.n	800381a <__libc_init_array+0x2e>
 800380e:	bd70      	pop	{r4, r5, r6, pc}
 8003810:	f855 3b04 	ldr.w	r3, [r5], #4
 8003814:	4798      	blx	r3
 8003816:	3601      	adds	r6, #1
 8003818:	e7ee      	b.n	80037f8 <__libc_init_array+0xc>
 800381a:	f855 3b04 	ldr.w	r3, [r5], #4
 800381e:	4798      	blx	r3
 8003820:	3601      	adds	r6, #1
 8003822:	e7f2      	b.n	800380a <__libc_init_array+0x1e>
 8003824:	0800433c 	.word	0x0800433c
 8003828:	0800433c 	.word	0x0800433c
 800382c:	0800433c 	.word	0x0800433c
 8003830:	08004340 	.word	0x08004340

08003834 <__retarget_lock_init_recursive>:
 8003834:	4770      	bx	lr

08003836 <__retarget_lock_acquire_recursive>:
 8003836:	4770      	bx	lr

08003838 <__retarget_lock_release_recursive>:
 8003838:	4770      	bx	lr
	...

0800383c <_free_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4605      	mov	r5, r0
 8003840:	2900      	cmp	r1, #0
 8003842:	d041      	beq.n	80038c8 <_free_r+0x8c>
 8003844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003848:	1f0c      	subs	r4, r1, #4
 800384a:	2b00      	cmp	r3, #0
 800384c:	bfb8      	it	lt
 800384e:	18e4      	addlt	r4, r4, r3
 8003850:	f000 f8e0 	bl	8003a14 <__malloc_lock>
 8003854:	4a1d      	ldr	r2, [pc, #116]	@ (80038cc <_free_r+0x90>)
 8003856:	6813      	ldr	r3, [r2, #0]
 8003858:	b933      	cbnz	r3, 8003868 <_free_r+0x2c>
 800385a:	6063      	str	r3, [r4, #4]
 800385c:	6014      	str	r4, [r2, #0]
 800385e:	4628      	mov	r0, r5
 8003860:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003864:	f000 b8dc 	b.w	8003a20 <__malloc_unlock>
 8003868:	42a3      	cmp	r3, r4
 800386a:	d908      	bls.n	800387e <_free_r+0x42>
 800386c:	6820      	ldr	r0, [r4, #0]
 800386e:	1821      	adds	r1, r4, r0
 8003870:	428b      	cmp	r3, r1
 8003872:	bf01      	itttt	eq
 8003874:	6819      	ldreq	r1, [r3, #0]
 8003876:	685b      	ldreq	r3, [r3, #4]
 8003878:	1809      	addeq	r1, r1, r0
 800387a:	6021      	streq	r1, [r4, #0]
 800387c:	e7ed      	b.n	800385a <_free_r+0x1e>
 800387e:	461a      	mov	r2, r3
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	b10b      	cbz	r3, 8003888 <_free_r+0x4c>
 8003884:	42a3      	cmp	r3, r4
 8003886:	d9fa      	bls.n	800387e <_free_r+0x42>
 8003888:	6811      	ldr	r1, [r2, #0]
 800388a:	1850      	adds	r0, r2, r1
 800388c:	42a0      	cmp	r0, r4
 800388e:	d10b      	bne.n	80038a8 <_free_r+0x6c>
 8003890:	6820      	ldr	r0, [r4, #0]
 8003892:	4401      	add	r1, r0
 8003894:	1850      	adds	r0, r2, r1
 8003896:	4283      	cmp	r3, r0
 8003898:	6011      	str	r1, [r2, #0]
 800389a:	d1e0      	bne.n	800385e <_free_r+0x22>
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	6053      	str	r3, [r2, #4]
 80038a2:	4408      	add	r0, r1
 80038a4:	6010      	str	r0, [r2, #0]
 80038a6:	e7da      	b.n	800385e <_free_r+0x22>
 80038a8:	d902      	bls.n	80038b0 <_free_r+0x74>
 80038aa:	230c      	movs	r3, #12
 80038ac:	602b      	str	r3, [r5, #0]
 80038ae:	e7d6      	b.n	800385e <_free_r+0x22>
 80038b0:	6820      	ldr	r0, [r4, #0]
 80038b2:	1821      	adds	r1, r4, r0
 80038b4:	428b      	cmp	r3, r1
 80038b6:	bf04      	itt	eq
 80038b8:	6819      	ldreq	r1, [r3, #0]
 80038ba:	685b      	ldreq	r3, [r3, #4]
 80038bc:	6063      	str	r3, [r4, #4]
 80038be:	bf04      	itt	eq
 80038c0:	1809      	addeq	r1, r1, r0
 80038c2:	6021      	streq	r1, [r4, #0]
 80038c4:	6054      	str	r4, [r2, #4]
 80038c6:	e7ca      	b.n	800385e <_free_r+0x22>
 80038c8:	bd38      	pop	{r3, r4, r5, pc}
 80038ca:	bf00      	nop
 80038cc:	2000026c 	.word	0x2000026c

080038d0 <sbrk_aligned>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003910 <sbrk_aligned+0x40>)
 80038d4:	460c      	mov	r4, r1
 80038d6:	6831      	ldr	r1, [r6, #0]
 80038d8:	4605      	mov	r5, r0
 80038da:	b911      	cbnz	r1, 80038e2 <sbrk_aligned+0x12>
 80038dc:	f000 fca4 	bl	8004228 <_sbrk_r>
 80038e0:	6030      	str	r0, [r6, #0]
 80038e2:	4621      	mov	r1, r4
 80038e4:	4628      	mov	r0, r5
 80038e6:	f000 fc9f 	bl	8004228 <_sbrk_r>
 80038ea:	1c43      	adds	r3, r0, #1
 80038ec:	d103      	bne.n	80038f6 <sbrk_aligned+0x26>
 80038ee:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80038f2:	4620      	mov	r0, r4
 80038f4:	bd70      	pop	{r4, r5, r6, pc}
 80038f6:	1cc4      	adds	r4, r0, #3
 80038f8:	f024 0403 	bic.w	r4, r4, #3
 80038fc:	42a0      	cmp	r0, r4
 80038fe:	d0f8      	beq.n	80038f2 <sbrk_aligned+0x22>
 8003900:	1a21      	subs	r1, r4, r0
 8003902:	4628      	mov	r0, r5
 8003904:	f000 fc90 	bl	8004228 <_sbrk_r>
 8003908:	3001      	adds	r0, #1
 800390a:	d1f2      	bne.n	80038f2 <sbrk_aligned+0x22>
 800390c:	e7ef      	b.n	80038ee <sbrk_aligned+0x1e>
 800390e:	bf00      	nop
 8003910:	20000268 	.word	0x20000268

08003914 <_malloc_r>:
 8003914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003918:	1ccd      	adds	r5, r1, #3
 800391a:	f025 0503 	bic.w	r5, r5, #3
 800391e:	3508      	adds	r5, #8
 8003920:	2d0c      	cmp	r5, #12
 8003922:	bf38      	it	cc
 8003924:	250c      	movcc	r5, #12
 8003926:	2d00      	cmp	r5, #0
 8003928:	4606      	mov	r6, r0
 800392a:	db01      	blt.n	8003930 <_malloc_r+0x1c>
 800392c:	42a9      	cmp	r1, r5
 800392e:	d904      	bls.n	800393a <_malloc_r+0x26>
 8003930:	230c      	movs	r3, #12
 8003932:	6033      	str	r3, [r6, #0]
 8003934:	2000      	movs	r0, #0
 8003936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800393a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a10 <_malloc_r+0xfc>
 800393e:	f000 f869 	bl	8003a14 <__malloc_lock>
 8003942:	f8d8 3000 	ldr.w	r3, [r8]
 8003946:	461c      	mov	r4, r3
 8003948:	bb44      	cbnz	r4, 800399c <_malloc_r+0x88>
 800394a:	4629      	mov	r1, r5
 800394c:	4630      	mov	r0, r6
 800394e:	f7ff ffbf 	bl	80038d0 <sbrk_aligned>
 8003952:	1c43      	adds	r3, r0, #1
 8003954:	4604      	mov	r4, r0
 8003956:	d158      	bne.n	8003a0a <_malloc_r+0xf6>
 8003958:	f8d8 4000 	ldr.w	r4, [r8]
 800395c:	4627      	mov	r7, r4
 800395e:	2f00      	cmp	r7, #0
 8003960:	d143      	bne.n	80039ea <_malloc_r+0xd6>
 8003962:	2c00      	cmp	r4, #0
 8003964:	d04b      	beq.n	80039fe <_malloc_r+0xea>
 8003966:	6823      	ldr	r3, [r4, #0]
 8003968:	4639      	mov	r1, r7
 800396a:	4630      	mov	r0, r6
 800396c:	eb04 0903 	add.w	r9, r4, r3
 8003970:	f000 fc5a 	bl	8004228 <_sbrk_r>
 8003974:	4581      	cmp	r9, r0
 8003976:	d142      	bne.n	80039fe <_malloc_r+0xea>
 8003978:	6821      	ldr	r1, [r4, #0]
 800397a:	1a6d      	subs	r5, r5, r1
 800397c:	4629      	mov	r1, r5
 800397e:	4630      	mov	r0, r6
 8003980:	f7ff ffa6 	bl	80038d0 <sbrk_aligned>
 8003984:	3001      	adds	r0, #1
 8003986:	d03a      	beq.n	80039fe <_malloc_r+0xea>
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	442b      	add	r3, r5
 800398c:	6023      	str	r3, [r4, #0]
 800398e:	f8d8 3000 	ldr.w	r3, [r8]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	bb62      	cbnz	r2, 80039f0 <_malloc_r+0xdc>
 8003996:	f8c8 7000 	str.w	r7, [r8]
 800399a:	e00f      	b.n	80039bc <_malloc_r+0xa8>
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	1b52      	subs	r2, r2, r5
 80039a0:	d420      	bmi.n	80039e4 <_malloc_r+0xd0>
 80039a2:	2a0b      	cmp	r2, #11
 80039a4:	d917      	bls.n	80039d6 <_malloc_r+0xc2>
 80039a6:	1961      	adds	r1, r4, r5
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	6025      	str	r5, [r4, #0]
 80039ac:	bf18      	it	ne
 80039ae:	6059      	strne	r1, [r3, #4]
 80039b0:	6863      	ldr	r3, [r4, #4]
 80039b2:	bf08      	it	eq
 80039b4:	f8c8 1000 	streq.w	r1, [r8]
 80039b8:	5162      	str	r2, [r4, r5]
 80039ba:	604b      	str	r3, [r1, #4]
 80039bc:	4630      	mov	r0, r6
 80039be:	f000 f82f 	bl	8003a20 <__malloc_unlock>
 80039c2:	f104 000b 	add.w	r0, r4, #11
 80039c6:	1d23      	adds	r3, r4, #4
 80039c8:	f020 0007 	bic.w	r0, r0, #7
 80039cc:	1ac2      	subs	r2, r0, r3
 80039ce:	bf1c      	itt	ne
 80039d0:	1a1b      	subne	r3, r3, r0
 80039d2:	50a3      	strne	r3, [r4, r2]
 80039d4:	e7af      	b.n	8003936 <_malloc_r+0x22>
 80039d6:	6862      	ldr	r2, [r4, #4]
 80039d8:	42a3      	cmp	r3, r4
 80039da:	bf0c      	ite	eq
 80039dc:	f8c8 2000 	streq.w	r2, [r8]
 80039e0:	605a      	strne	r2, [r3, #4]
 80039e2:	e7eb      	b.n	80039bc <_malloc_r+0xa8>
 80039e4:	4623      	mov	r3, r4
 80039e6:	6864      	ldr	r4, [r4, #4]
 80039e8:	e7ae      	b.n	8003948 <_malloc_r+0x34>
 80039ea:	463c      	mov	r4, r7
 80039ec:	687f      	ldr	r7, [r7, #4]
 80039ee:	e7b6      	b.n	800395e <_malloc_r+0x4a>
 80039f0:	461a      	mov	r2, r3
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	42a3      	cmp	r3, r4
 80039f6:	d1fb      	bne.n	80039f0 <_malloc_r+0xdc>
 80039f8:	2300      	movs	r3, #0
 80039fa:	6053      	str	r3, [r2, #4]
 80039fc:	e7de      	b.n	80039bc <_malloc_r+0xa8>
 80039fe:	230c      	movs	r3, #12
 8003a00:	6033      	str	r3, [r6, #0]
 8003a02:	4630      	mov	r0, r6
 8003a04:	f000 f80c 	bl	8003a20 <__malloc_unlock>
 8003a08:	e794      	b.n	8003934 <_malloc_r+0x20>
 8003a0a:	6005      	str	r5, [r0, #0]
 8003a0c:	e7d6      	b.n	80039bc <_malloc_r+0xa8>
 8003a0e:	bf00      	nop
 8003a10:	2000026c 	.word	0x2000026c

08003a14 <__malloc_lock>:
 8003a14:	4801      	ldr	r0, [pc, #4]	@ (8003a1c <__malloc_lock+0x8>)
 8003a16:	f7ff bf0e 	b.w	8003836 <__retarget_lock_acquire_recursive>
 8003a1a:	bf00      	nop
 8003a1c:	20000264 	.word	0x20000264

08003a20 <__malloc_unlock>:
 8003a20:	4801      	ldr	r0, [pc, #4]	@ (8003a28 <__malloc_unlock+0x8>)
 8003a22:	f7ff bf09 	b.w	8003838 <__retarget_lock_release_recursive>
 8003a26:	bf00      	nop
 8003a28:	20000264 	.word	0x20000264

08003a2c <__sfputc_r>:
 8003a2c:	6893      	ldr	r3, [r2, #8]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	b410      	push	{r4}
 8003a34:	6093      	str	r3, [r2, #8]
 8003a36:	da08      	bge.n	8003a4a <__sfputc_r+0x1e>
 8003a38:	6994      	ldr	r4, [r2, #24]
 8003a3a:	42a3      	cmp	r3, r4
 8003a3c:	db01      	blt.n	8003a42 <__sfputc_r+0x16>
 8003a3e:	290a      	cmp	r1, #10
 8003a40:	d103      	bne.n	8003a4a <__sfputc_r+0x1e>
 8003a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a46:	f7ff bde8 	b.w	800361a <__swbuf_r>
 8003a4a:	6813      	ldr	r3, [r2, #0]
 8003a4c:	1c58      	adds	r0, r3, #1
 8003a4e:	6010      	str	r0, [r2, #0]
 8003a50:	7019      	strb	r1, [r3, #0]
 8003a52:	4608      	mov	r0, r1
 8003a54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a58:	4770      	bx	lr

08003a5a <__sfputs_r>:
 8003a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5c:	4606      	mov	r6, r0
 8003a5e:	460f      	mov	r7, r1
 8003a60:	4614      	mov	r4, r2
 8003a62:	18d5      	adds	r5, r2, r3
 8003a64:	42ac      	cmp	r4, r5
 8003a66:	d101      	bne.n	8003a6c <__sfputs_r+0x12>
 8003a68:	2000      	movs	r0, #0
 8003a6a:	e007      	b.n	8003a7c <__sfputs_r+0x22>
 8003a6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a70:	463a      	mov	r2, r7
 8003a72:	4630      	mov	r0, r6
 8003a74:	f7ff ffda 	bl	8003a2c <__sfputc_r>
 8003a78:	1c43      	adds	r3, r0, #1
 8003a7a:	d1f3      	bne.n	8003a64 <__sfputs_r+0xa>
 8003a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a80 <_vfiprintf_r>:
 8003a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a84:	460d      	mov	r5, r1
 8003a86:	b09d      	sub	sp, #116	@ 0x74
 8003a88:	4614      	mov	r4, r2
 8003a8a:	4698      	mov	r8, r3
 8003a8c:	4606      	mov	r6, r0
 8003a8e:	b118      	cbz	r0, 8003a98 <_vfiprintf_r+0x18>
 8003a90:	6a03      	ldr	r3, [r0, #32]
 8003a92:	b90b      	cbnz	r3, 8003a98 <_vfiprintf_r+0x18>
 8003a94:	f7ff fcd8 	bl	8003448 <__sinit>
 8003a98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a9a:	07d9      	lsls	r1, r3, #31
 8003a9c:	d405      	bmi.n	8003aaa <_vfiprintf_r+0x2a>
 8003a9e:	89ab      	ldrh	r3, [r5, #12]
 8003aa0:	059a      	lsls	r2, r3, #22
 8003aa2:	d402      	bmi.n	8003aaa <_vfiprintf_r+0x2a>
 8003aa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003aa6:	f7ff fec6 	bl	8003836 <__retarget_lock_acquire_recursive>
 8003aaa:	89ab      	ldrh	r3, [r5, #12]
 8003aac:	071b      	lsls	r3, r3, #28
 8003aae:	d501      	bpl.n	8003ab4 <_vfiprintf_r+0x34>
 8003ab0:	692b      	ldr	r3, [r5, #16]
 8003ab2:	b99b      	cbnz	r3, 8003adc <_vfiprintf_r+0x5c>
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	4630      	mov	r0, r6
 8003ab8:	f7ff fdee 	bl	8003698 <__swsetup_r>
 8003abc:	b170      	cbz	r0, 8003adc <_vfiprintf_r+0x5c>
 8003abe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ac0:	07dc      	lsls	r4, r3, #31
 8003ac2:	d504      	bpl.n	8003ace <_vfiprintf_r+0x4e>
 8003ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ac8:	b01d      	add	sp, #116	@ 0x74
 8003aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ace:	89ab      	ldrh	r3, [r5, #12]
 8003ad0:	0598      	lsls	r0, r3, #22
 8003ad2:	d4f7      	bmi.n	8003ac4 <_vfiprintf_r+0x44>
 8003ad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ad6:	f7ff feaf 	bl	8003838 <__retarget_lock_release_recursive>
 8003ada:	e7f3      	b.n	8003ac4 <_vfiprintf_r+0x44>
 8003adc:	2300      	movs	r3, #0
 8003ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ae0:	2320      	movs	r3, #32
 8003ae2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aea:	2330      	movs	r3, #48	@ 0x30
 8003aec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003c9c <_vfiprintf_r+0x21c>
 8003af0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003af4:	f04f 0901 	mov.w	r9, #1
 8003af8:	4623      	mov	r3, r4
 8003afa:	469a      	mov	sl, r3
 8003afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b00:	b10a      	cbz	r2, 8003b06 <_vfiprintf_r+0x86>
 8003b02:	2a25      	cmp	r2, #37	@ 0x25
 8003b04:	d1f9      	bne.n	8003afa <_vfiprintf_r+0x7a>
 8003b06:	ebba 0b04 	subs.w	fp, sl, r4
 8003b0a:	d00b      	beq.n	8003b24 <_vfiprintf_r+0xa4>
 8003b0c:	465b      	mov	r3, fp
 8003b0e:	4622      	mov	r2, r4
 8003b10:	4629      	mov	r1, r5
 8003b12:	4630      	mov	r0, r6
 8003b14:	f7ff ffa1 	bl	8003a5a <__sfputs_r>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	f000 80a7 	beq.w	8003c6c <_vfiprintf_r+0x1ec>
 8003b1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b20:	445a      	add	r2, fp
 8003b22:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b24:	f89a 3000 	ldrb.w	r3, [sl]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f000 809f 	beq.w	8003c6c <_vfiprintf_r+0x1ec>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b38:	f10a 0a01 	add.w	sl, sl, #1
 8003b3c:	9304      	str	r3, [sp, #16]
 8003b3e:	9307      	str	r3, [sp, #28]
 8003b40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b44:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b46:	4654      	mov	r4, sl
 8003b48:	2205      	movs	r2, #5
 8003b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b4e:	4853      	ldr	r0, [pc, #332]	@ (8003c9c <_vfiprintf_r+0x21c>)
 8003b50:	f7fc fb46 	bl	80001e0 <memchr>
 8003b54:	9a04      	ldr	r2, [sp, #16]
 8003b56:	b9d8      	cbnz	r0, 8003b90 <_vfiprintf_r+0x110>
 8003b58:	06d1      	lsls	r1, r2, #27
 8003b5a:	bf44      	itt	mi
 8003b5c:	2320      	movmi	r3, #32
 8003b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b62:	0713      	lsls	r3, r2, #28
 8003b64:	bf44      	itt	mi
 8003b66:	232b      	movmi	r3, #43	@ 0x2b
 8003b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8003b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b72:	d015      	beq.n	8003ba0 <_vfiprintf_r+0x120>
 8003b74:	9a07      	ldr	r2, [sp, #28]
 8003b76:	4654      	mov	r4, sl
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f04f 0c0a 	mov.w	ip, #10
 8003b7e:	4621      	mov	r1, r4
 8003b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b84:	3b30      	subs	r3, #48	@ 0x30
 8003b86:	2b09      	cmp	r3, #9
 8003b88:	d94b      	bls.n	8003c22 <_vfiprintf_r+0x1a2>
 8003b8a:	b1b0      	cbz	r0, 8003bba <_vfiprintf_r+0x13a>
 8003b8c:	9207      	str	r2, [sp, #28]
 8003b8e:	e014      	b.n	8003bba <_vfiprintf_r+0x13a>
 8003b90:	eba0 0308 	sub.w	r3, r0, r8
 8003b94:	fa09 f303 	lsl.w	r3, r9, r3
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	9304      	str	r3, [sp, #16]
 8003b9c:	46a2      	mov	sl, r4
 8003b9e:	e7d2      	b.n	8003b46 <_vfiprintf_r+0xc6>
 8003ba0:	9b03      	ldr	r3, [sp, #12]
 8003ba2:	1d19      	adds	r1, r3, #4
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	9103      	str	r1, [sp, #12]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bfbb      	ittet	lt
 8003bac:	425b      	neglt	r3, r3
 8003bae:	f042 0202 	orrlt.w	r2, r2, #2
 8003bb2:	9307      	strge	r3, [sp, #28]
 8003bb4:	9307      	strlt	r3, [sp, #28]
 8003bb6:	bfb8      	it	lt
 8003bb8:	9204      	strlt	r2, [sp, #16]
 8003bba:	7823      	ldrb	r3, [r4, #0]
 8003bbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bbe:	d10a      	bne.n	8003bd6 <_vfiprintf_r+0x156>
 8003bc0:	7863      	ldrb	r3, [r4, #1]
 8003bc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bc4:	d132      	bne.n	8003c2c <_vfiprintf_r+0x1ac>
 8003bc6:	9b03      	ldr	r3, [sp, #12]
 8003bc8:	1d1a      	adds	r2, r3, #4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	9203      	str	r2, [sp, #12]
 8003bce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bd2:	3402      	adds	r4, #2
 8003bd4:	9305      	str	r3, [sp, #20]
 8003bd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003cac <_vfiprintf_r+0x22c>
 8003bda:	7821      	ldrb	r1, [r4, #0]
 8003bdc:	2203      	movs	r2, #3
 8003bde:	4650      	mov	r0, sl
 8003be0:	f7fc fafe 	bl	80001e0 <memchr>
 8003be4:	b138      	cbz	r0, 8003bf6 <_vfiprintf_r+0x176>
 8003be6:	9b04      	ldr	r3, [sp, #16]
 8003be8:	eba0 000a 	sub.w	r0, r0, sl
 8003bec:	2240      	movs	r2, #64	@ 0x40
 8003bee:	4082      	lsls	r2, r0
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	3401      	adds	r4, #1
 8003bf4:	9304      	str	r3, [sp, #16]
 8003bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bfa:	4829      	ldr	r0, [pc, #164]	@ (8003ca0 <_vfiprintf_r+0x220>)
 8003bfc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c00:	2206      	movs	r2, #6
 8003c02:	f7fc faed 	bl	80001e0 <memchr>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	d03f      	beq.n	8003c8a <_vfiprintf_r+0x20a>
 8003c0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ca4 <_vfiprintf_r+0x224>)
 8003c0c:	bb1b      	cbnz	r3, 8003c56 <_vfiprintf_r+0x1d6>
 8003c0e:	9b03      	ldr	r3, [sp, #12]
 8003c10:	3307      	adds	r3, #7
 8003c12:	f023 0307 	bic.w	r3, r3, #7
 8003c16:	3308      	adds	r3, #8
 8003c18:	9303      	str	r3, [sp, #12]
 8003c1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c1c:	443b      	add	r3, r7
 8003c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c20:	e76a      	b.n	8003af8 <_vfiprintf_r+0x78>
 8003c22:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c26:	460c      	mov	r4, r1
 8003c28:	2001      	movs	r0, #1
 8003c2a:	e7a8      	b.n	8003b7e <_vfiprintf_r+0xfe>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	3401      	adds	r4, #1
 8003c30:	9305      	str	r3, [sp, #20]
 8003c32:	4619      	mov	r1, r3
 8003c34:	f04f 0c0a 	mov.w	ip, #10
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c3e:	3a30      	subs	r2, #48	@ 0x30
 8003c40:	2a09      	cmp	r2, #9
 8003c42:	d903      	bls.n	8003c4c <_vfiprintf_r+0x1cc>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0c6      	beq.n	8003bd6 <_vfiprintf_r+0x156>
 8003c48:	9105      	str	r1, [sp, #20]
 8003c4a:	e7c4      	b.n	8003bd6 <_vfiprintf_r+0x156>
 8003c4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c50:	4604      	mov	r4, r0
 8003c52:	2301      	movs	r3, #1
 8003c54:	e7f0      	b.n	8003c38 <_vfiprintf_r+0x1b8>
 8003c56:	ab03      	add	r3, sp, #12
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	462a      	mov	r2, r5
 8003c5c:	4b12      	ldr	r3, [pc, #72]	@ (8003ca8 <_vfiprintf_r+0x228>)
 8003c5e:	a904      	add	r1, sp, #16
 8003c60:	4630      	mov	r0, r6
 8003c62:	f3af 8000 	nop.w
 8003c66:	4607      	mov	r7, r0
 8003c68:	1c78      	adds	r0, r7, #1
 8003c6a:	d1d6      	bne.n	8003c1a <_vfiprintf_r+0x19a>
 8003c6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c6e:	07d9      	lsls	r1, r3, #31
 8003c70:	d405      	bmi.n	8003c7e <_vfiprintf_r+0x1fe>
 8003c72:	89ab      	ldrh	r3, [r5, #12]
 8003c74:	059a      	lsls	r2, r3, #22
 8003c76:	d402      	bmi.n	8003c7e <_vfiprintf_r+0x1fe>
 8003c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c7a:	f7ff fddd 	bl	8003838 <__retarget_lock_release_recursive>
 8003c7e:	89ab      	ldrh	r3, [r5, #12]
 8003c80:	065b      	lsls	r3, r3, #25
 8003c82:	f53f af1f 	bmi.w	8003ac4 <_vfiprintf_r+0x44>
 8003c86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c88:	e71e      	b.n	8003ac8 <_vfiprintf_r+0x48>
 8003c8a:	ab03      	add	r3, sp, #12
 8003c8c:	9300      	str	r3, [sp, #0]
 8003c8e:	462a      	mov	r2, r5
 8003c90:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <_vfiprintf_r+0x228>)
 8003c92:	a904      	add	r1, sp, #16
 8003c94:	4630      	mov	r0, r6
 8003c96:	f000 f879 	bl	8003d8c <_printf_i>
 8003c9a:	e7e4      	b.n	8003c66 <_vfiprintf_r+0x1e6>
 8003c9c:	08004300 	.word	0x08004300
 8003ca0:	0800430a 	.word	0x0800430a
 8003ca4:	00000000 	.word	0x00000000
 8003ca8:	08003a5b 	.word	0x08003a5b
 8003cac:	08004306 	.word	0x08004306

08003cb0 <_printf_common>:
 8003cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003cb4:	4616      	mov	r6, r2
 8003cb6:	4698      	mov	r8, r3
 8003cb8:	688a      	ldr	r2, [r1, #8]
 8003cba:	690b      	ldr	r3, [r1, #16]
 8003cbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	bfb8      	it	lt
 8003cc4:	4613      	movlt	r3, r2
 8003cc6:	6033      	str	r3, [r6, #0]
 8003cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003ccc:	4607      	mov	r7, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	b10a      	cbz	r2, 8003cd6 <_printf_common+0x26>
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	6033      	str	r3, [r6, #0]
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	0699      	lsls	r1, r3, #26
 8003cda:	bf42      	ittt	mi
 8003cdc:	6833      	ldrmi	r3, [r6, #0]
 8003cde:	3302      	addmi	r3, #2
 8003ce0:	6033      	strmi	r3, [r6, #0]
 8003ce2:	6825      	ldr	r5, [r4, #0]
 8003ce4:	f015 0506 	ands.w	r5, r5, #6
 8003ce8:	d106      	bne.n	8003cf8 <_printf_common+0x48>
 8003cea:	f104 0a19 	add.w	sl, r4, #25
 8003cee:	68e3      	ldr	r3, [r4, #12]
 8003cf0:	6832      	ldr	r2, [r6, #0]
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	42ab      	cmp	r3, r5
 8003cf6:	dc26      	bgt.n	8003d46 <_printf_common+0x96>
 8003cf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cfc:	6822      	ldr	r2, [r4, #0]
 8003cfe:	3b00      	subs	r3, #0
 8003d00:	bf18      	it	ne
 8003d02:	2301      	movne	r3, #1
 8003d04:	0692      	lsls	r2, r2, #26
 8003d06:	d42b      	bmi.n	8003d60 <_printf_common+0xb0>
 8003d08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d0c:	4641      	mov	r1, r8
 8003d0e:	4638      	mov	r0, r7
 8003d10:	47c8      	blx	r9
 8003d12:	3001      	adds	r0, #1
 8003d14:	d01e      	beq.n	8003d54 <_printf_common+0xa4>
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	6922      	ldr	r2, [r4, #16]
 8003d1a:	f003 0306 	and.w	r3, r3, #6
 8003d1e:	2b04      	cmp	r3, #4
 8003d20:	bf02      	ittt	eq
 8003d22:	68e5      	ldreq	r5, [r4, #12]
 8003d24:	6833      	ldreq	r3, [r6, #0]
 8003d26:	1aed      	subeq	r5, r5, r3
 8003d28:	68a3      	ldr	r3, [r4, #8]
 8003d2a:	bf0c      	ite	eq
 8003d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d30:	2500      	movne	r5, #0
 8003d32:	4293      	cmp	r3, r2
 8003d34:	bfc4      	itt	gt
 8003d36:	1a9b      	subgt	r3, r3, r2
 8003d38:	18ed      	addgt	r5, r5, r3
 8003d3a:	2600      	movs	r6, #0
 8003d3c:	341a      	adds	r4, #26
 8003d3e:	42b5      	cmp	r5, r6
 8003d40:	d11a      	bne.n	8003d78 <_printf_common+0xc8>
 8003d42:	2000      	movs	r0, #0
 8003d44:	e008      	b.n	8003d58 <_printf_common+0xa8>
 8003d46:	2301      	movs	r3, #1
 8003d48:	4652      	mov	r2, sl
 8003d4a:	4641      	mov	r1, r8
 8003d4c:	4638      	mov	r0, r7
 8003d4e:	47c8      	blx	r9
 8003d50:	3001      	adds	r0, #1
 8003d52:	d103      	bne.n	8003d5c <_printf_common+0xac>
 8003d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d5c:	3501      	adds	r5, #1
 8003d5e:	e7c6      	b.n	8003cee <_printf_common+0x3e>
 8003d60:	18e1      	adds	r1, r4, r3
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	2030      	movs	r0, #48	@ 0x30
 8003d66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d6a:	4422      	add	r2, r4
 8003d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d74:	3302      	adds	r3, #2
 8003d76:	e7c7      	b.n	8003d08 <_printf_common+0x58>
 8003d78:	2301      	movs	r3, #1
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	4638      	mov	r0, r7
 8003d80:	47c8      	blx	r9
 8003d82:	3001      	adds	r0, #1
 8003d84:	d0e6      	beq.n	8003d54 <_printf_common+0xa4>
 8003d86:	3601      	adds	r6, #1
 8003d88:	e7d9      	b.n	8003d3e <_printf_common+0x8e>
	...

08003d8c <_printf_i>:
 8003d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d90:	7e0f      	ldrb	r7, [r1, #24]
 8003d92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d94:	2f78      	cmp	r7, #120	@ 0x78
 8003d96:	4691      	mov	r9, r2
 8003d98:	4680      	mov	r8, r0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	469a      	mov	sl, r3
 8003d9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003da2:	d807      	bhi.n	8003db4 <_printf_i+0x28>
 8003da4:	2f62      	cmp	r7, #98	@ 0x62
 8003da6:	d80a      	bhi.n	8003dbe <_printf_i+0x32>
 8003da8:	2f00      	cmp	r7, #0
 8003daa:	f000 80d1 	beq.w	8003f50 <_printf_i+0x1c4>
 8003dae:	2f58      	cmp	r7, #88	@ 0x58
 8003db0:	f000 80b8 	beq.w	8003f24 <_printf_i+0x198>
 8003db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003db8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003dbc:	e03a      	b.n	8003e34 <_printf_i+0xa8>
 8003dbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003dc2:	2b15      	cmp	r3, #21
 8003dc4:	d8f6      	bhi.n	8003db4 <_printf_i+0x28>
 8003dc6:	a101      	add	r1, pc, #4	@ (adr r1, 8003dcc <_printf_i+0x40>)
 8003dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003dcc:	08003e25 	.word	0x08003e25
 8003dd0:	08003e39 	.word	0x08003e39
 8003dd4:	08003db5 	.word	0x08003db5
 8003dd8:	08003db5 	.word	0x08003db5
 8003ddc:	08003db5 	.word	0x08003db5
 8003de0:	08003db5 	.word	0x08003db5
 8003de4:	08003e39 	.word	0x08003e39
 8003de8:	08003db5 	.word	0x08003db5
 8003dec:	08003db5 	.word	0x08003db5
 8003df0:	08003db5 	.word	0x08003db5
 8003df4:	08003db5 	.word	0x08003db5
 8003df8:	08003f37 	.word	0x08003f37
 8003dfc:	08003e63 	.word	0x08003e63
 8003e00:	08003ef1 	.word	0x08003ef1
 8003e04:	08003db5 	.word	0x08003db5
 8003e08:	08003db5 	.word	0x08003db5
 8003e0c:	08003f59 	.word	0x08003f59
 8003e10:	08003db5 	.word	0x08003db5
 8003e14:	08003e63 	.word	0x08003e63
 8003e18:	08003db5 	.word	0x08003db5
 8003e1c:	08003db5 	.word	0x08003db5
 8003e20:	08003ef9 	.word	0x08003ef9
 8003e24:	6833      	ldr	r3, [r6, #0]
 8003e26:	1d1a      	adds	r2, r3, #4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	6032      	str	r2, [r6, #0]
 8003e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e34:	2301      	movs	r3, #1
 8003e36:	e09c      	b.n	8003f72 <_printf_i+0x1e6>
 8003e38:	6833      	ldr	r3, [r6, #0]
 8003e3a:	6820      	ldr	r0, [r4, #0]
 8003e3c:	1d19      	adds	r1, r3, #4
 8003e3e:	6031      	str	r1, [r6, #0]
 8003e40:	0606      	lsls	r6, r0, #24
 8003e42:	d501      	bpl.n	8003e48 <_printf_i+0xbc>
 8003e44:	681d      	ldr	r5, [r3, #0]
 8003e46:	e003      	b.n	8003e50 <_printf_i+0xc4>
 8003e48:	0645      	lsls	r5, r0, #25
 8003e4a:	d5fb      	bpl.n	8003e44 <_printf_i+0xb8>
 8003e4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e50:	2d00      	cmp	r5, #0
 8003e52:	da03      	bge.n	8003e5c <_printf_i+0xd0>
 8003e54:	232d      	movs	r3, #45	@ 0x2d
 8003e56:	426d      	negs	r5, r5
 8003e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e5c:	4858      	ldr	r0, [pc, #352]	@ (8003fc0 <_printf_i+0x234>)
 8003e5e:	230a      	movs	r3, #10
 8003e60:	e011      	b.n	8003e86 <_printf_i+0xfa>
 8003e62:	6821      	ldr	r1, [r4, #0]
 8003e64:	6833      	ldr	r3, [r6, #0]
 8003e66:	0608      	lsls	r0, r1, #24
 8003e68:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e6c:	d402      	bmi.n	8003e74 <_printf_i+0xe8>
 8003e6e:	0649      	lsls	r1, r1, #25
 8003e70:	bf48      	it	mi
 8003e72:	b2ad      	uxthmi	r5, r5
 8003e74:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e76:	4852      	ldr	r0, [pc, #328]	@ (8003fc0 <_printf_i+0x234>)
 8003e78:	6033      	str	r3, [r6, #0]
 8003e7a:	bf14      	ite	ne
 8003e7c:	230a      	movne	r3, #10
 8003e7e:	2308      	moveq	r3, #8
 8003e80:	2100      	movs	r1, #0
 8003e82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e86:	6866      	ldr	r6, [r4, #4]
 8003e88:	60a6      	str	r6, [r4, #8]
 8003e8a:	2e00      	cmp	r6, #0
 8003e8c:	db05      	blt.n	8003e9a <_printf_i+0x10e>
 8003e8e:	6821      	ldr	r1, [r4, #0]
 8003e90:	432e      	orrs	r6, r5
 8003e92:	f021 0104 	bic.w	r1, r1, #4
 8003e96:	6021      	str	r1, [r4, #0]
 8003e98:	d04b      	beq.n	8003f32 <_printf_i+0x1a6>
 8003e9a:	4616      	mov	r6, r2
 8003e9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ea0:	fb03 5711 	mls	r7, r3, r1, r5
 8003ea4:	5dc7      	ldrb	r7, [r0, r7]
 8003ea6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003eaa:	462f      	mov	r7, r5
 8003eac:	42bb      	cmp	r3, r7
 8003eae:	460d      	mov	r5, r1
 8003eb0:	d9f4      	bls.n	8003e9c <_printf_i+0x110>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d10b      	bne.n	8003ece <_printf_i+0x142>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	07df      	lsls	r7, r3, #31
 8003eba:	d508      	bpl.n	8003ece <_printf_i+0x142>
 8003ebc:	6923      	ldr	r3, [r4, #16]
 8003ebe:	6861      	ldr	r1, [r4, #4]
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	bfde      	ittt	le
 8003ec4:	2330      	movle	r3, #48	@ 0x30
 8003ec6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ece:	1b92      	subs	r2, r2, r6
 8003ed0:	6122      	str	r2, [r4, #16]
 8003ed2:	f8cd a000 	str.w	sl, [sp]
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	aa03      	add	r2, sp, #12
 8003eda:	4621      	mov	r1, r4
 8003edc:	4640      	mov	r0, r8
 8003ede:	f7ff fee7 	bl	8003cb0 <_printf_common>
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d14a      	bne.n	8003f7c <_printf_i+0x1f0>
 8003ee6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003eea:	b004      	add	sp, #16
 8003eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	f043 0320 	orr.w	r3, r3, #32
 8003ef6:	6023      	str	r3, [r4, #0]
 8003ef8:	4832      	ldr	r0, [pc, #200]	@ (8003fc4 <_printf_i+0x238>)
 8003efa:	2778      	movs	r7, #120	@ 0x78
 8003efc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	6831      	ldr	r1, [r6, #0]
 8003f04:	061f      	lsls	r7, r3, #24
 8003f06:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f0a:	d402      	bmi.n	8003f12 <_printf_i+0x186>
 8003f0c:	065f      	lsls	r7, r3, #25
 8003f0e:	bf48      	it	mi
 8003f10:	b2ad      	uxthmi	r5, r5
 8003f12:	6031      	str	r1, [r6, #0]
 8003f14:	07d9      	lsls	r1, r3, #31
 8003f16:	bf44      	itt	mi
 8003f18:	f043 0320 	orrmi.w	r3, r3, #32
 8003f1c:	6023      	strmi	r3, [r4, #0]
 8003f1e:	b11d      	cbz	r5, 8003f28 <_printf_i+0x19c>
 8003f20:	2310      	movs	r3, #16
 8003f22:	e7ad      	b.n	8003e80 <_printf_i+0xf4>
 8003f24:	4826      	ldr	r0, [pc, #152]	@ (8003fc0 <_printf_i+0x234>)
 8003f26:	e7e9      	b.n	8003efc <_printf_i+0x170>
 8003f28:	6823      	ldr	r3, [r4, #0]
 8003f2a:	f023 0320 	bic.w	r3, r3, #32
 8003f2e:	6023      	str	r3, [r4, #0]
 8003f30:	e7f6      	b.n	8003f20 <_printf_i+0x194>
 8003f32:	4616      	mov	r6, r2
 8003f34:	e7bd      	b.n	8003eb2 <_printf_i+0x126>
 8003f36:	6833      	ldr	r3, [r6, #0]
 8003f38:	6825      	ldr	r5, [r4, #0]
 8003f3a:	6961      	ldr	r1, [r4, #20]
 8003f3c:	1d18      	adds	r0, r3, #4
 8003f3e:	6030      	str	r0, [r6, #0]
 8003f40:	062e      	lsls	r6, r5, #24
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	d501      	bpl.n	8003f4a <_printf_i+0x1be>
 8003f46:	6019      	str	r1, [r3, #0]
 8003f48:	e002      	b.n	8003f50 <_printf_i+0x1c4>
 8003f4a:	0668      	lsls	r0, r5, #25
 8003f4c:	d5fb      	bpl.n	8003f46 <_printf_i+0x1ba>
 8003f4e:	8019      	strh	r1, [r3, #0]
 8003f50:	2300      	movs	r3, #0
 8003f52:	6123      	str	r3, [r4, #16]
 8003f54:	4616      	mov	r6, r2
 8003f56:	e7bc      	b.n	8003ed2 <_printf_i+0x146>
 8003f58:	6833      	ldr	r3, [r6, #0]
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	6032      	str	r2, [r6, #0]
 8003f5e:	681e      	ldr	r6, [r3, #0]
 8003f60:	6862      	ldr	r2, [r4, #4]
 8003f62:	2100      	movs	r1, #0
 8003f64:	4630      	mov	r0, r6
 8003f66:	f7fc f93b 	bl	80001e0 <memchr>
 8003f6a:	b108      	cbz	r0, 8003f70 <_printf_i+0x1e4>
 8003f6c:	1b80      	subs	r0, r0, r6
 8003f6e:	6060      	str	r0, [r4, #4]
 8003f70:	6863      	ldr	r3, [r4, #4]
 8003f72:	6123      	str	r3, [r4, #16]
 8003f74:	2300      	movs	r3, #0
 8003f76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f7a:	e7aa      	b.n	8003ed2 <_printf_i+0x146>
 8003f7c:	6923      	ldr	r3, [r4, #16]
 8003f7e:	4632      	mov	r2, r6
 8003f80:	4649      	mov	r1, r9
 8003f82:	4640      	mov	r0, r8
 8003f84:	47d0      	blx	sl
 8003f86:	3001      	adds	r0, #1
 8003f88:	d0ad      	beq.n	8003ee6 <_printf_i+0x15a>
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	079b      	lsls	r3, r3, #30
 8003f8e:	d413      	bmi.n	8003fb8 <_printf_i+0x22c>
 8003f90:	68e0      	ldr	r0, [r4, #12]
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	4298      	cmp	r0, r3
 8003f96:	bfb8      	it	lt
 8003f98:	4618      	movlt	r0, r3
 8003f9a:	e7a6      	b.n	8003eea <_printf_i+0x15e>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4632      	mov	r2, r6
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4640      	mov	r0, r8
 8003fa4:	47d0      	blx	sl
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d09d      	beq.n	8003ee6 <_printf_i+0x15a>
 8003faa:	3501      	adds	r5, #1
 8003fac:	68e3      	ldr	r3, [r4, #12]
 8003fae:	9903      	ldr	r1, [sp, #12]
 8003fb0:	1a5b      	subs	r3, r3, r1
 8003fb2:	42ab      	cmp	r3, r5
 8003fb4:	dcf2      	bgt.n	8003f9c <_printf_i+0x210>
 8003fb6:	e7eb      	b.n	8003f90 <_printf_i+0x204>
 8003fb8:	2500      	movs	r5, #0
 8003fba:	f104 0619 	add.w	r6, r4, #25
 8003fbe:	e7f5      	b.n	8003fac <_printf_i+0x220>
 8003fc0:	08004311 	.word	0x08004311
 8003fc4:	08004322 	.word	0x08004322

08003fc8 <__sflush_r>:
 8003fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fd0:	0716      	lsls	r6, r2, #28
 8003fd2:	4605      	mov	r5, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	d454      	bmi.n	8004082 <__sflush_r+0xba>
 8003fd8:	684b      	ldr	r3, [r1, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	dc02      	bgt.n	8003fe4 <__sflush_r+0x1c>
 8003fde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dd48      	ble.n	8004076 <__sflush_r+0xae>
 8003fe4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003fe6:	2e00      	cmp	r6, #0
 8003fe8:	d045      	beq.n	8004076 <__sflush_r+0xae>
 8003fea:	2300      	movs	r3, #0
 8003fec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003ff0:	682f      	ldr	r7, [r5, #0]
 8003ff2:	6a21      	ldr	r1, [r4, #32]
 8003ff4:	602b      	str	r3, [r5, #0]
 8003ff6:	d030      	beq.n	800405a <__sflush_r+0x92>
 8003ff8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	0759      	lsls	r1, r3, #29
 8003ffe:	d505      	bpl.n	800400c <__sflush_r+0x44>
 8004000:	6863      	ldr	r3, [r4, #4]
 8004002:	1ad2      	subs	r2, r2, r3
 8004004:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004006:	b10b      	cbz	r3, 800400c <__sflush_r+0x44>
 8004008:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800400a:	1ad2      	subs	r2, r2, r3
 800400c:	2300      	movs	r3, #0
 800400e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004010:	6a21      	ldr	r1, [r4, #32]
 8004012:	4628      	mov	r0, r5
 8004014:	47b0      	blx	r6
 8004016:	1c43      	adds	r3, r0, #1
 8004018:	89a3      	ldrh	r3, [r4, #12]
 800401a:	d106      	bne.n	800402a <__sflush_r+0x62>
 800401c:	6829      	ldr	r1, [r5, #0]
 800401e:	291d      	cmp	r1, #29
 8004020:	d82b      	bhi.n	800407a <__sflush_r+0xb2>
 8004022:	4a2a      	ldr	r2, [pc, #168]	@ (80040cc <__sflush_r+0x104>)
 8004024:	40ca      	lsrs	r2, r1
 8004026:	07d6      	lsls	r6, r2, #31
 8004028:	d527      	bpl.n	800407a <__sflush_r+0xb2>
 800402a:	2200      	movs	r2, #0
 800402c:	6062      	str	r2, [r4, #4]
 800402e:	04d9      	lsls	r1, r3, #19
 8004030:	6922      	ldr	r2, [r4, #16]
 8004032:	6022      	str	r2, [r4, #0]
 8004034:	d504      	bpl.n	8004040 <__sflush_r+0x78>
 8004036:	1c42      	adds	r2, r0, #1
 8004038:	d101      	bne.n	800403e <__sflush_r+0x76>
 800403a:	682b      	ldr	r3, [r5, #0]
 800403c:	b903      	cbnz	r3, 8004040 <__sflush_r+0x78>
 800403e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004040:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004042:	602f      	str	r7, [r5, #0]
 8004044:	b1b9      	cbz	r1, 8004076 <__sflush_r+0xae>
 8004046:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800404a:	4299      	cmp	r1, r3
 800404c:	d002      	beq.n	8004054 <__sflush_r+0x8c>
 800404e:	4628      	mov	r0, r5
 8004050:	f7ff fbf4 	bl	800383c <_free_r>
 8004054:	2300      	movs	r3, #0
 8004056:	6363      	str	r3, [r4, #52]	@ 0x34
 8004058:	e00d      	b.n	8004076 <__sflush_r+0xae>
 800405a:	2301      	movs	r3, #1
 800405c:	4628      	mov	r0, r5
 800405e:	47b0      	blx	r6
 8004060:	4602      	mov	r2, r0
 8004062:	1c50      	adds	r0, r2, #1
 8004064:	d1c9      	bne.n	8003ffa <__sflush_r+0x32>
 8004066:	682b      	ldr	r3, [r5, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0c6      	beq.n	8003ffa <__sflush_r+0x32>
 800406c:	2b1d      	cmp	r3, #29
 800406e:	d001      	beq.n	8004074 <__sflush_r+0xac>
 8004070:	2b16      	cmp	r3, #22
 8004072:	d11e      	bne.n	80040b2 <__sflush_r+0xea>
 8004074:	602f      	str	r7, [r5, #0]
 8004076:	2000      	movs	r0, #0
 8004078:	e022      	b.n	80040c0 <__sflush_r+0xf8>
 800407a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800407e:	b21b      	sxth	r3, r3
 8004080:	e01b      	b.n	80040ba <__sflush_r+0xf2>
 8004082:	690f      	ldr	r7, [r1, #16]
 8004084:	2f00      	cmp	r7, #0
 8004086:	d0f6      	beq.n	8004076 <__sflush_r+0xae>
 8004088:	0793      	lsls	r3, r2, #30
 800408a:	680e      	ldr	r6, [r1, #0]
 800408c:	bf08      	it	eq
 800408e:	694b      	ldreq	r3, [r1, #20]
 8004090:	600f      	str	r7, [r1, #0]
 8004092:	bf18      	it	ne
 8004094:	2300      	movne	r3, #0
 8004096:	eba6 0807 	sub.w	r8, r6, r7
 800409a:	608b      	str	r3, [r1, #8]
 800409c:	f1b8 0f00 	cmp.w	r8, #0
 80040a0:	dde9      	ble.n	8004076 <__sflush_r+0xae>
 80040a2:	6a21      	ldr	r1, [r4, #32]
 80040a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80040a6:	4643      	mov	r3, r8
 80040a8:	463a      	mov	r2, r7
 80040aa:	4628      	mov	r0, r5
 80040ac:	47b0      	blx	r6
 80040ae:	2800      	cmp	r0, #0
 80040b0:	dc08      	bgt.n	80040c4 <__sflush_r+0xfc>
 80040b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ba:	81a3      	strh	r3, [r4, #12]
 80040bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c4:	4407      	add	r7, r0
 80040c6:	eba8 0800 	sub.w	r8, r8, r0
 80040ca:	e7e7      	b.n	800409c <__sflush_r+0xd4>
 80040cc:	20400001 	.word	0x20400001

080040d0 <_fflush_r>:
 80040d0:	b538      	push	{r3, r4, r5, lr}
 80040d2:	690b      	ldr	r3, [r1, #16]
 80040d4:	4605      	mov	r5, r0
 80040d6:	460c      	mov	r4, r1
 80040d8:	b913      	cbnz	r3, 80040e0 <_fflush_r+0x10>
 80040da:	2500      	movs	r5, #0
 80040dc:	4628      	mov	r0, r5
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	b118      	cbz	r0, 80040ea <_fflush_r+0x1a>
 80040e2:	6a03      	ldr	r3, [r0, #32]
 80040e4:	b90b      	cbnz	r3, 80040ea <_fflush_r+0x1a>
 80040e6:	f7ff f9af 	bl	8003448 <__sinit>
 80040ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f3      	beq.n	80040da <_fflush_r+0xa>
 80040f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80040f4:	07d0      	lsls	r0, r2, #31
 80040f6:	d404      	bmi.n	8004102 <_fflush_r+0x32>
 80040f8:	0599      	lsls	r1, r3, #22
 80040fa:	d402      	bmi.n	8004102 <_fflush_r+0x32>
 80040fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040fe:	f7ff fb9a 	bl	8003836 <__retarget_lock_acquire_recursive>
 8004102:	4628      	mov	r0, r5
 8004104:	4621      	mov	r1, r4
 8004106:	f7ff ff5f 	bl	8003fc8 <__sflush_r>
 800410a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800410c:	07da      	lsls	r2, r3, #31
 800410e:	4605      	mov	r5, r0
 8004110:	d4e4      	bmi.n	80040dc <_fflush_r+0xc>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	059b      	lsls	r3, r3, #22
 8004116:	d4e1      	bmi.n	80040dc <_fflush_r+0xc>
 8004118:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800411a:	f7ff fb8d 	bl	8003838 <__retarget_lock_release_recursive>
 800411e:	e7dd      	b.n	80040dc <_fflush_r+0xc>

08004120 <__swhatbuf_r>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	460c      	mov	r4, r1
 8004124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004128:	2900      	cmp	r1, #0
 800412a:	b096      	sub	sp, #88	@ 0x58
 800412c:	4615      	mov	r5, r2
 800412e:	461e      	mov	r6, r3
 8004130:	da0d      	bge.n	800414e <__swhatbuf_r+0x2e>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004138:	f04f 0100 	mov.w	r1, #0
 800413c:	bf14      	ite	ne
 800413e:	2340      	movne	r3, #64	@ 0x40
 8004140:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004144:	2000      	movs	r0, #0
 8004146:	6031      	str	r1, [r6, #0]
 8004148:	602b      	str	r3, [r5, #0]
 800414a:	b016      	add	sp, #88	@ 0x58
 800414c:	bd70      	pop	{r4, r5, r6, pc}
 800414e:	466a      	mov	r2, sp
 8004150:	f000 f848 	bl	80041e4 <_fstat_r>
 8004154:	2800      	cmp	r0, #0
 8004156:	dbec      	blt.n	8004132 <__swhatbuf_r+0x12>
 8004158:	9901      	ldr	r1, [sp, #4]
 800415a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800415e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004162:	4259      	negs	r1, r3
 8004164:	4159      	adcs	r1, r3
 8004166:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800416a:	e7eb      	b.n	8004144 <__swhatbuf_r+0x24>

0800416c <__smakebuf_r>:
 800416c:	898b      	ldrh	r3, [r1, #12]
 800416e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004170:	079d      	lsls	r5, r3, #30
 8004172:	4606      	mov	r6, r0
 8004174:	460c      	mov	r4, r1
 8004176:	d507      	bpl.n	8004188 <__smakebuf_r+0x1c>
 8004178:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	6123      	str	r3, [r4, #16]
 8004180:	2301      	movs	r3, #1
 8004182:	6163      	str	r3, [r4, #20]
 8004184:	b003      	add	sp, #12
 8004186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004188:	ab01      	add	r3, sp, #4
 800418a:	466a      	mov	r2, sp
 800418c:	f7ff ffc8 	bl	8004120 <__swhatbuf_r>
 8004190:	9f00      	ldr	r7, [sp, #0]
 8004192:	4605      	mov	r5, r0
 8004194:	4639      	mov	r1, r7
 8004196:	4630      	mov	r0, r6
 8004198:	f7ff fbbc 	bl	8003914 <_malloc_r>
 800419c:	b948      	cbnz	r0, 80041b2 <__smakebuf_r+0x46>
 800419e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041a2:	059a      	lsls	r2, r3, #22
 80041a4:	d4ee      	bmi.n	8004184 <__smakebuf_r+0x18>
 80041a6:	f023 0303 	bic.w	r3, r3, #3
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	81a3      	strh	r3, [r4, #12]
 80041b0:	e7e2      	b.n	8004178 <__smakebuf_r+0xc>
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	6020      	str	r0, [r4, #0]
 80041b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	9b01      	ldr	r3, [sp, #4]
 80041be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80041c2:	b15b      	cbz	r3, 80041dc <__smakebuf_r+0x70>
 80041c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041c8:	4630      	mov	r0, r6
 80041ca:	f000 f81d 	bl	8004208 <_isatty_r>
 80041ce:	b128      	cbz	r0, 80041dc <__smakebuf_r+0x70>
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	f023 0303 	bic.w	r3, r3, #3
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	81a3      	strh	r3, [r4, #12]
 80041dc:	89a3      	ldrh	r3, [r4, #12]
 80041de:	431d      	orrs	r5, r3
 80041e0:	81a5      	strh	r5, [r4, #12]
 80041e2:	e7cf      	b.n	8004184 <__smakebuf_r+0x18>

080041e4 <_fstat_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4d07      	ldr	r5, [pc, #28]	@ (8004204 <_fstat_r+0x20>)
 80041e8:	2300      	movs	r3, #0
 80041ea:	4604      	mov	r4, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	f7fc fd4a 	bl	8000c8a <_fstat>
 80041f6:	1c43      	adds	r3, r0, #1
 80041f8:	d102      	bne.n	8004200 <_fstat_r+0x1c>
 80041fa:	682b      	ldr	r3, [r5, #0]
 80041fc:	b103      	cbz	r3, 8004200 <_fstat_r+0x1c>
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	bd38      	pop	{r3, r4, r5, pc}
 8004202:	bf00      	nop
 8004204:	20000260 	.word	0x20000260

08004208 <_isatty_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	4d06      	ldr	r5, [pc, #24]	@ (8004224 <_isatty_r+0x1c>)
 800420c:	2300      	movs	r3, #0
 800420e:	4604      	mov	r4, r0
 8004210:	4608      	mov	r0, r1
 8004212:	602b      	str	r3, [r5, #0]
 8004214:	f7fc fd49 	bl	8000caa <_isatty>
 8004218:	1c43      	adds	r3, r0, #1
 800421a:	d102      	bne.n	8004222 <_isatty_r+0x1a>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	b103      	cbz	r3, 8004222 <_isatty_r+0x1a>
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	bd38      	pop	{r3, r4, r5, pc}
 8004224:	20000260 	.word	0x20000260

08004228 <_sbrk_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	4d06      	ldr	r5, [pc, #24]	@ (8004244 <_sbrk_r+0x1c>)
 800422c:	2300      	movs	r3, #0
 800422e:	4604      	mov	r4, r0
 8004230:	4608      	mov	r0, r1
 8004232:	602b      	str	r3, [r5, #0]
 8004234:	f7fc fd52 	bl	8000cdc <_sbrk>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d102      	bne.n	8004242 <_sbrk_r+0x1a>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	b103      	cbz	r3, 8004242 <_sbrk_r+0x1a>
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	bd38      	pop	{r3, r4, r5, pc}
 8004244:	20000260 	.word	0x20000260

08004248 <_init>:
 8004248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424a:	bf00      	nop
 800424c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424e:	bc08      	pop	{r3}
 8004250:	469e      	mov	lr, r3
 8004252:	4770      	bx	lr

08004254 <_fini>:
 8004254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004256:	bf00      	nop
 8004258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425a:	bc08      	pop	{r3}
 800425c:	469e      	mov	lr, r3
 800425e:	4770      	bx	lr
