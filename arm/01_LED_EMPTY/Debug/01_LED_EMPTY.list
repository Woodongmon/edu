
01_LED_EMPTY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003ec  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000012b  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000d9  00000000  00000000  00001547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00001620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000003f  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001060  00000000  00000000  000016bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004d4  00000000  00000000  0000271f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000040eb  00000000  00000000  00002bf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00006cde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  00006d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00006de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003cc 	.word	0x080003cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003cc 	.word	0x080003cc

080001d8 <SystemClock_Config>:



/* 시스템 클럭 설정 */
void SystemClock_Config(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
    /* 1. HSE 활성화 */
    RCC_CR |= RCC_CR_HSEON;                    // HSE ON
 80001dc:	4b22      	ldr	r3, [pc, #136]	@ (8000268 <SystemClock_Config+0x90>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a21      	ldr	r2, [pc, #132]	@ (8000268 <SystemClock_Config+0x90>)
 80001e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80001e6:	6013      	str	r3, [r2, #0]
    while (!(RCC_CR & RCC_CR_HSERDY));         // HSE Ready 플래그 대기
 80001e8:	bf00      	nop
 80001ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000268 <SystemClock_Config+0x90>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d0f9      	beq.n	80001ea <SystemClock_Config+0x12>

    /* 2. PLL 설정: PLLM, PLLN, PLLP 값 설정 */
    RCC_PLLCFGR = (4 << RCC_PLLCFGR_PLLM_Pos) |    // PLLM = 4
 80001f6:	4b1d      	ldr	r3, [pc, #116]	@ (800026c <SystemClock_Config+0x94>)
 80001f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000270 <SystemClock_Config+0x98>)
 80001fa:	601a      	str	r2, [r3, #0]
                  (200 << RCC_PLLCFGR_PLLN_Pos)|   // PLLN = 200
                  (0x1 << RCC_PLLCFGR_PLLP_Pos)|   // PLLP = 4 (÷4)
                  (1 << RCC_PLLCFGR_PLLSRC_Pos);   // PLL 소스 = HSE

    /* 3. PLL 활성화 */
    RCC_CR |= RCC_CR_PLLON;                    // PLL ON
 80001fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000268 <SystemClock_Config+0x90>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a19      	ldr	r2, [pc, #100]	@ (8000268 <SystemClock_Config+0x90>)
 8000202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000206:	6013      	str	r3, [r2, #0]
    while (!(RCC_CR & RCC_CR_PLLRDY));         // PLL Ready 플래그 대기
 8000208:	bf00      	nop
 800020a:	4b17      	ldr	r3, [pc, #92]	@ (8000268 <SystemClock_Config+0x90>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f9      	beq.n	800020a <SystemClock_Config+0x32>

    /* 4. AHB, APB1, APB2 분주기 설정 */
    RCC_CFGR |= (0 << RCC_CFGR_HPRE_Pos);     // AHB Prescaler = 1 (SYSCLK 그대로)
 8000216:	4b17      	ldr	r3, [pc, #92]	@ (8000274 <SystemClock_Config+0x9c>)
 8000218:	4a16      	ldr	r2, [pc, #88]	@ (8000274 <SystemClock_Config+0x9c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (5 << RCC_CFGR_PPRE1_Pos);    // APB1 Prescaler = 4 (25MHz 최대)
 800021e:	4b15      	ldr	r3, [pc, #84]	@ (8000274 <SystemClock_Config+0x9c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a14      	ldr	r2, [pc, #80]	@ (8000274 <SystemClock_Config+0x9c>)
 8000224:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000228:	6013      	str	r3, [r2, #0]
    RCC_CFGR |= (4 << RCC_CFGR_PPRE2_Pos);    // APB2 Prescaler = 2 (50MHz 최대)
 800022a:	4b12      	ldr	r3, [pc, #72]	@ (8000274 <SystemClock_Config+0x9c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a11      	ldr	r2, [pc, #68]	@ (8000274 <SystemClock_Config+0x9c>)
 8000230:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000234:	6013      	str	r3, [r2, #0]

    /* 5. 플래시 메모리 설정 (Latency 조정) */
    FLASH_ACR |= FLASH_ACR_LATENCY_3WS;        // 3 Wait State
 8000236:	4b10      	ldr	r3, [pc, #64]	@ (8000278 <SystemClock_Config+0xa0>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	4a0f      	ldr	r2, [pc, #60]	@ (8000278 <SystemClock_Config+0xa0>)
 800023c:	f043 0303 	orr.w	r3, r3, #3
 8000240:	6013      	str	r3, [r2, #0]

    /* 6. 시스템 클럭 소스로 PLL 선택 */
    RCC_CFGR |= RCC_CFGR_SW_PLL;              // PLL 선택
 8000242:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <SystemClock_Config+0x9c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a0b      	ldr	r2, [pc, #44]	@ (8000274 <SystemClock_Config+0x9c>)
 8000248:	f043 0302 	orr.w	r3, r3, #2
 800024c:	6013      	str	r3, [r2, #0]
    while ((RCC_CFGR & RCC_CFGR_SW_PLL) != RCC_CFGR_SW_PLL); // SWS 확인
 800024e:	bf00      	nop
 8000250:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <SystemClock_Config+0x9c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	f003 0302 	and.w	r3, r3, #2
 8000258:	2b02      	cmp	r3, #2
 800025a:	d1f9      	bne.n	8000250 <SystemClock_Config+0x78>
}
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	40023800 	.word	0x40023800
 800026c:	40023804 	.word	0x40023804
 8000270:	00413204 	.word	0x00413204
 8000274:	40023808 	.word	0x40023808
 8000278:	40023c00 	.word	0x40023c00

0800027c <SysTick_Init>:

void SysTick_Init(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
    SYSTICK_LOAD = (100000 - 1);  // 1ms 주기 설정 (100MHz 기준)
 8000280:	4b06      	ldr	r3, [pc, #24]	@ (800029c <SysTick_Init+0x20>)
 8000282:	4a07      	ldr	r2, [pc, #28]	@ (80002a0 <SysTick_Init+0x24>)
 8000284:	601a      	str	r2, [r3, #0]
    SYSTICK_VAL = 0;              // 현재 값 초기화
 8000286:	4b07      	ldr	r3, [pc, #28]	@ (80002a4 <SysTick_Init+0x28>)
 8000288:	2200      	movs	r2, #0
 800028a:	601a      	str	r2, [r3, #0]
    SYSTICK_CTRL = (1 << 0) |     // SysTick 활성화
 800028c:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <SysTick_Init+0x2c>)
 800028e:	2205      	movs	r2, #5
 8000290:	601a      	str	r2, [r3, #0]
                   (1 << 2);      // 클럭 소스 = 프로세서 클럭
}
 8000292:	bf00      	nop
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	e000e014 	.word	0xe000e014
 80002a0:	0001869f 	.word	0x0001869f
 80002a4:	e000e018 	.word	0xe000e018
 80002a8:	e000e010 	.word	0xe000e010

080002ac <delay_ms>:

void delay_ms(uint32_t ms)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms; i++) {
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	e009      	b.n	80002ce <delay_ms+0x22>
        while (!(SYSTICK_CTRL & (1 << 16)));  // COUNTFLAG 비트 대기
 80002ba:	bf00      	nop
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <delay_ms+0x38>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d0f9      	beq.n	80002bc <delay_ms+0x10>
    for (uint32_t i = 0; i < ms; i++) {
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3301      	adds	r3, #1
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	429a      	cmp	r2, r3
 80002d4:	d3f1      	bcc.n	80002ba <delay_ms+0xe>
    }
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	e000e010 	.word	0xe000e010

080002e8 <main>:


int main()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
    SystemClock_Config();  // 시스템 클럭 설정
 80002ec:	f7ff ff74 	bl	80001d8 <SystemClock_Config>
    SysTick_Init();        // SysTick 초기화
 80002f0:	f7ff ffc4 	bl	800027c <SysTick_Init>

    /* GPIO 설정 */
    RCC_AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // GPIOA 클럭 활성화
 80002f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000324 <main+0x3c>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <main+0x3c>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6013      	str	r3, [r2, #0]
    GPIOA_MODER |= GPIOA_MODER_MODER5;   // PA5를 출력 모드로 설정
 8000300:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <main+0x40>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a08      	ldr	r2, [pc, #32]	@ (8000328 <main+0x40>)
 8000306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800030a:	6013      	str	r3, [r2, #0]

    while (1) {
        GPIOA_ODR ^= GPIOA_ODR_ODR5;     // PA5 토글 (LED Blink)
 800030c:	4b07      	ldr	r3, [pc, #28]	@ (800032c <main+0x44>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a06      	ldr	r2, [pc, #24]	@ (800032c <main+0x44>)
 8000312:	f083 0320 	eor.w	r3, r3, #32
 8000316:	6013      	str	r3, [r2, #0]
        delay_ms(1000);                  // 1초 딜레이
 8000318:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800031c:	f7ff ffc6 	bl	80002ac <delay_ms>
        GPIOA_ODR ^= GPIOA_ODR_ODR5;     // PA5 토글 (LED Blink)
 8000320:	bf00      	nop
 8000322:	e7f3      	b.n	800030c <main+0x24>
 8000324:	40023830 	.word	0x40023830
 8000328:	40020000 	.word	0x40020000
 800032c:	40020014 	.word	0x40020014

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/

  bl main
 8000362:	f7ff ffc1 	bl	80002e8 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	2000001c 	.word	0x2000001c

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4d0d      	ldr	r5, [pc, #52]	@ (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	@ (80003c0 <__libc_init_array+0x3c>)
 800038a:	1b64      	subs	r4, r4, r5
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2600      	movs	r6, #0
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4d0b      	ldr	r5, [pc, #44]	@ (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	@ (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2600      	movs	r6, #0
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e4 	.word	0x080003e4
 80003c8:	080003e8 	.word	0x080003e8

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
